{"version":3,"sources":["ColorPin/ColorPin.tsx","Model/Model.tsx","Types/PinColors.ts","SelectColor/SelectColor.tsx","PinRow/PinRow.tsx","Gameboard/Gameboard.tsx","Main.tsx","serviceWorker.ts","index.tsx"],"names":["ColorPin","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","colorPinStyle","display","borderRadius","color","backgroundColor","flexGrow","width","height","margin","react_default","a","createElement","style","onPinClick","pinNumber","onPickColor","React","Component","Modal","el","modalRoot","document","getElementById","appendChild","removeChild","left","top","element","current","rectangle","getBoundingClientRect","bottom","s","position","flexDirection","boxSizing","ReactDOM","createPortal","children","pinColors","SelectColor","_this2","map","index","ColorPin_ColorPin","PinRow","rowRef","createRef","state","showPinPicker","undefined","hintSquareBaseStyle","marginLeft","marginRight","marginTop","ref","Model_Modal","SelectColor_SelectColor","justifyContent","hintColors","objectSpread","onSetColor","setState","currentPinNumber","row","GameBoard","getInitialState","onMoveDone","onResetBoard","outer","titleStyle","fontSize","marginBottom","textAlign","gameLost","PinRow_PinRow","codeColors","gameWon","flexShrink","gameRows","currentRow","border","i","push","random","Math","floor","forEach","console","log","newBoardState","cloneGameRows","currentGameRow","guessColor","codeColorsToCheck","rightColorWrongPosition","rightColorRightPosition","_loop","guessedColor","codeColor","filter","c","length","_loop2","exists","remainingSlots","pos1","pos2","pos1Color","pos2Color","getGameEmptyRows","getCode","toConsumableArray","Main","apply","arguments","Gameboard_GameBoard","Boolean","window","location","hostname","match","render","Main_Main","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.33e26fe4.chunk.js","sourcesContent":["/**\r\n * This component represents a single pin in the game board.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class ColorPin extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component.\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            borderRadius: \"50%\",\r\n            color: this.props.color,\r\n            backgroundColor: this.props.color,\r\n            flexGrow: 0,\r\n            width: \"30px\",\r\n            height: \"30px\",\r\n            margin: 5,\r\n        };\r\n\r\n        return (\r\n            <button onClick={this.onClick} style={colorPinStyle}></button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handlers the click on a pin.\r\n     */\r\n    private onClick(): void {\r\n        if (this.props.onPinClick) {\r\n            this.props.onPinClick(this.props.pinNumber);\r\n        }\r\n\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(this.props.color);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class Modal extends React.Component<Properties> {\r\n\r\n    private el: HTMLDivElement;\r\n\r\n    private modalRoot: HTMLElement | null;\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.el = document.createElement(\"div\");\r\n        this.modalRoot = document.getElementById(\"portalRoot\");\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.appendChild(this.el);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.removeChild(this.el);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        let left = 0;\r\n        let top = 0;\r\n        if (this.props.element.current) {\r\n            const rectangle = this.props.element.current.getBoundingClientRect();\r\n            left = rectangle.left;\r\n            top = rectangle.bottom;\r\n        }\r\n\r\n        const s: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            left,\r\n            top,\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n        };\r\n\r\n        return ReactDOM.createPortal(\r\n            <div style={s}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>,\r\n            this.el,\r\n        );\r\n    }\r\n}","\r\n/**\r\n * The colors used in the game. Note that \"black\" means empty. The original version of the game used 6 color pins.\r\n */\r\nexport type PinColors = \"orange\" | \"yellow\" | \"blue\" | \"green\" | \"cyan\" | \"purple\" | \"black\";\r\n\r\n/**\r\n * An array of all colors supported by the game.\r\n */\r\nexport const pinColors: PinColors[] = [\"orange\", \"yellow\", \"blue\", \"green\", \"cyan\", \"purple\"];","/**\r\n * This component is a pop-up that allows the player to select a color for a clicked pin.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class SelectColor extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const selectColorStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection : \"row\",\r\n            backgroundColor: \"white\",\r\n        };\r\n\r\n        return (\r\n            <div style={selectColorStyle} >\r\n                {\r\n                    pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPickColor={this.onPickColor} />)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(color);\r\n        }\r\n    }\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { Modal } from \"../Model/Model\";\r\nimport { SelectColor } from \"../SelectColor/SelectColor\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\nimport { State } from \"./State\";\r\n\r\nexport class PinRow extends React.Component<Properties, State> {\r\n\r\n    private rowRef = React.createRef<HTMLDivElement>();\r\n\r\n    /**\r\n     * Contructor\r\n     * @param {Properties} properties\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showPinPicker: false,\r\n        };\r\n\r\n        this.onPinClick = this.onPinClick.bind(this);\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            backgroundColor: typeof(this.props.current) !== \"undefined\" ? this.props.current ? \"blue\" : \"brown\" : undefined\r\n        };\r\n\r\n        const hintBoxStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            justifyContent: \"right\"\r\n        };\r\n\r\n        const hintSquareBaseStyle: CSSProperties = {\r\n            width: \"15px\",\r\n            height: \"15px\",\r\n            marginLeft: 5,\r\n            marginRight: 5,\r\n            marginTop: 10,\r\n        };\r\n\r\n        return (\r\n            <div style={colorPinStyle} ref={this.rowRef} >\r\n                {\r\n                    this.props.pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPinClick={this.onPinClick} />)\r\n                }\r\n                {\r\n                    this.state.showPinPicker ?\r\n                        <Modal element={this.rowRef}>\r\n                            <SelectColor onPickColor={this.onPickColor} />\r\n                        </Modal>\r\n                        : null\r\n                }\r\n\r\n                <div style={hintBoxStyle}>\r\n                    {\r\n                        typeof (this.props.hintColors) !== \"undefined\" ?\r\n                            this.props.hintColors.map((color, index) => <div key={index} style={{ ...hintSquareBaseStyle, backgroundColor: color }} />)\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * An event fired when the user clicks on a pin in a pin row. Used to set the color of a pin.\r\n     * @param {number} pinNumber. The location of a pin in a row.\r\n     */\r\n    private onPinClick(pinNumber: number): void {\r\n        if (this.props.current && this.props.onSetColor) {\r\n            this.setState({ showPinPicker: true, currentPinNumber: pinNumber });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to select a color for a pin.\r\n     * @param {PinColors} color. Preset colors.\r\n     */\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.current && this.props.onSetColor && typeof (this.state.currentPinNumber) === \"number\") {\r\n            this.setState({ showPinPicker: false });\r\n\r\n            if (typeof (this.props.row) !== \"undefined\") {\r\n                this.props.onSetColor(this.props.row, this.state.currentPinNumber, color);\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * Gameboard component. This is where the action happens.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { PinRow } from \"../PinRow/PinRow\";\r\nimport { HintColors } from \"../Types/HintColors\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { GameRow } from \"./GameRow\";\r\nimport { State } from \"./State\";\r\n\r\nexport class GameBoard extends React.Component<{}, State> {\r\n\r\n    /**\r\n     * Constructs the Gameboard\r\n     */\r\n    constructor(props: object) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n\r\n        this.onMoveDone = this.onMoveDone.bind(this);\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n        this.onResetBoard = this.onResetBoard.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const outer: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n        };\r\n\r\n        const gameboardStyle: CSSProperties = {\r\n            height: \"100%\",\r\n            backgroundColor: \"brown\",\r\n            flexShrink: 0,\r\n            flexDirection: \"column\",\r\n            width: \"250px\",\r\n        };\r\n\r\n        const doneButtonStyle: CSSProperties = {\r\n            borderRadius: \"40%\",\r\n            width: \"90%\",\r\n            backgroundColor: \"gray\",\r\n            border: 5,\r\n            margin: 5,\r\n        };\r\n\r\n        const titleStyle: CSSProperties = {\r\n            fontSize: 28,\r\n            marginBottom: 10,\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        return (\r\n            <div style={outer}>\r\n                {\r\n                    this.state.gameLost ?\r\n                        <div style={titleStyle}>\r\n                            <p>You lost the game. The code was...</p>\r\n                            <PinRow pinColors={this.state.codeColors}/>\r\n                            <button onClick={this.onResetBoard}>Play again?</button>\r\n                        </div>\r\n                        :\r\n                        this.state.gameWon ?\r\n                            <div style={titleStyle}>\r\n                                <p>You won the game</p>\r\n                                <button onClick={this.onResetBoard}>Play again?</button>\r\n                            </div>\r\n                            :\r\n                            <div style={gameboardStyle}>\r\n                                {\r\n                                    this.state.gameRows.map((row, index) =>\r\n\r\n                                        <PinRow\r\n                                            key={index}\r\n                                            current={this.state.currentRow === index}\r\n                                            row={index}\r\n                                            pinColors={row.pinColors}\r\n                                            hintColors={row.hintColors}\r\n                                            onSetColor={this.onSetColor} />\r\n                                    )\r\n                                }\r\n                                <div style={outer}>\r\n                                    <button style={doneButtonStyle} onClick={this.onMoveDone}>Done!</button>\r\n                                </div>\r\n                            </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an array of empty game rows.\r\n     * @returns {GameRow[]}. Returns 12 empty game rows\r\n     */\r\n    private getGameEmptyRows(): GameRow[] {\r\n\r\n        const gameRows: GameRow[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            gameRows.push({ hintColors: [\"black\", \"black\", \"black\", \"black\"], pinColors: [\"black\", \"black\", \"black\", \"black\"] });\r\n        }\r\n\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Returns 4 randomly selected colors.\r\n     * @param {PinColors[]}. An array with 4 randomly selected colors.\r\n     */\r\n    private getCode(): PinColors[] {\r\n        const codeColors: PinColors[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const random = Math.floor(Math.random() * 6);\r\n            codeColors.push(pinColors[random]);\r\n        }\r\n\r\n        codeColors.forEach((color) => console.log(color));\r\n\r\n        return codeColors;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the player click the \"Done\" button. This moves the game to the next row.\r\n     */\r\n    private onMoveDone(): void {\r\n\r\n        if (this.state.gameWon || this.state.gameLost) {\r\n            return;\r\n        }\r\n\r\n        // Clone the current board so to work immutable.\r\n        const newBoardState = this.cloneGameRows();\r\n\r\n        // Get the curerent game row.\r\n        const currentGameRow = newBoardState[this.state.currentRow];\r\n\r\n        // This are the colors the player selected.\r\n        const guessColor = currentGameRow.pinColors;\r\n\r\n        // Create a new array with the location of the code colors and the color.\r\n        let codeColorsToCheck = this.state.codeColors.map((color, index) => {\r\n            return { index, color };\r\n        });\r\n\r\n        // We'll provide two hints as per the rules of Mastermind. The right color in the right position is will be a red hint.\r\n        // The rigth color in the wrong position will be a white pin.\r\n        let rightColorWrongPosition = 0;\r\n        let rightColorRightPosition = 0;\r\n\r\n        // First check if the player gussed colors in the right position.\r\n        for (let i = 0; i < currentGameRow.pinColors.length; i++) {\r\n            const guessedColor = guessColor[i];\r\n            const codeColor = codeColorsToCheck.filter((c) => c.index === i);\r\n\r\n            if (codeColor.length > 0) {\r\n                if (guessedColor === codeColor[0].color) {\r\n                    rightColorRightPosition++;\r\n\r\n                    // The hint is done. Remove this element so it is not given as 'Right Color Wrong Position' hint.\r\n                    codeColorsToCheck = codeColorsToCheck.filter((c) => c.index !== i);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check for any correct colors in the wrong position. Any colors that were in the right position\r\n        // have been removed from the codeColorsToCheck array.\r\n        for (let i = 0; i < currentGameRow.pinColors.length; i++) {\r\n            const guessedColor = guessColor[i];\r\n            // Not the right position, but this color might be present in the code.\r\n            const exists = codeColorsToCheck.filter((c) => c.color === guessedColor);\r\n\r\n            if (exists.length > 0) {\r\n                rightColorWrongPosition++;\r\n\r\n                // The hint is done. Remove this element from the colors to check array.\r\n                codeColorsToCheck = codeColorsToCheck.filter((c) => c.index !== exists[0].index);\r\n            }\r\n        }\r\n\r\n        if (rightColorRightPosition === 4) {\r\n            this.setState({ gameWon: true });\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentRow === 11 && rightColorRightPosition !== 4) {\r\n            this.setState({ gameLost: true });\r\n            return;\r\n        }\r\n\r\n        const hintColors: HintColors[] = [];\r\n\r\n        for (let i = 0; i < rightColorRightPosition; i++) {\r\n            hintColors.push(\"red\");\r\n        }\r\n\r\n        for (let i = 0; i < rightColorWrongPosition; i++) {\r\n            hintColors.push(\"white\");\r\n        }\r\n\r\n        const remainingSlots = 4 - (rightColorRightPosition + rightColorWrongPosition);\r\n\r\n        for (let i = 0; i < remainingSlots; i++) {\r\n            hintColors.push(\"black\");\r\n        }\r\n\r\n        // Loop ten times and swam two random elements in the hintColor array.\r\n        // This will make life harder for the player and it is permitted by the rules of Mastermind.\r\n        for (let i = 0; i < 10; i++) {\r\n            const pos1 = Math.floor(Math.random() * 4);\r\n            const pos2 = Math.floor(Math.random() * 4);\r\n\r\n            const pos1Color = hintColors[pos1];\r\n            const pos2Color = hintColors[pos2];\r\n\r\n            hintColors[pos1] = pos2Color;\r\n            hintColors[pos2] = pos1Color;\r\n        }\r\n\r\n        currentGameRow.hintColors = hintColors;\r\n\r\n        this.setState({ currentRow: this.state.currentRow + 1, gameRows: newBoardState });\r\n    }\r\n\r\n    /**\r\n     * Event handler for setting the color of a pin in a row.\r\n     * @param {number} row. The row of the pin,\r\n     * @param {number} pinNumber. Pin number in the row.\r\n     * @param {PinColors} color. The color the pin will get.\r\n     */\r\n    private onSetColor(row: number, pinNumber: number, color: PinColors): void {\r\n        const gameRows = this.cloneGameRows();\r\n        gameRows[row].pinColors[pinNumber] = color;\r\n\r\n        this.setState({ gameRows });\r\n    }\r\n\r\n    /**\r\n     * Resets the game board.\r\n     */\r\n    private onResetBoard(): void {\r\n        this.setState(this.getInitialState);\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state of the game.\r\n     */\r\n    private getInitialState(): State {\r\n        return {\r\n            currentRow: 0,\r\n            gameRows: this.getGameEmptyRows(),\r\n            codeColors: this.getCode(),\r\n            gameLost: false,\r\n            gameWon: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new array of game rows and hint colors so we don't have to update the state directly.\r\n     */\r\n    private cloneGameRows() {\r\n        const gameRows = [...this.state.gameRows];\r\n        for (let i = 0; i < gameRows.length; i++) {\r\n            gameRows[i].pinColors = [...this.state.gameRows[i].pinColors];\r\n            gameRows[i].hintColors = [...this.state.gameRows[i].hintColors];\r\n        }\r\n        return gameRows;\r\n    }\r\n}","/**\n * Main app. The game board is launched from here.\n */\n\nimport React, { CSSProperties } from \"react\";\nimport \"./App.css\";\nimport { GameBoard } from \"./Gameboard/Gameboard\";\n\nexport class Main extends React.Component {\n\n  /**\n   * Render the component.\n   */\n  public render(): React.ReactElement {\n    const titleStyle: CSSProperties = {\n      fontSize: 28,\n      marginBottom: 10,\n      textAlign: \"center\",\n    };\n\n    return (\n      <div>\n        <p style={titleStyle}>Mastermind</p>\n        <GameBoard />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Launch point.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Main } from \"./Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Render the main application on the DOM.\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}