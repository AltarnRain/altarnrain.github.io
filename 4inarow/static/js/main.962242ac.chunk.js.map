{"version":3,"sources":["Lib/WinHelper.ts","Components/Grid/Cell/Cell.tsx","Components/Grid/GridComponent.tsx","Lib/Styles.ts","Components/InputComponent/InputComponent.tsx","Components/Setup/SetupComponent.tsx","Components/App.tsx","serviceWorker.ts","index.tsx"],"names":["checkForNValuesInARow","arr","match","value","ignoreValue","rowIndex","columnIndex","verticalDirection","horizantalDirection","rowMultiplier","colMultiplier","x","y","content","i","push","get2DArrayContent","every","c","column","defaultValue","returnValue","length","Cell","props","react_default","a","createElement","style","backgroundColor","color","onClick","colIndex","GridComponent","totalRows","setup","gridX","totalColumns","gridY","player1Name","player2Name","winNumber","_useState","useState","createGrid","_useState2","Object","slicedToArray","grid","setGrid","_useState3","_useState4","won","setWon","_useState5","_useState6","currentPlayer","setCurrentPlayer","_useState7","_useState8","currentColor","setCurrentColor","newGrid","row","onCellClicked","r","g","map","toConsumableArray","playerColor","checks","trueWinNumber","some","checkWin","nextPlayer","fillCell","textAlign","borderColor","borderStyle","borderWidth","borderSpacing","width","height","marginLeft","marginRight","rowindex","key","Grid_Cell_Cell","InputComponent","text","onChange","event","name","target","SetupComponent","setPlayer1Name","setPlayer2Name","setGridX","setGridY","_useState9","_useState10","setWinNumber","Error","concat","Components_InputComponent_InputComponent","parseInt","onSetup","App","setupComplete","setSetupComplete","currentSetup","setCurrentSetup","Grid_GridComponent","Setup_SetupComponent","Boolean","window","location","hostname","ReactDOM","render","src_Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.962242ac.chunk.js","sourcesContent":["/**\r\n * Helper functions for determining if a player has one.\r\n */\r\n\r\nimport Colors from \"../Types/Colors\";\r\n\r\n/**\r\n * Check if a player has won with their last move.\r\n * @param {nunmber} rowIndex. The row index where the player clicked.\r\n * @param {number} columnIndex. The column index where the player clicked.\r\n * @param {Color} playerColor. The color of the piece the player placed.\r\n */\r\nexport function checkWin(arr: Colors[][], winNumber: number, rowIndex: number, columnIndex: number, playerColor: Colors): boolean {\r\n    const checks: boolean[] = [];\r\n\r\n    const trueWinNumber = winNumber - 1;\r\n\r\n    // Check for n in a row in all directions.\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"up\", \"none\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"down\", \"none\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"none\", \"left\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"none\", \"right\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"up\", \"left\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"up\", \"right\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"down\", \"left\"));\r\n    checks.push(checkForNValuesInARow(arr, trueWinNumber, playerColor, \"transparent\", rowIndex, columnIndex, \"down\", \"right\"));\r\n\r\n    return checks.some((c) => c === true);\r\n}\r\n\r\n/**\r\n * Checks if there's N colors of 'color' horizantally, vertically or diagonaly.\r\n * @param {Colors} color. The color to check.\r\n * @param {number} rowIndex. The row index used to check up and down.\r\n * @param {number} columnIndex. The column index used to check left and right.\r\n * @param {up | down | none} verticalDirection. The vertical direction to check.\r\n * @param {left | right | none } horizantalDirection. The horizantal direction to check.\r\n */\r\nexport function checkForNValuesInARow<T>(\r\n    arr: T[][],\r\n    match: number,\r\n    value: T,\r\n    ignoreValue: T,\r\n    rowIndex: number,\r\n    columnIndex: number,\r\n    verticalDirection: \"up\" | \"down\" | \"none\",\r\n    horizantalDirection: \"left\" | \"right\" | \"none\"): boolean {\r\n\r\n    let rowMultiplier = 0;\r\n    let colMultiplier = 0;\r\n\r\n    if (verticalDirection === \"up\") {\r\n        rowMultiplier = -1;\r\n    } else if (verticalDirection === \"down\") {\r\n        rowMultiplier = 1;\r\n    }\r\n\r\n    if (horizantalDirection === \"left\") {\r\n        colMultiplier = -1;\r\n    } else if (horizantalDirection === \"right\") {\r\n        colMultiplier = 1;\r\n    }\r\n\r\n    let x = 1;\r\n    let y = 1;\r\n\r\n    const content: T[] = [];\r\n    for (let i = 0; i < match; i++) {\r\n        content.push(get2DArrayContent(arr, rowIndex + x++ * rowMultiplier, columnIndex + y++ * colMultiplier, ignoreValue));\r\n    }\r\n\r\n    return content.every((c) => c === value);\r\n}\r\n\r\n/**\r\n * Attempts to read the content from a 2d array. If the location exists it returns the value, otherwise it returns the default value.\r\n * @param {number} rowIndex. The row index used to retieve a value.\r\n * @param {number} column. The column index used to retrieve a values.\r\n */\r\nfunction get2DArrayContent<T>(arr: T[][], rowIndex: number, column: number, defaultValue: T): T {\r\n    let returnValue: T = defaultValue;\r\n\r\n    if (arr.length > rowIndex && rowIndex > -1 && arr[rowIndex].length > column) {\r\n        returnValue = arr[rowIndex][column];\r\n    }\r\n\r\n    return returnValue;\r\n}","/**\r\n * A component for a single cell in the game board.\r\n */\r\nimport React from \"react\";\r\nimport Properties from \"./Properties\";\r\n\r\nconst Cell: React.FC<Properties> = (props) => {\r\n\r\n    /**\r\n     * Handles a click in the cell.\r\n     */\r\n    function onClick() {\r\n        if (props.onClick) {\r\n            props.onClick(props.colIndex);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <td style={{ backgroundColor: props.color }} onClick={onClick}></td>\r\n    );\r\n};\r\n\r\nexport default Cell;","/**\r\n * This component draws the game board and handles user interaction.\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\nimport { gridStyle } from \"../../Lib/Styles\";\r\nimport { checkWin } from \"../../Lib/WinHelper\";\r\nimport Colors from \"../../Types/Colors\";\r\nimport Cell from \"./Cell/Cell\";\r\nimport Properties from \"./Properties\";\r\n\r\nconst GridComponent: React.FC<Properties> = (props) => {\r\n\r\n    const totalRows = typeof (props.setup) !== \"undefined\" ? props.setup.gridX : 7;\r\n    const totalColumns = typeof (props.setup) !== \"undefined\" ? props.setup.gridY : 6;\r\n    const player1Name = typeof (props.setup) !== \"undefined\" ? props.setup.player1Name : \"player 1\";\r\n    const player2Name = typeof (props.setup) !== \"undefined\" ? props.setup.player2Name : \"player 2\";\r\n    const winNumber = typeof (props.setup) !== \"undefined\" ? props.setup.winNumber : 4;\r\n\r\n    const [grid, setGrid] = useState(createGrid());\r\n    const [won, setWon] = useState(false);\r\n    const [currentPlayer, setCurrentPlayer] = useState<string>(player1Name);\r\n    const [currentColor, setCurrentColor] = useState<Colors>(\"red\");\r\n\r\n    /**\r\n     * Creates an empty grid\r\n     * @returns {Colors[][]}. 2d array with color transparent.\r\n     */\r\n    function createGrid(): Colors[][] {\r\n\r\n        const newGrid: Colors[][] = [];\r\n        for (let rowIndex = 0; rowIndex < totalRows; rowIndex++) {\r\n            if (typeof (newGrid[rowIndex]) === \"undefined\") {\r\n                newGrid[rowIndex] = [];\r\n            }\r\n            const row = newGrid[rowIndex];\r\n            for (let columnIndex = 0; columnIndex < totalColumns; columnIndex++) {\r\n                row.push(\"white\");\r\n            }\r\n        }\r\n\r\n        return newGrid;\r\n    }\r\n\r\n    /**\r\n     * Triggered when a cell is clicked.\r\n     * @param {number} rowIndex. The row index.\r\n     * @param {number} columnIndex. The column index.\r\n     */\r\n    function onCellClicked(columnIndex: number): void {\r\n        fillCell(columnIndex);\r\n    }\r\n\r\n    function fillCell(columnIndex: number): void {\r\n        // Game is one, do not fill a cell.\r\n        if (won === true) {\r\n            return;\r\n        }\r\n\r\n        // Find the first available transparent cell for this column\r\n        let rowIndex = -1;\r\n        for (let r = totalRows - 1; r > -1; r--) {\r\n            if (grid[r][columnIndex] === \"white\") {\r\n                rowIndex = r;\r\n                break;\r\n            }\r\n        }\r\n\r\n        // A cell was found, let's fill in its color.\r\n        if (rowIndex !== -1) {\r\n            const g = grid.map((row) => [...row]);\r\n            g[rowIndex][columnIndex] = currentColor as Colors;\r\n            setGrid(g);\r\n\r\n            if (checkWin(grid, winNumber, rowIndex, columnIndex, currentColor as Colors)) {\r\n                setWon(true);\r\n                return;\r\n            }\r\n\r\n            // No one won, next player's turn.\r\n            nextPlayer();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the next player. This function also sets the color since player and color are linked.\r\n     */\r\n    function nextPlayer() {\r\n        if (currentPlayer === player1Name) {\r\n            setCurrentColor(\"yellow\");\r\n            setCurrentPlayer(player2Name);\r\n        } else {\r\n            setCurrentColor(\"red\");\r\n            setCurrentPlayer(player1Name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Restarts the game.\r\n     */\r\n    function reset(): void {\r\n        setWon(false);\r\n        setGrid(createGrid());\r\n\r\n        // The losing player gets to go first.\r\n        nextPlayer();\r\n    }\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\" }} >\r\n            {won ?\r\n                <div>\r\n                    <h1>{currentPlayer} has won the game</h1>\r\n                    <button onClick={reset}>Play again?</button>\r\n                </div>\r\n                : <div>\r\n                    <h2>Current player: {currentPlayer}</h2>\r\n                    <span style={{ backgroundColor: currentColor }}><b>Current color</b></span>\r\n                </div>\r\n            }\r\n            <br />\r\n            <table style={gridStyle()}>\r\n                <tbody>\r\n                    {grid.map((row, rowindex) => {\r\n                        return (\r\n                            <tr key={rowindex}>\r\n                                {row.map((color, columnIndex) => {\r\n                                    return (\r\n                                        <Cell key={columnIndex} color={color} colIndex={columnIndex} onClick={onCellClicked} />\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div >\r\n    );\r\n};\r\n\r\nexport default GridComponent;\r\n","import { CSSProperties } from \"react\";\r\n\r\nexport const gridStyle = (): CSSProperties => {\r\n    return {\r\n        borderColor: \"blue\",\r\n        borderStyle: \"solid\",\r\n        borderWidth: \"2px\",\r\n        borderSpacing: \"5px\",\r\n        backgroundColor: \"blue\",\r\n        width: \"1000px\",\r\n        height: \"900px\",\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n    };\r\n};","/**\r\n * Generic input component.\r\n */\r\n\r\nimport React from \"react\";\r\nimport Properties from \"./Properties\";\r\n\r\nconst InputComponent: React.FC<Properties> = (props) => {\r\n    return (\r\n        <div>\r\n            <span>{props.text}</span>\r\n            <input value={props.value} onChange={onChange} />\r\n        </div>\r\n    );\r\n\r\n    function onChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (props.onChange) {\r\n            props.onChange(props.name, event.target.value);\r\n        }\r\n    }\r\n};\r\n\r\nexport default InputComponent;","import React, { useState } from \"react\";\r\nimport SetupModel from \"../../Models/Setup\";\r\nimport InputComponent from \"../InputComponent/InputComponent\";\r\nimport Properties from \"./Properties\";\r\n\r\nconst SetupComponent: React.FC<Properties> = (props) => {\r\n\r\n    const [player1Name, setPlayer1Name] = useState(\"Player 1\");\r\n    const [player2Name, setPlayer2Name] = useState(\"Player 2\");\r\n    const [gridX, setGridX] = useState(\"6\");\r\n    const [gridY, setGridY] = useState(\"7\");\r\n    const [winNumber, setWinNumber] = useState(\"4\");\r\n\r\n    /**\r\n     * Passes the entered name back.\r\n     */\r\n    function onDoneClick() {\r\n\r\n        const setup: SetupModel = getSetupModel();\r\n        props.onSetup(setup);\r\n    }\r\n\r\n    function onChange(name: string, value: string) {\r\n        switch (name) {\r\n            case \"player1Name\":\r\n                setPlayer1Name(value);\r\n                break;\r\n            case \"player2Name\":\r\n                setPlayer2Name(value);\r\n                break;\r\n            case \"gridX\":\r\n                setGridX(value);\r\n                break;\r\n            case \"gridY\":\r\n                setGridY(value);\r\n                break;\r\n            case \"winNumber\":\r\n                setWinNumber(value);\r\n                break;\r\n            default:\r\n                throw new Error(`${name} is not supported.`);\r\n        }\r\n    }\r\n\r\n    function getSetupModel(): SetupModel {\r\n        return {\r\n            player1Name,\r\n            player2Name,\r\n            gridX: parseInt(gridX, 10),\r\n            gridY: parseInt(gridY, 10),\r\n            winNumber: parseInt(winNumber, 10),\r\n        };\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to {winNumber} in a row</h1>\r\n            <p>Feel free to setup the game to you liking. Click \"Done\" when you're done.</p>\r\n            <InputComponent value={player1Name} name=\"player1Name\" text=\"Enter player 1's name: \" onChange={onChange} />\r\n            <InputComponent value={player2Name} name=\"player2Name\" text=\"Enter player 2's name: \" onChange={onChange} />\r\n            <InputComponent value={gridX} name=\"gridX\" text=\"Number of rows: \" onChange={onChange} />\r\n            <InputComponent value={gridY} name=\"gridY\" text=\"Number of columns: \" onChange={onChange} />\r\n            <InputComponent value={winNumber} name=\"winNumber\" text=\"Win number: \" onChange={onChange} />\r\n            <button onClick={onDoneClick}>Done</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SetupComponent;","/**\n * Main app for N in a row.\n */\n\nimport React, { useState } from \"react\";\nimport SetupModel from \"../Models/Setup\";\nimport \"./App.css\";\nimport GridComponent from \"./Grid/GridComponent\";\nimport SetupComponent from \"./Setup/SetupComponent\";\n\nconst App: React.FC = () => {\n\n    const [setupComplete, setSetupComplete] = useState(false);\n    const [currentSetup, setCurrentSetup] = useState<SetupModel>();\n\n    /**\n     * Sets the current setup and begins the game.\n     * @param {string} name1. First name.\n     * @param {string} name2. Second name.\n     */\n    function onSetupDone(setup: SetupModel) {\n        setCurrentSetup(setup);\n        setSetupComplete(true);\n    }\n\n    return (\n        <div>\n            {setupComplete\n                ?\n                <GridComponent setup={currentSetup} />\n                :\n                <SetupComponent onSetup={onSetupDone} />\n            }\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}