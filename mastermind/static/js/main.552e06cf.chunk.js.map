{"version":3,"sources":["Types/PinColors.ts","ColorPicker/ColorPicker.tsx","Modal/Modal.tsx","ColorPin/ColorPin.tsx","HelperFunctions.ts","Menu/Menu.tsx","PinRow/PinRow.tsx","Gameboard/Gameboard.tsx","Main/Main.tsx","index.tsx"],"names":["pinColors","ColorPicker","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","_this2","react_default","a","createElement","style","display","flexDirection","backgroundColor","height","justifyContent","map","color","index","id","width","e","target","onPickColor","React","Component","Modal","portalAnchor","modalRoot","document","getElementById","appendChild","addEventListener","removeChild","removeEventListener","left","top","element","current","rectangle","getBoundingClientRect","bottom","widthMultiplier","heightMultiplier","position","workAreaRef","workAreaRectangle","modelStyle","boxSizing","ReactDOM","createPortal","children","onUserClickedOutside","ColorPin","buttonRef","createRef","state","showColorPicker","onCloseColorPicker","colorPinStyle","borderRadius","flexGrow","Fragment","ref","Modal_Modal","gameDivRef","ColorPicker_ColorPicker","setState","enabled","onSetColor","pinNumber","randomizeArray","hintColorArray","newArray","toConsumableArray","i","pos1","Math","floor","random","pos2","pos1Color","pos2Color","Menu","onClose","onEndGame","buttonStyle","margin","PinRow","undefined","hintSquareBaseStyle","marginTop","marginRight","ColorPin_ColorPin","hintColors","objectSpread","pinNunber","row","GameBoard","getInitialState","onMoveDone","onResetBoard","onShowMenu","onHideMenu","outer","gameEndTextStype","fontSize","marginBottom","textAlign","playAgainButtonStyle","fontWeight","codeStyle","showMenu","Menu_Menu","flexShrink","gameRows","PinRow_PinRow","currentRow","gameLost","codeColors","gameWon","allColorsSet","border","alignItems","push","newBoardState","cloneGameRows","currentGameRow","hints","guessedColors","indexedGuessedColors","processed","indexedCodeColors","returnValue","rightColorWrongPosition","rightColorRightPosition","_loop","guessedColor","codeColor","find","c","length","foundCodeColor","HintProvider","rightColorRightPositionColors","rightColorWrongPositionColors","remainingSlots","concat","getGameEmptyRows","getCode","filter","Main","apply","arguments","Gameboard_GameBoard","render","Main_Main"],"mappings":"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","file":"static/js/main.552e06cf.chunk.js","sourcesContent":["\r\n/**\r\n * The colors used in the game. Note that \"black\" means empty. The original version of the game used 6 color pins.\r\n */\r\nexport type PinColors = \"orange\" | \"yellow\" | \"blue\" | \"green\" | \"cyan\" | \"purple\" | \"black\";\r\n\r\n/**\r\n * An array of all colors supported by the game.\r\n */\r\nexport const pinColors: PinColors[] = [\"orange\", \"yellow\", \"blue\", \"green\", \"cyan\", \"purple\"];","/**\r\n * This component is a pop-up that allows the player to select a color for a clicked pin.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class ColorPicker extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const selectColorStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            backgroundColor: \"white\",\r\n            height: \"100%\",\r\n            justifyContent: \"space-evenly\"\r\n        };\r\n\r\n        return (\r\n            <div style={selectColorStyle} >\r\n                {\r\n                    // Set the DIV's ID to Modal to the Modal component knows it should not stop this div's click event.\r\n                    pinColors.map((color, index) => <div id={\"modal\"} key={index} onClick={this.onClick} style={{ height: \"100%\", width: \"100%\", backgroundColor: color }} ></div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles the click on a colored div element\r\n     * @param {React.SyntheticEvent<HTMLDivElement>} e. The event object\r\n     */\r\n    private onClick(e: React.SyntheticEvent<HTMLDivElement>) {\r\n        const target = e.target as HTMLDivElement;\r\n\r\n        if (this.props.onPickColor) {\r\n            // Completely save cast. The color picker's div elements are set using PinColors\r\n            this.props.onPickColor(target.style.backgroundColor as PinColors);\r\n        }\r\n    }\r\n}","/**\r\n * Generic Modal component.\r\n */\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class Modal extends React.Component<Properties> {\r\n\r\n    /**\r\n     * portal anchor.\r\n     */\r\n    private portalAnchor: HTMLDivElement;\r\n\r\n    /**\r\n     * Root node for the modal.\r\n     */\r\n    private modalRoot: HTMLElement | null;\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.portalAnchor = document.createElement(\"div\");\r\n        this.modalRoot = document.getElementById(\"portalRoot\");\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.appendChild(this.portalAnchor);\r\n        }\r\n\r\n        document.addEventListener(\"mousedown\", this.onClick);\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.removeChild(this.portalAnchor);\r\n        }\r\n\r\n        document.removeEventListener(\"mousedown\", this.onClick);\r\n    }\r\n\r\n    public render() {\r\n\r\n        let left = 0;\r\n        let top = 0;\r\n        let width = 0;\r\n        let height = 0;\r\n\r\n        if (this.props.element.current) {\r\n            const rectangle = this.props.element.current.getBoundingClientRect();\r\n            left = rectangle.left;\r\n            top = rectangle.bottom;\r\n            width = rectangle.width;\r\n            height = rectangle.height;\r\n\r\n            if (typeof this.props.widthMultiplier !== \"undefined\") {\r\n                width = width * this.props.widthMultiplier;\r\n            }\r\n\r\n            if (typeof this.props.heightMultiplier !== \"undefined\") {\r\n                height = height * this.props.heightMultiplier;\r\n            }\r\n\r\n            if (typeof this.props.position) {\r\n                if (this.props.position === \"center\") {\r\n                    const centerPosition = left + rectangle.width / 2;\r\n                    left = (centerPosition - width / 2);\r\n                }\r\n            }\r\n\r\n            if (this.props.workAreaRef && this.props.workAreaRef.current) {\r\n                const workAreaRectangle = this.props.workAreaRef.current.getBoundingClientRect();\r\n                if (left < workAreaRectangle.left) {\r\n                    left = workAreaRectangle.left;\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        const modelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            left,\r\n            top,\r\n            height,\r\n            width,\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n        };\r\n\r\n        return ReactDOM.createPortal(\r\n            <div style={modelStyle}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>,\r\n            this.portalAnchor,\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Event that is fired whenever the user clicks the mouse.\r\n     * @param {MouseEvent} e. The event object from the mouse click\r\n     */\r\n    private onClick(e: MouseEvent): void {\r\n        if (this.modalRoot && this.props.onUserClickedOutside) {\r\n\r\n            const target = e.target as Element;\r\n\r\n            // If the target's ID is 'modal' then this element is part of the pop-up and the 'onUserClickedOutside' should not be fired.\r\n            if (target && target.id !== \"modal\") {\r\n                this.props.onUserClickedOutside();\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * This component represents a single pin in the game board.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPicker } from \"../ColorPicker/ColorPicker\";\r\nimport { Modal } from \"../Modal/Modal\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\nimport { State } from \"./State\";\r\n\r\nexport class ColorPin extends React.Component<Properties, State> {\r\n\r\n    private buttonRef = React.createRef<HTMLButtonElement>();\r\n\r\n    /**\r\n     * Constructs the component.\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.state = { showColorPicker: false };\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n        this.onCloseColorPicker = this.onCloseColorPicker.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            borderRadius: \"50%\",\r\n            color: this.props.color,\r\n            backgroundColor: this.props.color,\r\n            flexGrow: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <button ref={this.buttonRef} onClick={this.onClick} style={colorPinStyle}></button>\r\n                {\r\n                    this.state.showColorPicker ?\r\n                        <Modal position=\"center\" element={this.buttonRef} widthMultiplier={4.5} heightMultiplier={0.7} onUserClickedOutside={this.onCloseColorPicker} workAreaRef={this.props.gameDivRef} >\r\n                            <ColorPicker onPickColor={this.onPickColor} />\r\n                        </Modal>\r\n                        : null\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    private onCloseColorPicker(): void {\r\n        this.setState({ showColorPicker: false });\r\n    }\r\n\r\n    /**\r\n     * Handlers the click on a pin.\r\n     */\r\n    private onClick(): void {\r\n        if (this.props.enabled) {\r\n            this.setState({ showColorPicker: true });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to select a color for a pin.\r\n     * @param {PinColors} color. Preset colors.\r\n     */\r\n    private onPickColor(color: PinColors): void {\r\n        this.setState({ showColorPicker: false });\r\n        if (this.props.onSetColor) {\r\n            this.props.onSetColor(this.props.pinNumber, color);\r\n        }\r\n    }\r\n}","/**\r\n * Contains helper functions.\r\n */\r\n\r\nimport { HintColors } from \"./Types/HintColors\";\r\nimport { Hints } from \"./Types/Hints\";\r\nimport { PinColors } from \"./Types/PinColors\";\r\n\r\n/**\r\n * Provides a Hints model\r\n * @param {PinColor[]} guessedColors. The colors the player guessed.\r\n * @param {PinColor[]} codeColors. The colors of the AI generated code.\r\n */\r\nexport function HintProvider(guessedColors: PinColors[], codeColors: PinColors[]): Hints {\r\n\r\n    const indexedGuessedColors = guessedColors.map((color, index) => ({ index, color, processed: false }));\r\n    const indexedCodeColors = codeColors.map((color, index) => ({ index, color, processed: false }));\r\n\r\n    const returnValue: Hints = { rightColorWrongPosition: 0, rightColorRightPosition: 0 };\r\n\r\n    // First check if the player gussed colors in the right position.\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n        const guessedColor = indexedGuessedColors[i];\r\n        const codeColor = indexedCodeColors.find((c) => c.index === i);\r\n\r\n        if (codeColor && codeColor.processed === false) {\r\n            if (guessedColor.color === codeColor.color) {\r\n                returnValue.rightColorRightPosition++;\r\n\r\n                // The hint is done. Remove this element so it is not given as 'Right Color Wrong Position' hint.\r\n                codeColor.processed = true;\r\n                guessedColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check for any correct colors in the wrong position. Any colors that were in the right position\r\n    // have been removed from the codeColorsToCheck array.\r\n\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n\r\n        if (indexedGuessedColors[i].processed === false) {\r\n\r\n            const guessedColor = indexedGuessedColors[i].color;\r\n            // Not the right position, but this color might be present in the code.\r\n            const foundCodeColor = indexedCodeColors.find((c) => c.color === guessedColor && c.processed === false);\r\n\r\n            if (foundCodeColor && foundCodeColor.processed === false) {\r\n                returnValue.rightColorWrongPosition++;\r\n\r\n                // The hint is done. Remove this element from the colors to check array.\r\n                foundCodeColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return returnValue;\r\n}\r\n\r\nexport function randomizeArray(hintColorArray: HintColors[]): HintColors[] {\r\n\r\n    const newArray = [...hintColorArray];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        const pos1 = Math.floor(Math.random() * 4);\r\n        const pos2 = Math.floor(Math.random() * 4);\r\n        const pos1Color = newArray[pos1];\r\n        const pos2Color = newArray[pos2];\r\n\r\n        if (typeof (pos1Color) !== \"undefined\" && typeof (pos2Color) !== \"undefined\") {\r\n            newArray[pos1] = pos2Color;\r\n            newArray[pos2] = pos1Color;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}","/**\r\n * Side panel component\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { Properties} from \"./Properties\";\r\n\r\nexport class Menu extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClose = this.onClose.bind(this);\r\n        this.onEndGame = this.onEndGame.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        const buttonStyle: CSSProperties = {\r\n            margin: \"5%\"\r\n        }\r\n\r\n        return (\r\n            <div style={{display: \"flex\", flexDirection: \"column\"}}>\r\n                <p>Menu</p>\r\n                <button style={buttonStyle} onClick={this.onEndGame}>Give up</button>\r\n                <button style={buttonStyle} onClick={this.onClose}>Close</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Close the menu\r\n     */\r\n    private onClose(): void {\r\n        if (this.props.onClose) {\r\n            this.props.onClose();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ends the game.\r\n     */\r\n    private onEndGame(): void {\r\n        if (this.props.onEndGame) {\r\n            this.props.onEndGame();\r\n        }\r\n    }\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class PinRow extends React.Component<Properties> {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n\r\n    }\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            backgroundColor: typeof (this.props.current) !== \"undefined\" ? this.props.current ? \"blue\" : \"brown\" : undefined,\r\n            height: \"8%\",\r\n        };\r\n\r\n        const hintBoxStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n            height: \"100%\",\r\n            flexGrow: 1,\r\n        };\r\n\r\n        const hintSquareBaseStyle: CSSProperties = {\r\n            width: \"80%\",\r\n            height: \"65%\",\r\n            marginTop: \"6%\",\r\n            marginRight: \"2%\"\r\n        };\r\n\r\n        return (\r\n            <div style={colorPinStyle}>\r\n                {\r\n                    this.props.pinColors.map((color, index) => (\r\n                        <div key={index} style={{ display: \"flex\", width: \"14%\", height: \"88%\", marginTop: \"1%\" }}>\r\n                            <ColorPin enabled={this.props.current} pinNumber={index} color={color} gameDivRef={this.props.gameDivRef} onSetColor={this.onSetColor} />\r\n                        </div>\r\n                    ))\r\n                }\r\n                <div style={hintBoxStyle}>\r\n                    {\r\n                        typeof (this.props.hintColors) !== \"undefined\" ?\r\n                            this.props.hintColors.map((color, index) => <div key={index} style={{ ...hintSquareBaseStyle, backgroundColor: color }} />)\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onSetColor(pinNunber: number, color: PinColors): void {\r\n        if (this.props.onSetColor && typeof this.props.row !== \"undefined\") {\r\n            this.props.onSetColor(this.props.row, pinNunber, color);\r\n        }\r\n    }\r\n}","/**\r\n * Gameboard component. This is where the action happens.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { HintProvider, randomizeArray } from \"../HelperFunctions\";\r\nimport { Menu } from \"../Menu/Menu\";\r\nimport { PinRow } from \"../PinRow/PinRow\";\r\nimport { HintColors } from \"../Types/HintColors\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { GameRow } from \"./GameRow\";\r\nimport { State } from \"./State\";\r\n\r\nexport class GameBoard extends React.Component<{}, State> {\r\n\r\n    private gameDivRef = React.createRef<HTMLDivElement>();\r\n\r\n    /**\r\n     * Constructs the Gameboard\r\n     */\r\n    constructor(props: object) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n\r\n        this.onMoveDone = this.onMoveDone.bind(this);\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n        this.onResetBoard = this.onResetBoard.bind(this);\r\n        this.onShowMenu = this.onShowMenu.bind(this);\r\n        this.onHideMenu = this.onHideMenu.bind(this);\r\n        this.onEndGame = this.onEndGame.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const outer: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            height: \"90%\",\r\n            width: \"100%\",\r\n        };\r\n\r\n        const gameboardStyle: CSSProperties = {\r\n            backgroundColor: \"brown\",\r\n            flexShrink: 0,\r\n            flexDirection: \"column\",\r\n            width: \"50vh\"\r\n        };\r\n\r\n        const doneButtonStyle: CSSProperties = {\r\n            display: \"flex-inline\",\r\n            borderRadius: \"40%\",\r\n            width: \"50%\",\r\n            height: \"3%\",\r\n            backgroundColor: \"gray\",\r\n            border: \"1%\",\r\n            margin: \"1%\",\r\n            fontWeight: \"bold\",\r\n            alignItems: \"center\"\r\n        };\r\n\r\n        const gameEndTextStype: CSSProperties = {\r\n            display: \"flex\",\r\n            fontSize: 28,\r\n            marginBottom: 10,\r\n            marginTop: 50,\r\n            textAlign: \"center\",\r\n            height: \"100%\",\r\n            flexDirection: \"column\"\r\n        };\r\n\r\n        const playAgainButtonStyle: CSSProperties = {\r\n            margin: \"5%\",\r\n            height: \"8%\",\r\n            fontSize: \"24px\",\r\n            fontWeight: \"bold\",\r\n            borderRadius: \"50%\",\r\n        };\r\n\r\n        const codeStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            width: \"50vh\",\r\n            height: \"12%\"\r\n        };\r\n\r\n        return (\r\n            <div style={outer}>\r\n                {\r\n                    <>\r\n                        {\r\n                            this.state.showMenu ? <Menu\r\n                                onClose={this.onHideMenu}\r\n                                onEndGame={this.onEndGame}\r\n                            /> :\r\n                                <div ref={this.gameDivRef} style={gameboardStyle}>\r\n                                    <button style={{ position: \"absolute\", left: 0, top: 0 }} onClick={this.onShowMenu}>Menu</button>\r\n                                    {\r\n                                        this.state.gameRows.map((row, index) =>\r\n\r\n                                            <PinRow\r\n                                                key={index}\r\n                                                current={this.state.currentRow === index}\r\n                                                row={index}\r\n                                                pinColors={row.pinColors}\r\n                                                hintColors={row.hintColors}\r\n                                                onSetColor={this.onSetColor}\r\n                                                gameDivRef={this.gameDivRef}\r\n                                            />\r\n                                        )}\r\n                                    {\r\n                                        this.state.gameLost ?\r\n                                            <div style={gameEndTextStype}>\r\n                                                <p>You lost the game. The code was...</p><br />\r\n                                                <div style={codeStyle}>\r\n                                                    <ColorPin enabled={false} pinNumber={0} color={this.state.codeColors[0]} />\r\n                                                    <ColorPin enabled={false} pinNumber={1} color={this.state.codeColors[1]} />\r\n                                                    <ColorPin enabled={false} pinNumber={2} color={this.state.codeColors[2]} />\r\n                                                    <ColorPin enabled={false} pinNumber={3} color={this.state.codeColors[3]} />\r\n                                                </div>\r\n                                                <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                                            </div>\r\n                                            : this.state.gameWon ?\r\n                                                <div style={gameEndTextStype}>\r\n                                                    <p>You found the code!</p>\r\n                                                    <div style={codeStyle}>\r\n                                                        <ColorPin enabled={false} pinNumber={0} color={this.state.codeColors[0]} />\r\n                                                        <ColorPin enabled={false} pinNumber={1} color={this.state.codeColors[1]} />\r\n                                                        <ColorPin enabled={false} pinNumber={2} color={this.state.codeColors[2]} />\r\n                                                        <ColorPin enabled={false} pinNumber={3} color={this.state.codeColors[3]} />\r\n                                                    </div>\r\n                                                    <p>Congratulations!</p>\r\n                                                    <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                                                </div>\r\n                                                : null\r\n                                    }\r\n                                    <div style={outer}>\r\n                                        {this.allColorsSet() ?\r\n                                            <button style={doneButtonStyle} onClick={this.onMoveDone}>Done!</button>\r\n                                            : null\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                        }\r\n                    </>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an array of empty game rows.\r\n     * @returns {GameRow[]}. Returns 12 empty game rows\r\n     */\r\n    private getGameEmptyRows(): GameRow[] {\r\n\r\n        const gameRows: GameRow[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            gameRows.push({ hintColors: [\"black\", \"black\", \"black\", \"black\"], pinColors: [\"black\", \"black\", \"black\", \"black\"] });\r\n        }\r\n\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Returns 4 randomly selected colors.\r\n     * @param {PinColors[]}. An array with 4 randomly selected colors.\r\n     */\r\n    private getCode(): PinColors[] {\r\n        const codeColors: PinColors[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const random = Math.floor(Math.random() * 6);\r\n            codeColors.push(pinColors[random]);\r\n        }\r\n\r\n        return codeColors;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the player click the \"Done\" button. This moves the game to the next row.\r\n     */\r\n    private onMoveDone(): void {\r\n\r\n        if (this.state.gameWon || this.state.gameLost) {\r\n            return;\r\n        }\r\n\r\n        // Clone the current board so to work immutable.\r\n        const newBoardState = this.cloneGameRows();\r\n\r\n        // Get the curerent game row.\r\n        const currentGameRow = newBoardState[this.state.currentRow];\r\n\r\n        // We'll provide two hints as per the rules of Mastermind. The right color in the right position is will be a red hint.\r\n        // The rigth color in the wrong position will be a white pin.\r\n\r\n        const hints = HintProvider(currentGameRow.pinColors, this.state.codeColors);\r\n\r\n        if (hints.rightColorRightPosition === 4) {\r\n            this.setState({ gameWon: true });\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentRow === 11 && hints.rightColorRightPosition !== 4) {\r\n            this.setState({ gameLost: true });\r\n            return;\r\n        }\r\n\r\n        const rightColorRightPositionColors: HintColors[] = [];\r\n        const rightColorWrongPositionColors: HintColors[] = [];\r\n\r\n        for (let i = 0; i < hints.rightColorRightPosition; i++) {\r\n            rightColorRightPositionColors.push(\"red\");\r\n        }\r\n\r\n        for (let i = 0; i < hints.rightColorWrongPosition; i++) {\r\n            rightColorWrongPositionColors.push(\"white\");\r\n        }\r\n\r\n        const remainingSlots = 4 - (hints.rightColorRightPosition + hints.rightColorWrongPosition);\r\n\r\n        const hintColors = [...randomizeArray(rightColorRightPositionColors), ...randomizeArray(rightColorWrongPositionColors)];\r\n\r\n        for (let i = 0; i < remainingSlots; i++) {\r\n            hintColors.push(\"black\");\r\n        }\r\n\r\n        currentGameRow.hintColors = hintColors;\r\n\r\n        this.setState({ currentRow: this.state.currentRow + 1, gameRows: newBoardState });\r\n    }\r\n\r\n    /**\r\n     * Event handler for setting the color of a pin in a row.\r\n     * @param {number} row. The row of the pin,\r\n     * @param {number} pinNumber. Pin number in the row.\r\n     * @param {PinColors} color. The color the pin will get.\r\n     */\r\n    private onSetColor(row: number, pinNumber: number, color: PinColors): void {\r\n        const gameRows = this.cloneGameRows();\r\n        gameRows[row].pinColors[pinNumber] = color;\r\n\r\n        this.setState({ gameRows });\r\n    }\r\n\r\n    /**\r\n     * Resets the game board.\r\n     */\r\n    private onResetBoard(): void {\r\n        this.setState(this.getInitialState);\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state of the game.\r\n     */\r\n    private getInitialState(): State {\r\n        return {\r\n            currentRow: 0,\r\n            gameRows: this.getGameEmptyRows(),\r\n            codeColors: this.getCode(),\r\n            gameLost: false,\r\n            gameWon: false,\r\n            showMenu: false\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new array of game rows and hint colors so we don't have to update the state directly.\r\n     * @returns {GameRow[]}\r\n     */\r\n    private cloneGameRows(): GameRow[] {\r\n        const gameRows = [...this.state.gameRows];\r\n        for (let i = 0; i < gameRows.length; i++) {\r\n            gameRows[i].pinColors = [...this.state.gameRows[i].pinColors];\r\n            gameRows[i].hintColors = [...this.state.gameRows[i].hintColors];\r\n        }\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Check if all colors are set.\r\n     * @returns {boolean}. True when all colors of the current row are not black.\r\n     */\r\n    private allColorsSet(): boolean {\r\n        return this.state.gameRows[this.state.currentRow].pinColors.filter((color) => color === \"black\").length === 0;\r\n    }\r\n\r\n    /**\r\n     * Hides the menu\r\n     */\r\n    private onHideMenu(): void {\r\n        this.setState({ showMenu: false });\r\n    }\r\n\r\n    private onShowMenu(): void {\r\n        this.setState({ showMenu: true });\r\n    }\r\n\r\n    /**\r\n     * End Game\r\n     */\r\n    private onEndGame(): void {\r\n        this.setState({ gameLost: true, showMenu: false });\r\n    }\r\n}","/**\n * Main app. The game board is launched from here.\n */\n\nimport React, { CSSProperties } from \"react\";\nimport { GameBoard } from \"../Gameboard/Gameboard\";\n\nexport class Main extends React.Component {\n\n    /**\n     * Render the component.\n     */\n    public render(): React.ReactElement {\n        const titleStyle: CSSProperties = {\n            fontSize: 28,\n            marginBottom: 10,\n            textAlign: \"center\",\n        };\n\n        return (\n            <div style={{ height: \"100vh\", textAlign: \"center\" }} >\n                <p style={titleStyle}>Mastermind</p>\n                <GameBoard />\n            </div>\n        );\n    }\n}\n","/**\n * Launch point.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { Main } from \"./Main/Main\";\n\n// Render the main application on the DOM.\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}