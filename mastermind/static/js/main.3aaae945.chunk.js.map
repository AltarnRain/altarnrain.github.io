{"version":3,"sources":["ColorPin/ColorPin.tsx","HelperFunctions.ts","Model/Model.tsx","Types/PinColors.ts","SelectColor/SelectColor.tsx","PinRow/PinRow.tsx","Gameboard/Gameboard.tsx","Main/Main.tsx","index.tsx"],"names":["ColorPin","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","colorPinStyle","display","borderRadius","color","backgroundColor","flexGrow","width","height","react_default","a","createElement","style","onPinClick","pinNumber","onPickColor","React","Component","randomizeArray","hintColorArray","newArray","toConsumableArray","i","pos1","Math","floor","random","pos2","pos1Color","pos2Color","Modal","el","modalRoot","document","getElementById","appendChild","removeChild","left","top","element","current","rectangle","getBoundingClientRect","bottom","modelStyle","position","flexDirection","boxSizing","ReactDOM","createPortal","children","pinColors","SelectColor","_this2","justifyContent","map","index","e","target","PinRow","rowRef","createRef","state","showPinPicker","undefined","hintSquareBaseStyle","marginTop","marginRight","ref","ColorPin_ColorPin","Model_Modal","SelectColor_SelectColor","hintColors","objectSpread","onSetColor","setState","currentPinNumber","row","GameBoard","getInitialState","onMoveDone","onResetBoard","outer","gameEndTextStype","fontSize","marginBottom","textAlign","playAgainButtonStyle","margin","fontWeight","codeStyle","flexShrink","gameRows","PinRow_PinRow","currentRow","gameLost","codeColors","gameWon","allColorsSet","border","alignItems","push","newBoardState","cloneGameRows","currentGameRow","hints","guessedColors","indexedGuessedColors","processed","indexedCodeColors","returnValue","rightColorWrongPosition","rightColorRightPosition","_loop","guessedColor","codeColor","find","c","length","foundCodeColor","HintProvider","rightColorRightPositionColors","rightColorWrongPositionColors","remainingSlots","concat","getGameEmptyRows","getCode","filter","Main","apply","arguments","Gameboard_GameBoard","render","Main_Main"],"mappings":"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","file":"static/js/main.3aaae945.chunk.js","sourcesContent":["/**\r\n * This component represents a single pin in the game board.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class ColorPin extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component.\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            borderRadius: \"50%\",\r\n            color: this.props.color,\r\n            backgroundColor: this.props.color,\r\n            flexGrow: 0,\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n        };\r\n\r\n        return (\r\n            <button onClick={this.onClick} style={colorPinStyle}></button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handlers the click on a pin.\r\n     */\r\n    private onClick(): void {\r\n        if (this.props.onPinClick) {\r\n            this.props.onPinClick(this.props.pinNumber);\r\n        }\r\n\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(this.props.color);\r\n        }\r\n    }\r\n}","/**\r\n * Contains helper functions.\r\n */\r\n\r\nimport { HintColors } from \"./Types/HintColors\";\r\nimport { Hints } from \"./Types/Hints\";\r\nimport { PinColors } from \"./Types/PinColors\";\r\n\r\n/**\r\n * Provides a Hints model\r\n * @param {PinColor[]} guessedColors. The colors the player guessed.\r\n * @param {PinColor[]} codeColors. The colors of the AI generated code.\r\n */\r\nexport function HintProvider(guessedColors: PinColors[], codeColors: PinColors[]): Hints {\r\n\r\n    const indexedGuessedColors = guessedColors.map((color, index) => ({ index, color, processed: false }));\r\n    const indexedCodeColors = codeColors.map((color, index) => ({ index, color, processed: false }));\r\n\r\n    const returnValue: Hints = { rightColorWrongPosition: 0, rightColorRightPosition: 0 };\r\n\r\n    // First check if the player gussed colors in the right position.\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n        const guessedColor = indexedGuessedColors[i];\r\n        const codeColor = indexedCodeColors.find((c) => c.index === i);\r\n\r\n        if (codeColor && codeColor.processed === false) {\r\n            if (guessedColor.color === codeColor.color) {\r\n                returnValue.rightColorRightPosition++;\r\n\r\n                // The hint is done. Remove this element so it is not given as 'Right Color Wrong Position' hint.\r\n                codeColor.processed = true;\r\n                guessedColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check for any correct colors in the wrong position. Any colors that were in the right position\r\n    // have been removed from the codeColorsToCheck array.\r\n\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n\r\n        if (indexedGuessedColors[i].processed === false) {\r\n\r\n            const guessedColor = indexedGuessedColors[i].color;\r\n            // Not the right position, but this color might be present in the code.\r\n            const foundCodeColor = indexedCodeColors.find((c) => c.color === guessedColor && c.processed === false);\r\n\r\n            if (foundCodeColor && foundCodeColor.processed === false) {\r\n                returnValue.rightColorWrongPosition++;\r\n\r\n                // The hint is done. Remove this element from the colors to check array.\r\n                foundCodeColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return returnValue;\r\n}\r\n\r\nexport function randomizeArray(hintColorArray: HintColors[]): HintColors[] {\r\n\r\n    const newArray = [...hintColorArray];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        const pos1 = Math.floor(Math.random() * 4);\r\n        const pos2 = Math.floor(Math.random() * 4);\r\n        const pos1Color = newArray[pos1];\r\n        const pos2Color = newArray[pos2];\r\n\r\n        if (typeof (pos1Color) !== \"undefined\" && typeof (pos2Color) !== \"undefined\") {\r\n            newArray[pos1] = pos2Color;\r\n            newArray[pos2] = pos1Color;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class Modal extends React.Component<Properties> {\r\n\r\n    private el: HTMLDivElement;\r\n\r\n    private modalRoot: HTMLElement | null;\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.el = document.createElement(\"div\");\r\n        this.modalRoot = document.getElementById(\"portalRoot\");\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.appendChild(this.el);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.removeChild(this.el);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        let left = 0;\r\n        let top = 0;\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this.props.element.current) {\r\n            const rectangle = this.props.element.current.getBoundingClientRect();\r\n            left = rectangle.left;\r\n            top = rectangle.bottom;\r\n            width = rectangle.width;\r\n            height = rectangle.height;\r\n        }\r\n\r\n        const modelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            left,\r\n            top,\r\n            height,\r\n            width,\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n        };\r\n\r\n        return ReactDOM.createPortal(\r\n            <div style={modelStyle}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>,\r\n            this.el,\r\n        );\r\n    }\r\n}","\r\n/**\r\n * The colors used in the game. Note that \"black\" means empty. The original version of the game used 6 color pins.\r\n */\r\nexport type PinColors = \"orange\" | \"yellow\" | \"blue\" | \"green\" | \"cyan\" | \"purple\" | \"black\";\r\n\r\n/**\r\n * An array of all colors supported by the game.\r\n */\r\nexport const pinColors: PinColors[] = [\"orange\", \"yellow\", \"blue\", \"green\", \"cyan\", \"purple\"];","/**\r\n * This component is a pop-up that allows the player to select a color for a clicked pin.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class SelectColor extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const selectColorStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            backgroundColor: \"white\",\r\n            height: \"100%\",\r\n            justifyContent: \"space-evenly\"\r\n        };\r\n\r\n        return (\r\n            <div style={selectColorStyle} >\r\n                {\r\n                    pinColors.map((color, index) => <div key={index} onClick={this.onClick} style={{ height: \"100%\", width: \"100%\", backgroundColor: color }} ></div>)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handles the click on a colored div element\r\n     * @param {React.SyntheticEvent<HTMLDivElement>} e. The event object\r\n     */\r\n    private onClick(e: React.SyntheticEvent<HTMLDivElement>) {\r\n        const target = e.target as HTMLDivElement;\r\n\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(target.style.backgroundColor as PinColors);\r\n        }\r\n    }\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { Modal } from \"../Model/Model\";\r\nimport { SelectColor } from \"../SelectColor/SelectColor\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\nimport { State } from \"./State\";\r\n\r\nexport class PinRow extends React.Component<Properties, State> {\r\n\r\n    private rowRef = React.createRef<HTMLDivElement>();\r\n\r\n    /**\r\n     * Contructor\r\n     * @param {Properties} properties\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showPinPicker: false,\r\n        };\r\n\r\n        this.onPinClick = this.onPinClick.bind(this);\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            backgroundColor: typeof (this.props.current) !== \"undefined\" ? this.props.current ? \"blue\" : \"brown\" : undefined,\r\n            height: \"8%\",\r\n        };\r\n\r\n        const hintBoxStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n            height: \"100%\",\r\n            flexGrow: 1,\r\n        };\r\n\r\n        const hintSquareBaseStyle: CSSProperties = {\r\n            width: \"80%\",\r\n            height: \"65%\",\r\n            marginTop: \"6%\",\r\n            marginRight: \"2%\"\r\n        };\r\n\r\n        return (\r\n            <div style={colorPinStyle} ref={this.rowRef} >\r\n                {\r\n                    this.props.pinColors.map((color, index) => (\r\n                        <div key={index} style={{ display: \"flex\", width: \"14%\", height: \"88%\", marginTop: \"1%\" }}>\r\n                            <ColorPin pinNumber={index} color={color} onPinClick={this.onPinClick} />\r\n                        </div>\r\n                    ))\r\n                }\r\n                {\r\n                    this.state.showPinPicker ?\r\n                        <Modal element={this.rowRef}>\r\n                            <SelectColor onPickColor={this.onPickColor} />\r\n                        </Modal>\r\n                        : null\r\n                }\r\n\r\n                <div style={hintBoxStyle}>\r\n                    {\r\n                        typeof (this.props.hintColors) !== \"undefined\" ?\r\n                            this.props.hintColors.map((color, index) => <div key={index} style={{ ...hintSquareBaseStyle, backgroundColor: color }} />)\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * An event fired when the user clicks on a pin in a pin row. Used to set the color of a pin.\r\n     * @param {number} pinNumber. The location of a pin in a row.\r\n     */\r\n    private onPinClick(pinNumber: number): void {\r\n        if (this.props.current && this.props.onSetColor) {\r\n            this.setState({ showPinPicker: true, currentPinNumber: pinNumber });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to select a color for a pin.\r\n     * @param {PinColors} color. Preset colors.\r\n     */\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.current && this.props.onSetColor && typeof (this.state.currentPinNumber) === \"number\") {\r\n            this.setState({ showPinPicker: false });\r\n\r\n            if (typeof (this.props.row) !== \"undefined\") {\r\n                this.props.onSetColor(this.props.row, this.state.currentPinNumber, color);\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * Gameboard component. This is where the action happens.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { HintProvider, randomizeArray } from \"../HelperFunctions\";\r\nimport { PinRow } from \"../PinRow/PinRow\";\r\nimport { HintColors } from \"../Types/HintColors\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { GameRow } from \"./GameRow\";\r\nimport { State } from \"./State\";\r\n\r\nexport class GameBoard extends React.Component<{}, State> {\r\n\r\n    /**\r\n     * Constructs the Gameboard\r\n     */\r\n    constructor(props: object) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n\r\n        this.onMoveDone = this.onMoveDone.bind(this);\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n        this.onResetBoard = this.onResetBoard.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const outer: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            height: \"90%\",\r\n            width: \"100%\",\r\n        };\r\n\r\n        const gameboardStyle: CSSProperties = {\r\n            backgroundColor: \"brown\",\r\n            flexShrink: 0,\r\n            flexDirection: \"column\",\r\n            width: \"50vh\"\r\n        };\r\n\r\n        const doneButtonStyle: CSSProperties = {\r\n            display: \"flex-inline\",\r\n            borderRadius: \"40%\",\r\n            width: \"50%\",\r\n            height: \"3%\",\r\n            backgroundColor: \"gray\",\r\n            border: \"1%\",\r\n            margin: \"1%\",\r\n            fontWeight: \"bold\",\r\n            alignItems: \"center\"\r\n        };\r\n\r\n        const gameEndTextStype: CSSProperties = {\r\n            display: \"flex\",\r\n            fontSize: 28,\r\n            marginBottom: 10,\r\n            marginTop: 50,\r\n            textAlign: \"center\",\r\n            height: \"100%\",\r\n            flexDirection: \"column\"\r\n        };\r\n\r\n        const playAgainButtonStyle: CSSProperties = {\r\n            margin: \"5%\",\r\n            height: \"8%\",\r\n            fontSize: \"24px\",\r\n            fontWeight: \"bold\",\r\n            borderRadius: \"50%\",\r\n        };\r\n\r\n        const codeStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            width: \"50vh\",\r\n            height: \"12%\"\r\n        };\r\n\r\n        return (\r\n            <div style={outer}>\r\n                {\r\n                    <div style={gameboardStyle}>\r\n                        {\r\n                            this.state.gameRows.map((row, index) =>\r\n\r\n                                <PinRow\r\n                                    key={index}\r\n                                    current={this.state.currentRow === index}\r\n                                    row={index}\r\n                                    pinColors={row.pinColors}\r\n                                    hintColors={row.hintColors}\r\n                                    onSetColor={this.onSetColor} />\r\n                            )}\r\n                        {\r\n                            this.state.gameLost ?\r\n                                <div style={gameEndTextStype}>\r\n                                    <p>You lost the game. The code was...</p><br />\r\n                                    <div style={codeStyle}>\r\n                                        <ColorPin pinNumber={0} color={this.state.codeColors[0]} />\r\n                                        <ColorPin pinNumber={1} color={this.state.codeColors[1]} />\r\n                                        <ColorPin pinNumber={2} color={this.state.codeColors[2]} />\r\n                                        <ColorPin pinNumber={3} color={this.state.codeColors[3]} />\r\n                                    </div>\r\n                                    <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                                </div>\r\n                                : this.state.gameWon ?\r\n                                    <div style={gameEndTextStype}>\r\n                                        <p>You found the code!</p>\r\n                                        <div style={codeStyle}>\r\n                                            <ColorPin pinNumber={0} color={this.state.codeColors[0]} />\r\n                                            <ColorPin pinNumber={1} color={this.state.codeColors[1]} />\r\n                                            <ColorPin pinNumber={2} color={this.state.codeColors[2]} />\r\n                                            <ColorPin pinNumber={3} color={this.state.codeColors[3]} />\r\n                                        </div>\r\n                                        <p>Congratulations!</p>\r\n                                        <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                                    </div>\r\n                                    : null\r\n                        }\r\n                        <div style={outer}>\r\n                            {this.allColorsSet() ?\r\n                                <button style={doneButtonStyle} onClick={this.onMoveDone}>Done!</button>\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an array of empty game rows.\r\n     * @returns {GameRow[]}. Returns 12 empty game rows\r\n     */\r\n    private getGameEmptyRows(): GameRow[] {\r\n\r\n        const gameRows: GameRow[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            gameRows.push({ hintColors: [\"black\", \"black\", \"black\", \"black\"], pinColors: [\"black\", \"black\", \"black\", \"black\"] });\r\n        }\r\n\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Returns 4 randomly selected colors.\r\n     * @param {PinColors[]}. An array with 4 randomly selected colors.\r\n     */\r\n    private getCode(): PinColors[] {\r\n        const codeColors: PinColors[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const random = Math.floor(Math.random() * 6);\r\n            codeColors.push(pinColors[random]);\r\n        }\r\n\r\n        return codeColors;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the player click the \"Done\" button. This moves the game to the next row.\r\n     */\r\n    private onMoveDone(): void {\r\n\r\n        if (this.state.gameWon || this.state.gameLost) {\r\n            return;\r\n        }\r\n\r\n        // Clone the current board so to work immutable.\r\n        const newBoardState = this.cloneGameRows();\r\n\r\n        // Get the curerent game row.\r\n        const currentGameRow = newBoardState[this.state.currentRow];\r\n\r\n        // We'll provide two hints as per the rules of Mastermind. The right color in the right position is will be a red hint.\r\n        // The rigth color in the wrong position will be a white pin.\r\n\r\n        const hints = HintProvider(currentGameRow.pinColors, this.state.codeColors);\r\n\r\n        if (hints.rightColorRightPosition === 4) {\r\n            this.setState({ gameWon: true });\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentRow === 11 && hints.rightColorRightPosition !== 4) {\r\n            this.setState({ gameLost: true });\r\n            return;\r\n        }\r\n\r\n        const rightColorRightPositionColors: HintColors[] = [];\r\n        const rightColorWrongPositionColors: HintColors[] = [];\r\n\r\n        for (let i = 0; i < hints.rightColorRightPosition; i++) {\r\n            rightColorRightPositionColors.push(\"red\");\r\n        }\r\n\r\n        for (let i = 0; i < hints.rightColorWrongPosition; i++) {\r\n            rightColorWrongPositionColors.push(\"white\");\r\n        }\r\n\r\n        const remainingSlots = 4 - (hints.rightColorRightPosition + hints.rightColorWrongPosition);\r\n\r\n        const hintColors = [...randomizeArray(rightColorRightPositionColors), ...randomizeArray(rightColorWrongPositionColors)];\r\n\r\n        for (let i = 0; i < remainingSlots; i++) {\r\n            hintColors.push(\"black\");\r\n        }\r\n\r\n        currentGameRow.hintColors = hintColors;\r\n\r\n        this.setState({ currentRow: this.state.currentRow + 1, gameRows: newBoardState });\r\n    }\r\n\r\n    /**\r\n     * Event handler for setting the color of a pin in a row.\r\n     * @param {number} row. The row of the pin,\r\n     * @param {number} pinNumber. Pin number in the row.\r\n     * @param {PinColors} color. The color the pin will get.\r\n     */\r\n    private onSetColor(row: number, pinNumber: number, color: PinColors): void {\r\n        const gameRows = this.cloneGameRows();\r\n        gameRows[row].pinColors[pinNumber] = color;\r\n\r\n        this.setState({ gameRows });\r\n    }\r\n\r\n    /**\r\n     * Resets the game board.\r\n     */\r\n    private onResetBoard(): void {\r\n        this.setState(this.getInitialState);\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state of the game.\r\n     */\r\n    private getInitialState(): State {\r\n        return {\r\n            currentRow: 0,\r\n            gameRows: this.getGameEmptyRows(),\r\n            codeColors: this.getCode(),\r\n            gameLost: false,\r\n            gameWon: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new array of game rows and hint colors so we don't have to update the state directly.\r\n     * @returns {GameRow[]}\r\n     */\r\n    private cloneGameRows(): GameRow[] {\r\n        const gameRows = [...this.state.gameRows];\r\n        for (let i = 0; i < gameRows.length; i++) {\r\n            gameRows[i].pinColors = [...this.state.gameRows[i].pinColors];\r\n            gameRows[i].hintColors = [...this.state.gameRows[i].hintColors];\r\n        }\r\n        return gameRows;\r\n    }\r\n\r\n    private allColorsSet(): boolean {\r\n        return this.state.gameRows[this.state.currentRow].pinColors.filter((color) => color === \"black\").length === 0;\r\n    }\r\n}","/**\n * Main app. The game board is launched from here.\n */\n\nimport React, { CSSProperties } from \"react\";\nimport { GameBoard } from \"../Gameboard/Gameboard\";\n\nexport class Main extends React.Component {\n\n    /**\n     * Render the component.\n     */\n    public render(): React.ReactElement {\n        const titleStyle: CSSProperties = {\n            fontSize: 28,\n            marginBottom: 10,\n            textAlign: \"center\",\n        };\n\n        return (\n            <div style={{ height: \"100vh\", textAlign: \"center\" }} >\n                <p style={titleStyle}>Mastermind</p>\n                <GameBoard />\n            </div>\n        );\n    }\n}\n","/**\n * Launch point.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { Main } from \"./Main/Main\";\n\n// Render the main application on the DOM.\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n"],"sourceRoot":""}