{"version":3,"sources":["ColorPin/ColorPin.tsx","HelperFunctions.ts","Model/Model.tsx","Types/PinColors.ts","SelectColor/SelectColor.tsx","PinRow/PinRow.tsx","Gameboard/Gameboard.tsx","Main/Main.tsx","serviceWorker.ts","index.tsx"],"names":["ColorPin","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","colorPinStyle","display","borderRadius","color","backgroundColor","flexGrow","width","height","marginTop","marginRight","react_default","a","createElement","style","onPinClick","pinNumber","onPickColor","React","Component","randomizeArray","hintColorArray","newArray","toConsumableArray","i","pos1","Math","floor","random","pos2","pos1Color","pos2Color","Modal","el","modalRoot","document","getElementById","appendChild","removeChild","left","top","element","current","rectangle","getBoundingClientRect","bottom","modelStyle","position","flexDirection","boxSizing","ReactDOM","createPortal","children","pinColors","SelectColor","_this2","justifyContent","map","index","ColorPin_ColorPin","PinRow","rowRef","createRef","state","showPinPicker","undefined","hintSquareBaseStyle","ref","Model_Modal","SelectColor_SelectColor","hintColors","objectSpread","onSetColor","setState","currentPinNumber","row","GameBoard","getInitialState","onMoveDone","onResetBoard","outer","gameEndTextStype","fontSize","marginBottom","textAlign","playAgainButtonStyle","margin","fontWeight","codeStyle","gameWon","codeColors","flexShrink","gameRows","PinRow_PinRow","currentRow","gameLost","allColorsSet","border","alignItems","push","newBoardState","cloneGameRows","currentGameRow","hints","guessedColors","indexedGuessedColors","processed","indexedCodeColors","returnValue","rightColorWrongPosition","rightColorRightPosition","_loop","guessedColor","codeColor","find","c","length","foundCodeColor","HintProvider","rightColorRightPositionColors","rightColorWrongPositionColors","remainingSlots","concat","getGameEmptyRows","getCode","filter","Main","showGame","showManual","Gameboard_GameBoard","Boolean","window","location","hostname","match","render","Main_Main","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.34b330e6.chunk.js","sourcesContent":["/**\r\n * This component represents a single pin in the game board.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class ColorPin extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component.\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            borderRadius: \"50%\",\r\n            color: this.props.color,\r\n            backgroundColor: this.props.color,\r\n            flexGrow: 0,\r\n            width: \"14%\",\r\n            height: \"88%\",\r\n            marginTop: \"1%\",\r\n            marginRight: \"1%\"\r\n        };\r\n\r\n        return (\r\n            <button onClick={this.onClick} style={colorPinStyle}></button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handlers the click on a pin.\r\n     */\r\n    private onClick(): void {\r\n        if (this.props.onPinClick) {\r\n            this.props.onPinClick(this.props.pinNumber);\r\n        }\r\n\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(this.props.color);\r\n        }\r\n    }\r\n}","/**\r\n * Contains helper functions.\r\n */\r\n\r\nimport { HintColors } from \"./Types/HintColors\";\r\nimport { Hints } from \"./Types/Hints\";\r\nimport { PinColors } from \"./Types/PinColors\";\r\n\r\n/**\r\n * Provides a Hints model\r\n * @param {PinColor[]} guessedColors. The colors the player guessed.\r\n * @param {PinColor[]} codeColors. The colors of the AI generated code.\r\n */\r\nexport function HintProvider(guessedColors: PinColors[], codeColors: PinColors[]): Hints {\r\n\r\n    const indexedGuessedColors = guessedColors.map((color, index) => ({ index, color, processed: false }));\r\n    const indexedCodeColors = codeColors.map((color, index) => ({ index, color, processed: false }));\r\n\r\n    const returnValue: Hints = { rightColorWrongPosition: 0, rightColorRightPosition: 0 };\r\n\r\n    // First check if the player gussed colors in the right position.\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n        const guessedColor = indexedGuessedColors[i];\r\n        const codeColor = indexedCodeColors.find((c) => c.index === i);\r\n\r\n        if (codeColor && codeColor.processed === false) {\r\n            if (guessedColor.color === codeColor.color) {\r\n                returnValue.rightColorRightPosition++;\r\n\r\n                // The hint is done. Remove this element so it is not given as 'Right Color Wrong Position' hint.\r\n                codeColor.processed = true;\r\n                guessedColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Check for any correct colors in the wrong position. Any colors that were in the right position\r\n    // have been removed from the codeColorsToCheck array.\r\n\r\n    for (let i = 0; i < indexedGuessedColors.length; i++) {\r\n\r\n        if (indexedGuessedColors[i].processed === false) {\r\n\r\n            const guessedColor = indexedGuessedColors[i].color;\r\n            // Not the right position, but this color might be present in the code.\r\n            const foundCodeColor = indexedCodeColors.find((c) => c.color === guessedColor && c.processed === false);\r\n\r\n            if (foundCodeColor && foundCodeColor.processed === false) {\r\n                returnValue.rightColorWrongPosition++;\r\n\r\n                // The hint is done. Remove this element from the colors to check array.\r\n                foundCodeColor.processed = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return returnValue;\r\n}\r\n\r\nexport function randomizeArray(hintColorArray: HintColors[]): HintColors[] {\r\n\r\n    const newArray = [...hintColorArray];\r\n\r\n    for (let i = 0; i < 10; i++) {\r\n        const pos1 = Math.floor(Math.random() * 4);\r\n        const pos2 = Math.floor(Math.random() * 4);\r\n        const pos1Color = newArray[pos1];\r\n        const pos2Color = newArray[pos2];\r\n\r\n        if (typeof (pos1Color) !== \"undefined\" && typeof (pos2Color) !== \"undefined\") {\r\n            newArray[pos1] = pos2Color;\r\n            newArray[pos2] = pos1Color;\r\n        }\r\n    }\r\n\r\n    return newArray;\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class Modal extends React.Component<Properties> {\r\n\r\n    private el: HTMLDivElement;\r\n\r\n    private modalRoot: HTMLElement | null;\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.el = document.createElement(\"div\");\r\n        this.modalRoot = document.getElementById(\"portalRoot\");\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.appendChild(this.el);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.removeChild(this.el);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        let left = 0;\r\n        let top = 0;\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this.props.element.current) {\r\n            const rectangle = this.props.element.current.getBoundingClientRect();\r\n            left = rectangle.left;\r\n            top = rectangle.bottom;\r\n            width = rectangle.width;\r\n            height = rectangle.height;\r\n        }\r\n\r\n        const modelStyle: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            left,\r\n            top,\r\n            height,\r\n            width,\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n        };\r\n\r\n        return ReactDOM.createPortal(\r\n            <div style={modelStyle}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>,\r\n            this.el,\r\n        );\r\n    }\r\n}","\r\n/**\r\n * The colors used in the game. Note that \"black\" means empty. The original version of the game used 6 color pins.\r\n */\r\nexport type PinColors = \"orange\" | \"yellow\" | \"blue\" | \"green\" | \"cyan\" | \"purple\" | \"black\";\r\n\r\n/**\r\n * An array of all colors supported by the game.\r\n */\r\nexport const pinColors: PinColors[] = [\"orange\", \"yellow\", \"blue\", \"green\", \"cyan\", \"purple\"];","/**\r\n * This component is a pop-up that allows the player to select a color for a clicked pin.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class SelectColor extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const selectColorStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection : \"row\",\r\n            backgroundColor: \"white\",\r\n            height: \"100%\",\r\n            justifyContent: \"space-evenly\"\r\n        };\r\n\r\n        return (\r\n            <div style={selectColorStyle} >\r\n                {\r\n                    pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPickColor={this.onPickColor} />)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(color);\r\n        }\r\n    }\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { Modal } from \"../Model/Model\";\r\nimport { SelectColor } from \"../SelectColor/SelectColor\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\nimport { State } from \"./State\";\r\n\r\nexport class PinRow extends React.Component<Properties, State> {\r\n\r\n    private rowRef = React.createRef<HTMLDivElement>();\r\n\r\n    /**\r\n     * Contructor\r\n     * @param {Properties} properties\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showPinPicker: false,\r\n        };\r\n\r\n        this.onPinClick = this.onPinClick.bind(this);\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            backgroundColor: typeof (this.props.current) !== \"undefined\" ? this.props.current ? \"blue\" : \"brown\" : undefined,\r\n            height: \"8%\",\r\n        };\r\n\r\n        const hintBoxStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n            height: \"100%\",\r\n            flexGrow: 1,\r\n        };\r\n\r\n        const hintSquareBaseStyle: CSSProperties = {\r\n            width: \"80%\",\r\n            height: \"65%\",\r\n            marginTop: \"6%\",\r\n            marginRight: \"2%\"\r\n        };\r\n\r\n        return (\r\n            <div style={colorPinStyle} ref={this.rowRef} >\r\n                {\r\n                    this.props.pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPinClick={this.onPinClick} />)\r\n                }\r\n                {\r\n                    this.state.showPinPicker ?\r\n                        <Modal element={this.rowRef}>\r\n                            <SelectColor onPickColor={this.onPickColor} />\r\n                        </Modal>\r\n                        : null\r\n                }\r\n\r\n                <div style={hintBoxStyle}>\r\n                    {\r\n                        typeof (this.props.hintColors) !== \"undefined\" ?\r\n                            this.props.hintColors.map((color, index) => <div key={index} style={{ ...hintSquareBaseStyle, backgroundColor: color }} />)\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * An event fired when the user clicks on a pin in a pin row. Used to set the color of a pin.\r\n     * @param {number} pinNumber. The location of a pin in a row.\r\n     */\r\n    private onPinClick(pinNumber: number): void {\r\n        if (this.props.current && this.props.onSetColor) {\r\n            this.setState({ showPinPicker: true, currentPinNumber: pinNumber });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to select a color for a pin.\r\n     * @param {PinColors} color. Preset colors.\r\n     */\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.current && this.props.onSetColor && typeof (this.state.currentPinNumber) === \"number\") {\r\n            this.setState({ showPinPicker: false });\r\n\r\n            if (typeof (this.props.row) !== \"undefined\") {\r\n                this.props.onSetColor(this.props.row, this.state.currentPinNumber, color);\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * Gameboard component. This is where the action happens.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { HintProvider, randomizeArray } from \"../HelperFunctions\";\r\nimport { PinRow } from \"../PinRow/PinRow\";\r\nimport { HintColors } from \"../Types/HintColors\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { GameRow } from \"./GameRow\";\r\nimport { State } from \"./State\";\r\n\r\nexport class GameBoard extends React.Component<{}, State> {\r\n\r\n    /**\r\n     * Constructs the Gameboard\r\n     */\r\n    constructor(props: object) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n\r\n        this.onMoveDone = this.onMoveDone.bind(this);\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n        this.onResetBoard = this.onResetBoard.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const outer: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            height: \"90%\",\r\n            width: \"100%\",\r\n        };\r\n\r\n        const gameboardStyle: CSSProperties = {\r\n            backgroundColor: \"brown\",\r\n            flexShrink: 0,\r\n            flexDirection: \"column\",\r\n            width: \"50vh\"\r\n        };\r\n\r\n        const doneButtonStyle: CSSProperties = {\r\n            display: \"flex-inline\",\r\n            borderRadius: \"40%\",\r\n            width: \"50%\",\r\n            height: \"3%\",\r\n            backgroundColor: \"gray\",\r\n            border: \"1%\",\r\n            margin: \"1%\",\r\n            fontWeight: \"bold\",\r\n            alignItems: \"center\"\r\n        };\r\n\r\n        const gameEndTextStype: CSSProperties = {\r\n            display: \"flex\",\r\n            fontSize: 28,\r\n            marginBottom: 10,\r\n            marginTop: 50,\r\n            textAlign: \"center\",\r\n            height: \"100%\",\r\n            flexDirection: \"column\"\r\n        };\r\n\r\n        const playAgainButtonStyle: CSSProperties = {\r\n            margin: \"5%\",\r\n            height: \"8%\",\r\n            fontSize: \"24px\",\r\n            fontWeight: \"bold\",\r\n            borderRadius: \"50%\",\r\n        };\r\n\r\n        const codeStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            width: \"50vh\",\r\n            height: \"8%\"\r\n        };\r\n\r\n        return (\r\n            <div style={outer}>\r\n                {\r\n                    this.state.gameWon ?\r\n                        <div style={gameEndTextStype}>\r\n                            <p>You found the code!</p>\r\n                            <div style={codeStyle}>\r\n                                <ColorPin pinNumber={0} color={this.state.codeColors[0]} />\r\n                                <ColorPin pinNumber={1} color={this.state.codeColors[1]} />\r\n                                <ColorPin pinNumber={2} color={this.state.codeColors[2]} />\r\n                                <ColorPin pinNumber={3} color={this.state.codeColors[3]} />\r\n                            </div>\r\n                            <p>Congratulations!</p>\r\n                            <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                        </div>\r\n                        :\r\n                        <div style={gameboardStyle}>\r\n                            {\r\n                                this.state.gameRows.map((row, index) =>\r\n\r\n                                    <PinRow\r\n                                        key={index}\r\n                                        current={this.state.currentRow === index}\r\n                                        row={index}\r\n                                        pinColors={row.pinColors}\r\n                                        hintColors={row.hintColors}\r\n                                        onSetColor={this.onSetColor} />\r\n                                )}\r\n                            {\r\n                                this.state.gameLost ?\r\n                                    <div style={gameEndTextStype}>\r\n                                        <p>You lost the game. The code was...</p><br />\r\n                                        <div style={codeStyle}>\r\n                                            <ColorPin pinNumber={0} color={this.state.codeColors[0]} />\r\n                                            <ColorPin pinNumber={1} color={this.state.codeColors[1]} />\r\n                                            <ColorPin pinNumber={2} color={this.state.codeColors[2]} />\r\n                                            <ColorPin pinNumber={3} color={this.state.codeColors[3]} />\r\n                                        </div>\r\n                                        <button style={playAgainButtonStyle} onClick={this.onResetBoard}>Play again?</button>\r\n                                    </div>\r\n                                    : null\r\n                            }\r\n                            <div style={outer}>\r\n                                {this.allColorsSet() ?\r\n                                    <button style={doneButtonStyle} onClick={this.onMoveDone}>Done!</button>\r\n                                    : null\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an array of empty game rows.\r\n     * @returns {GameRow[]}. Returns 12 empty game rows\r\n     */\r\n    private getGameEmptyRows(): GameRow[] {\r\n\r\n        const gameRows: GameRow[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            gameRows.push({ hintColors: [\"black\", \"black\", \"black\", \"black\"], pinColors: [\"black\", \"black\", \"black\", \"black\"] });\r\n        }\r\n\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Returns 4 randomly selected colors.\r\n     * @param {PinColors[]}. An array with 4 randomly selected colors.\r\n     */\r\n    private getCode(): PinColors[] {\r\n        const codeColors: PinColors[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const random = Math.floor(Math.random() * 6);\r\n            codeColors.push(pinColors[random]);\r\n        }\r\n\r\n        return codeColors;\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the player click the \"Done\" button. This moves the game to the next row.\r\n     */\r\n    private onMoveDone(): void {\r\n\r\n        if (this.state.gameWon || this.state.gameLost) {\r\n            return;\r\n        }\r\n\r\n        // Clone the current board so to work immutable.\r\n        const newBoardState = this.cloneGameRows();\r\n\r\n        // Get the curerent game row.\r\n        const currentGameRow = newBoardState[this.state.currentRow];\r\n\r\n        // We'll provide two hints as per the rules of Mastermind. The right color in the right position is will be a red hint.\r\n        // The rigth color in the wrong position will be a white pin.\r\n\r\n        const hints = HintProvider(currentGameRow.pinColors, this.state.codeColors);\r\n\r\n        if (hints.rightColorRightPosition === 4) {\r\n            this.setState({ gameWon: true });\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentRow === 11 && hints.rightColorRightPosition !== 4) {\r\n            this.setState({ gameLost: true });\r\n            return;\r\n        }\r\n\r\n        const rightColorRightPositionColors: HintColors[] = [];\r\n        const rightColorWrongPositionColors: HintColors[] = [];\r\n\r\n        for (let i = 0; i < hints.rightColorRightPosition; i++) {\r\n            rightColorRightPositionColors.push(\"red\");\r\n        }\r\n\r\n        for (let i = 0; i < hints.rightColorWrongPosition; i++) {\r\n            rightColorWrongPositionColors.push(\"white\");\r\n        }\r\n\r\n        const remainingSlots = 4 - (hints.rightColorRightPosition + hints.rightColorWrongPosition);\r\n\r\n        const hintColors = [...randomizeArray(rightColorRightPositionColors), ...randomizeArray(rightColorWrongPositionColors)];\r\n\r\n        for (let i = 0; i < remainingSlots; i++) {\r\n            hintColors.push(\"black\");\r\n        }\r\n\r\n        currentGameRow.hintColors = hintColors;\r\n\r\n        this.setState({ currentRow: this.state.currentRow + 1, gameRows: newBoardState });\r\n    }\r\n\r\n    /**\r\n     * Event handler for setting the color of a pin in a row.\r\n     * @param {number} row. The row of the pin,\r\n     * @param {number} pinNumber. Pin number in the row.\r\n     * @param {PinColors} color. The color the pin will get.\r\n     */\r\n    private onSetColor(row: number, pinNumber: number, color: PinColors): void {\r\n        const gameRows = this.cloneGameRows();\r\n        gameRows[row].pinColors[pinNumber] = color;\r\n\r\n        this.setState({ gameRows });\r\n    }\r\n\r\n    /**\r\n     * Resets the game board.\r\n     */\r\n    private onResetBoard(): void {\r\n        this.setState(this.getInitialState);\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state of the game.\r\n     */\r\n    private getInitialState(): State {\r\n        return {\r\n            currentRow: 0,\r\n            gameRows: this.getGameEmptyRows(),\r\n            codeColors: this.getCode(),\r\n            gameLost: false,\r\n            gameWon: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new array of game rows and hint colors so we don't have to update the state directly.\r\n     * @returns {GameRow[]}\r\n     */\r\n    private cloneGameRows(): GameRow[] {\r\n        const gameRows = [...this.state.gameRows];\r\n        for (let i = 0; i < gameRows.length; i++) {\r\n            gameRows[i].pinColors = [...this.state.gameRows[i].pinColors];\r\n            gameRows[i].hintColors = [...this.state.gameRows[i].hintColors];\r\n        }\r\n        return gameRows;\r\n    }\r\n\r\n    private allColorsSet(): boolean {\r\n        return this.state.gameRows[this.state.currentRow].pinColors.filter((color) => color === \"black\").length === 0;\r\n    }\r\n}","/**\n * Main app. The game board is launched from here.\n */\n\nimport React, { CSSProperties } from \"react\";\nimport { GameBoard } from \"../Gameboard/Gameboard\";\n\nexport class Main extends React.Component {\n\n    /**\n     * Constructs the main component.\n     */\n    constructor(props: object) {\n        super(props);\n\n        this.state = {\n            showGame: false,\n            showManual: false,\n        };\n    }\n\n    /**\n     * Render the component.\n     */\n    public render(): React.ReactElement {\n        const titleStyle: CSSProperties = {\n            fontSize: 28,\n            marginBottom: 10,\n            textAlign: \"center\",\n        };\n\n        return (\n            <div style={{ height: \"100vh\", textAlign: \"center\" }} >\n                <p style={titleStyle}>Mastermind</p>\n                <GameBoard />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Launch point.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { Main } from \"./Main/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Render the main application on the DOM.\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}