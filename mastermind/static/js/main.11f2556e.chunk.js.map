{"version":3,"sources":["ColorPin/ColorPin.tsx","Model/Model.tsx","Types/PinColors.ts","SelectColor/SelectColor.tsx","PinRow/PinRow.tsx","Gameboard/Gameboard.tsx","Main/Main.tsx","serviceWorker.ts","index.tsx"],"names":["ColorPin","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","bind","assertThisInitialized","inherits","createClass","key","value","colorPinStyle","display","borderRadius","color","backgroundColor","flexGrow","width","height","marginTop","marginRight","react_default","a","createElement","style","onPinClick","pinNumber","onPickColor","React","Component","Modal","el","modalRoot","document","getElementById","appendChild","removeChild","left","top","element","current","rectangle","getBoundingClientRect","bottom","s","position","flexDirection","boxSizing","ReactDOM","createPortal","children","pinColors","SelectColor","_this2","map","index","ColorPin_ColorPin","PinRow","rowRef","createRef","state","showPinPicker","undefined","hintSquareBaseStyle","ref","Model_Modal","SelectColor_SelectColor","justifyContent","hintColors","objectSpread","onSetColor","setState","currentPinNumber","row","GameBoard","getInitialState","onMoveDone","onResetBoard","outer","titleStyle","fontSize","marginBottom","textAlign","gameLost","PinRow_PinRow","codeColors","gameWon","flexShrink","gameRows","currentRow","border","margin","i","push","random","Math","floor","newBoardState","cloneGameRows","currentGameRow","guessColor","codeColorsToCheck","rightColorWrongPosition","rightColorRightPosition","_loop","guessedColor","codeColor","filter","c","length","_loop2","exists","rightColorRightPositionColors","rightColorWrongPositionColors","remainingSlots","concat","toConsumableArray","randomizeArray","hintColorArray","newArray","pos1","pos2","pos1Color","pos2Color","getGameEmptyRows","getCode","Main","showGame","showManual","Gameboard_GameBoard","Boolean","window","location","hostname","match","render","Main_Main","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11f2556e.chunk.js","sourcesContent":["/**\r\n * This component represents a single pin in the game board.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class ColorPin extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component.\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onClick = this.onClick.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            borderRadius: \"50%\",\r\n            color: this.props.color,\r\n            backgroundColor: this.props.color,\r\n            flexGrow: 0,\r\n            width: \"14%\",\r\n            height: \"88%\",\r\n            marginTop: \"1%\",\r\n            marginRight: \"1%\"\r\n        };\r\n\r\n        return (\r\n            <button onClick={this.onClick} style={colorPinStyle}></button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Handlers the click on a pin.\r\n     */\r\n    private onClick(): void {\r\n        if (this.props.onPinClick) {\r\n            this.props.onPinClick(this.props.pinNumber);\r\n        }\r\n\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(this.props.color);\r\n        }\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class Modal extends React.Component<Properties> {\r\n\r\n    private el: HTMLDivElement;\r\n\r\n    private modalRoot: HTMLElement | null;\r\n\r\n    constructor(props: Properties) {\r\n        super(props);\r\n        this.el = document.createElement(\"div\");\r\n        this.modalRoot = document.getElementById(\"portalRoot\");\r\n    }\r\n\r\n    public componentDidMount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.appendChild(this.el);\r\n        }\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        if (this.modalRoot) {\r\n            this.modalRoot.removeChild(this.el);\r\n        }\r\n    }\r\n\r\n    public render() {\r\n\r\n        let left = 0;\r\n        let top = 0;\r\n        let width = 0;\r\n        let height = 0;\r\n        if (this.props.element.current) {\r\n            const rectangle = this.props.element.current.getBoundingClientRect();\r\n            left = rectangle.left;\r\n            top = rectangle.bottom;\r\n            width = rectangle.width;\r\n            height = rectangle.height;\r\n        }\r\n\r\n        const s: React.CSSProperties = {\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            left,\r\n            top,\r\n            height,\r\n            width,\r\n            flexDirection: \"column\",\r\n            boxSizing: \"border-box\",\r\n        };\r\n\r\n        return ReactDOM.createPortal(\r\n            <div style={s}>\r\n                {\r\n                    this.props.children\r\n                }\r\n            </div>,\r\n            this.el,\r\n        );\r\n    }\r\n}","\r\n/**\r\n * The colors used in the game. Note that \"black\" means empty. The original version of the game used 6 color pins.\r\n */\r\nexport type PinColors = \"orange\" | \"yellow\" | \"blue\" | \"green\" | \"cyan\" | \"purple\" | \"black\";\r\n\r\n/**\r\n * An array of all colors supported by the game.\r\n */\r\nexport const pinColors: PinColors[] = [\"orange\", \"yellow\", \"blue\", \"green\", \"cyan\", \"purple\"];","/**\r\n * This component is a pop-up that allows the player to select a color for a clicked pin.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\n\r\nexport class SelectColor extends React.Component<Properties> {\r\n\r\n    /**\r\n     * Constructs the component\r\n     * @param {Properties} props.\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const selectColorStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection : \"row\",\r\n            backgroundColor: \"white\",\r\n            height: \"100%\"\r\n        };\r\n\r\n        return (\r\n            <div style={selectColorStyle} >\r\n                {\r\n                    pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPickColor={this.onPickColor} />)\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.onPickColor) {\r\n            this.props.onPickColor(color);\r\n        }\r\n    }\r\n}","import React, { CSSProperties } from \"react\";\r\nimport { ColorPin } from \"../ColorPin/ColorPin\";\r\nimport { Modal } from \"../Model/Model\";\r\nimport { SelectColor } from \"../SelectColor/SelectColor\";\r\nimport { PinColors } from \"../Types/PinColors\";\r\nimport { Properties } from \"./Properties\";\r\nimport { State } from \"./State\";\r\n\r\nexport class PinRow extends React.Component<Properties, State> {\r\n\r\n    private rowRef = React.createRef<HTMLDivElement>();\r\n\r\n    /**\r\n     * Contructor\r\n     * @param {Properties} properties\r\n     */\r\n    constructor(props: Properties) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            showPinPicker: false,\r\n        };\r\n\r\n        this.onPinClick = this.onPinClick.bind(this);\r\n        this.onPickColor = this.onPickColor.bind(this);\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n\r\n        const colorPinStyle: CSSProperties = {\r\n            flexDirection: \"row\",\r\n            display: \"flex\",\r\n            backgroundColor: typeof (this.props.current) !== \"undefined\" ? this.props.current ? \"blue\" : \"brown\" : undefined,\r\n            height: \"8%\",\r\n        };\r\n\r\n        const hintBoxStyle: CSSProperties = {\r\n            display: \"flex\",\r\n            justifyContent: \"right\",\r\n            height: \"100%\",\r\n            flexGrow: 1,\r\n        };\r\n\r\n        const hintSquareBaseStyle: CSSProperties = {\r\n            width: \"80%\",\r\n            height: \"65%\",\r\n            marginTop: \"6%\",\r\n            marginRight: \"2%\"\r\n        };\r\n\r\n        return (\r\n            <div style={colorPinStyle} ref={this.rowRef} >\r\n                {\r\n                    this.props.pinColors.map((color, index) => <ColorPin key={index} pinNumber={index} color={color} onPinClick={this.onPinClick} />)\r\n                }\r\n                {\r\n                    this.state.showPinPicker ?\r\n                        <Modal element={this.rowRef}>\r\n                            <SelectColor onPickColor={this.onPickColor} />\r\n                        </Modal>\r\n                        : null\r\n                }\r\n\r\n                <div style={hintBoxStyle}>\r\n                    {\r\n                        typeof (this.props.hintColors) !== \"undefined\" ?\r\n                            this.props.hintColors.map((color, index) => <div key={index} style={{ ...hintSquareBaseStyle, backgroundColor: color }} />)\r\n                            : null\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * An event fired when the user clicks on a pin in a pin row. Used to set the color of a pin.\r\n     * @param {number} pinNumber. The location of a pin in a row.\r\n     */\r\n    private onPinClick(pinNumber: number): void {\r\n        if (this.props.current && this.props.onSetColor) {\r\n            this.setState({ showPinPicker: true, currentPinNumber: pinNumber });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Used to select a color for a pin.\r\n     * @param {PinColors} color. Preset colors.\r\n     */\r\n    private onPickColor(color: PinColors): void {\r\n        if (this.props.current && this.props.onSetColor && typeof (this.state.currentPinNumber) === \"number\") {\r\n            this.setState({ showPinPicker: false });\r\n\r\n            if (typeof (this.props.row) !== \"undefined\") {\r\n                this.props.onSetColor(this.props.row, this.state.currentPinNumber, color);\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * Gameboard component. This is where the action happens.\r\n */\r\n\r\nimport React, { CSSProperties } from \"react\";\r\nimport { PinRow } from \"../PinRow/PinRow\";\r\nimport { HintColors } from \"../Types/HintColors\";\r\nimport { pinColors, PinColors } from \"../Types/PinColors\";\r\nimport { GameRow } from \"./GameRow\";\r\nimport { State } from \"./State\";\r\n\r\nexport class GameBoard extends React.Component<{}, State> {\r\n\r\n    /**\r\n     * Constructs the Gameboard\r\n     */\r\n    constructor(props: object) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n\r\n        this.onMoveDone = this.onMoveDone.bind(this);\r\n        this.onSetColor = this.onSetColor.bind(this);\r\n        this.onResetBoard = this.onResetBoard.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Renders the component.\r\n     */\r\n    public render(): React.ReactElement {\r\n\r\n        const outer: CSSProperties = {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"center\",\r\n            height: \"90%\",\r\n            width: \"100%\"\r\n        };\r\n\r\n        const gameboardStyle: CSSProperties = {\r\n            backgroundColor: \"brown\",\r\n            flexShrink: 0,\r\n            flexDirection: \"column\",\r\n            width: \"50vh\"\r\n        };\r\n\r\n        const doneButtonStyle: CSSProperties = {\r\n            borderRadius: \"40%\",\r\n            width: \"90%\",\r\n            height: \"3%\",\r\n            backgroundColor: \"gray\",\r\n            border: \"1%\",\r\n            margin: \"1%\",\r\n        };\r\n\r\n        const titleStyle: CSSProperties = {\r\n            fontSize: 28,\r\n            marginBottom: 10,\r\n            textAlign: \"center\",\r\n        };\r\n\r\n        return (\r\n            <div style={outer}>\r\n                {\r\n                    this.state.gameLost ?\r\n                        <div style={titleStyle}>\r\n                            <p>You lost the game. The code was...</p>\r\n                            <PinRow pinColors={this.state.codeColors} />\r\n                            <button onClick={this.onResetBoard}>Play again?</button>\r\n                        </div>\r\n                        :\r\n                        this.state.gameWon ?\r\n                            <div style={titleStyle}>\r\n                                <p>You won the game</p>\r\n                                <button onClick={this.onResetBoard}>Play again?</button>\r\n                            </div>\r\n                            :\r\n                            <div style={gameboardStyle}>\r\n                                {\r\n                                    this.state.gameRows.map((row, index) =>\r\n\r\n                                        <PinRow\r\n                                            key={index}\r\n                                            current={this.state.currentRow === index}\r\n                                            row={index}\r\n                                            pinColors={row.pinColors}\r\n                                            hintColors={row.hintColors}\r\n                                            onSetColor={this.onSetColor} />\r\n                                    )\r\n                                }\r\n                                <div style={outer}>\r\n                                    <button style={doneButtonStyle} onClick={this.onMoveDone}>Done!</button>\r\n                                </div>\r\n                            </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns an array of empty game rows.\r\n     * @returns {GameRow[]}. Returns 12 empty game rows\r\n     */\r\n    private getGameEmptyRows(): GameRow[] {\r\n\r\n        const gameRows: GameRow[] = [];\r\n        for (let i = 0; i < 12; i++) {\r\n            gameRows.push({ hintColors: [\"black\", \"black\", \"black\", \"black\"], pinColors: [\"black\", \"black\", \"black\", \"black\"] });\r\n        }\r\n\r\n        return gameRows;\r\n    }\r\n\r\n    /**\r\n     * Returns 4 randomly selected colors.\r\n     * @param {PinColors[]}. An array with 4 randomly selected colors.\r\n     */\r\n    private getCode(): PinColors[] {\r\n        const codeColors: PinColors[] = [];\r\n\r\n        for (let i = 0; i < 4; i++) {\r\n            const random = Math.floor(Math.random() * 6);\r\n            codeColors.push(pinColors[random]);\r\n        }\r\n\r\n        return [\"orange\", \"yellow\", \"purple\", \"orange\"];\r\n    }\r\n\r\n    /**\r\n     * Event handler for when the player click the \"Done\" button. This moves the game to the next row.\r\n     */\r\n    private onMoveDone(): void {\r\n\r\n        if (this.state.gameWon || this.state.gameLost) {\r\n            return;\r\n        }\r\n\r\n        // Clone the current board so to work immutable.\r\n        const newBoardState = this.cloneGameRows();\r\n\r\n        // Get the curerent game row.\r\n        const currentGameRow = newBoardState[this.state.currentRow];\r\n\r\n        // This are the colors the player selected.\r\n        const guessColor = currentGameRow.pinColors;\r\n\r\n        // Create a new array with the location of the code colors and the color.\r\n        let codeColorsToCheck = this.state.codeColors.map((color, index) => {\r\n            return { index, color };\r\n        });\r\n\r\n        // We'll provide two hints as per the rules of Mastermind. The right color in the right position is will be a red hint.\r\n        // The rigth color in the wrong position will be a white pin.\r\n        let rightColorWrongPosition = 0;\r\n        let rightColorRightPosition = 0;\r\n\r\n        // First check if the player gussed colors in the right position.\r\n        for (let i = 0; i < currentGameRow.pinColors.length; i++) {\r\n            const guessedColor = guessColor[i];\r\n            const codeColor = codeColorsToCheck.filter((c) => c.index === i);\r\n\r\n            if (codeColor.length > 0) {\r\n                if (guessedColor === codeColor[0].color) {\r\n                    rightColorRightPosition++;\r\n\r\n                    // The hint is done. Remove this element so it is not given as 'Right Color Wrong Position' hint.\r\n                    codeColorsToCheck = codeColorsToCheck.filter((c) => c.index !== i);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check for any correct colors in the wrong position. Any colors that were in the right position\r\n        // have been removed from the codeColorsToCheck array.\r\n        for (let i = 0; i < currentGameRow.pinColors.length; i++) {\r\n            const guessedColor = guessColor[i];\r\n            // Not the right position, but this color might be present in the code.\r\n            const exists = codeColorsToCheck.filter((c) => c.color === guessedColor);\r\n\r\n            if (exists.length > 0) {\r\n                rightColorWrongPosition++;\r\n\r\n                // The hint is done. Remove this element from the colors to check array.\r\n                codeColorsToCheck = codeColorsToCheck.filter((c) => c.index !== exists[0].index);\r\n            }\r\n        }\r\n\r\n        if (rightColorRightPosition === 4) {\r\n            this.setState({ gameWon: true });\r\n            return;\r\n        }\r\n\r\n        if (this.state.currentRow === 11 && rightColorRightPosition !== 4) {\r\n            this.setState({ gameLost: true });\r\n            return;\r\n        }\r\n\r\n        const rightColorRightPositionColors: HintColors[] = [];\r\n        const rightColorWrongPositionColors: HintColors[] = [];\r\n\r\n        for (let i = 0; i < rightColorRightPosition; i++) {\r\n            rightColorRightPositionColors.push(\"red\");\r\n        }\r\n\r\n        for (let i = 0; i < rightColorWrongPosition; i++) {\r\n            rightColorWrongPositionColors.push(\"white\");\r\n        }\r\n\r\n        const remainingSlots = 4 - (rightColorRightPosition + rightColorWrongPosition);\r\n\r\n        const hintColors = [...this.randomizeArray(rightColorRightPositionColors), ...this.randomizeArray(rightColorWrongPositionColors)];\r\n\r\n        for (let i = 0; i < remainingSlots; i++) {\r\n            hintColors.push(\"black\");\r\n        }\r\n\r\n        currentGameRow.hintColors = hintColors;\r\n\r\n        this.setState({ currentRow: this.state.currentRow + 1, gameRows: newBoardState });\r\n    }\r\n\r\n    private randomizeArray(hintColorArray: HintColors[]): HintColors[] {\r\n\r\n        const newArray = [...hintColorArray];\r\n\r\n        for (let i = 0; i < 10; i++) {\r\n            const pos1 = Math.floor(Math.random() * 4);\r\n            const pos2 = Math.floor(Math.random() * 4);\r\n            const pos1Color = newArray[pos1];\r\n            const pos2Color = newArray[pos2];\r\n\r\n            if (typeof(pos1Color) !== \"undefined\" && typeof(pos2Color) !== \"undefined\") {\r\n                newArray[pos1] = pos2Color;\r\n                newArray[pos2] = pos1Color;\r\n            }\r\n        }\r\n\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n     * Event handler for setting the color of a pin in a row.\r\n     * @param {number} row. The row of the pin,\r\n     * @param {number} pinNumber. Pin number in the row.\r\n     * @param {PinColors} color. The color the pin will get.\r\n     */\r\n    private onSetColor(row: number, pinNumber: number, color: PinColors): void {\r\n        const gameRows = this.cloneGameRows();\r\n        gameRows[row].pinColors[pinNumber] = color;\r\n\r\n        this.setState({ gameRows });\r\n    }\r\n\r\n    /**\r\n     * Resets the game board.\r\n     */\r\n    private onResetBoard(): void {\r\n        this.setState(this.getInitialState);\r\n    }\r\n\r\n    /**\r\n     * Gets the initial state of the game.\r\n     */\r\n    private getInitialState(): State {\r\n        return {\r\n            currentRow: 0,\r\n            gameRows: this.getGameEmptyRows(),\r\n            codeColors: this.getCode(),\r\n            gameLost: false,\r\n            gameWon: false,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a new array of game rows and hint colors so we don't have to update the state directly.\r\n     */\r\n    private cloneGameRows() {\r\n        const gameRows = [...this.state.gameRows];\r\n        for (let i = 0; i < gameRows.length; i++) {\r\n            gameRows[i].pinColors = [...this.state.gameRows[i].pinColors];\r\n            gameRows[i].hintColors = [...this.state.gameRows[i].hintColors];\r\n        }\r\n        return gameRows;\r\n    }\r\n}","/**\n * Main app. The game board is launched from here.\n */\n\nimport React, { CSSProperties } from \"react\";\nimport { GameBoard } from \"../Gameboard/Gameboard\";\n\nexport class Main extends React.Component {\n\n    /**\n     * Constructs the main component.\n     */\n    constructor() {\n        super({});\n\n        this.state = {\n            showGame: false,\n            showManual: false,\n        };\n    }\n\n    /**\n     * Render the component.\n     */\n    public render(): React.ReactElement {\n        const titleStyle: CSSProperties = {\n            fontSize: 28,\n            marginBottom: 10,\n            textAlign: \"center\",\n        };\n\n        return (\n            <div style={{ height: \"100vh\", textAlign: \"center\" }} >\n                <p style={titleStyle}>Mastermind</p>\n                <GameBoard />\n            </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Launch point.\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./App.css\";\nimport { Main } from \"./Main/Main\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Render the main application on the DOM.\nReactDOM.render(<Main />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}