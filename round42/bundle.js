/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={7102:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/c7e620797c6ef82b2b37f6526660360d.ogg"},7551:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/bda399219c0913516997ffa3a6b4cef6.ogg"},682:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/9f5b0d1f651243c2c0af9d2ce0fbab59.ogg"},9906:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e2f4ed9c70baad991008d25a5e0c03e3.ogg"},665:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/10208d26fc6e4550c968b914be7712a5.ogg"},6250:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/b0961ce2dd9f9f8c80d62563d32c30e6.ogg"},737:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/1136810413d939073838cdc4b4051c70.ogg"},7404:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/4d0e40f35d87ee4e1fcf4cf085e62f9f.ogg"},4477:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/2d1ea0ce71f89bee4e60d347aa68ad42.ogg"},1944:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/81fcb8051045c20aee252a8800fe75b1.ogg"},7797:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/452bdf3c58a64b36ca20e232b411fe86.ogg"},2254:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/44d29ff292337cdcc2e10a505bdd787b.ogg"},5010:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/2b5f5cdcd464e41277f8040c4a2125ae.ogg"},6409:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/fca21a8083ae14852d274abb6cc1351b.ogg"},2762:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/606e749d1fdef76d558b45a2d665a644.ogg"},6347:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/63f28c2f595b822b6b764833e2d55aaa.ogg"},6568:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/d68c6444ef9343865a091f0bb9e3e9f3.ogg"},4679:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/dfe984ef7ea1a229b1df442dd08fb05e.ogg"},8251:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/517f32d8b9f574ab04fd9615f49771f0.ogg"},1171:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/76e1514da35c8991e2fe62140e6c4175.ogg"},5444:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/09d964b345a26ed492339013b96018d1.ogg"},2157:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/25a24969b0031253873668ed5312d0c6.ogg"},9264:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/a6b7c7e545e7dc1a17f8f034711ff156.ogg"},7006:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/658acba1bc71c1d1734a23e07bff2dbd.ogg"},5540:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/311a44d43ef1db747e1fc15ea702f658.ogg"},8836:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/afe6d19a1139ee39ea307fe80e34cc38.ogg"},1550:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/8c2b26c5576036e458d530680a6fe386.ogg"},1215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/44f6f66ca0f201d4d7a8d78e66421a89.ogg"},7618:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/c233a971e08b614a4ca3d5ef719adcbf.ogg"},3455:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/01e816cfb88458222be06819aabc1b5e.ogg"},9214:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ea2b15a4a47d8c72557067b1c5994909.ogg"},5375:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/03ff070b827f5cc9bef64a83559b4866.ogg"},2658:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/8e992b059d15a6e3b4ef1f073f339bd9.ogg"},4724:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/f62b8496583b66215c373a3268c98971.ogg"},6290:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/b182f4c2487a9ea6a08650dce6bbf93a.ogg"},4725:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/89fe68c02c6fce5da25b0e8fc0092ab3.ogg"},1557:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/8d4e3bbfe8c56cd8782204fe514da000.ogg"},8272:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e631c5d83a91b906dd2df2d89b00d68d.ogg"},2345:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/c1ab16ffd2575ac41c6e684ee21a7b84.ogg"},402:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/41927aee5374d4c0e2ed8a8ff1d326b4.ogg"},1505:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/1e475f2b8b95602a724211d2a1b9e84e.ogg"},2312:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/1a0f420e4567c08f4da70a14176ed0a7.ogg"},6707:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e6047dd0b33114054a5655d065f2b8f3.ogg"},8409:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ecf0e85f86b4f3fa7ca11bb59a15337f.ogg"},2948:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/f3ba4509414bd9a544fba82fd8b45d3c.ogg"},4129:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/01d5434bf79b53896ab6deb677f0a2c7.ogg"},4419:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/91771c81daf4121ccd4d6a03cbce96fc.ogg"},4704:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ecade3aff8c1fa10c6dcb45f1e2deed1.ogg"},4895:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/2a41a51cde929d7a4bde9fab16454e5f.ogg"},9217:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/254b34920010d8b0245aed1638c13e30.ogg"},4827:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/3c065c4ae1beaad4a17c06e8cb36fe4d.ogg"},2947:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/081f1006192329a340b639b6236f7dad.ogg"},7194:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/8851089ebdcbe31ddf92825c1eba6eaf.ogg"},588:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/3ade0973f4f7aca625de58c64dfa467a.ogg"},9686:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/5a7a9848f2085f8aeff0de9b6fd242c3.ogg"},6702:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e15333f1c6783ce1915bd06a8d824f6e.ogg"},4554:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ae254aa092d7fcfbe5686c0bc3de0833.ogg"},8415:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/313fc108f728fb01a1eaa50a43e283f9.ogg"},4153:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/81cc6c161fa62386c0eb985dcc8002b0.ogg"},4992:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/0ca7e5fa880c9684ef5e3b4587001e24.ogg"},4329:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ee60ebc1c74db2b8deeacdfef8144f9a.ogg"},5261:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/cfc05aae315aa7b4b2bf1f80034705da.ogg"},4215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/8ba9bbe4162b371ee1b20a1d4c3c1f5e.ogg"},4513:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/c568b981e01843095f5fb61e7c9b0f00.ogg"},8005:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/f6a61e521f1689a82c456af360b4934a.ogg"},9187:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/77731d29802359e515fc546870d1a32d.ogg"},6717:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/373d43ca046b7d0470febe0f441a0e5a.ogg"},8656:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/b1d8be7894b267f2385ad73faa86b3c9.ogg"},4014:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/5aed2b6c8753110126a8b3314b254328.ogg"},2722:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/35653c3541bce5cebf3fc44ac4b170c2.ogg"},5867:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/b65223738f6a58ad85ab8275b955e487.ogg"},9465:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/0794efc7b5be946255038acad145248e.ogg"},1160:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/4870ae6ba4a34a4a9ff024ddc28ab0fe.ogg"},8871:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/ace24f2b569e9c23072c3c417982dbf0.ogg"},4337:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/7b25219ec51ce2a8affa0e9423ae5583.ogg"},3764:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/0e4394c710f1d82547503d917ce0aced.ogg"},7278:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/4edb0ba4ced5f39ef7b2dda0f74dc8b9.ogg"},549:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/43036f15c19191010a53e39f3bb4c580.ogg"},4991:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/26a562500ccc75b8d432a0bce836090c.ogg"},7040:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/f4ba23058a99badcb0d0b7a8e840b195.ogg"},4231:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/7b2a146b82b9933ac911462c82535fb4.ogg"},8096:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/edb43188e1fac9c2828a89d181d52fb8.ogg"},3026:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/c000e337af91e794f768c4e1878f4fd0.ogg"},289:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/70eeb74af44788ad44d68b6af32a4729.ogg"},9093:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/5d28e1ca8a15a5f78bdf22fc8e7b4772.ogg"},8928:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/954c3babbfc579300b0df45b70f039da.ogg"},4316:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/6bceceb3ef30321bbae71df1439eb993.ogg"},2059:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e8608d729469e8bd3918c6a6508ff238.ogg"},858:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/0ebd4bb53d11bac67bc0a1cd4321b7ca.ogg"},4925:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/1cd2d8607d1cc07fffb0c6c80ae5d861.ogg"},8918:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/e69faf0b341b445ef7c9ec17d85e54e5.ogg"},4979:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/f6a76876692cf26a36b0db609607c0db.ogg"},2208:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/fb97bcac12d459042162e5771c9ebfec.ogg"},3442:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/38fe51072aff902f0b7dcdabba101be5.ogg"},2953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n.p+"sounds/2b4f800f09d18bf6464475937f25a6e1.ogg"},8679:(e,t,n)=>{"use strict";var r=n(1296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var o=p(n);o&&o!==m&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=u(t),h=u(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||h&&h[v]||l&&l[v])){var y=f(n,v);try{s(t,v,y)}catch(e){}}}}return t}},6103:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case f:case g:case h:case u:return e;default:return t}}case o:return t}}}function S(e){return w(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=h,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||w(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===f},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===h},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===l},t.isStrictMode=function(e){return w(e)===i},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=w},1296:(e,t,n)=>{"use strict";e.exports=n(6103)},1766:(e,t,n)=>{var r;!function(){"use strict";var o=function(){this.init()};o.prototype={init:function(){var e=this||a;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var t=this||a;if(e=parseFloat(e),t.ctx||p(),void 0!==e&&e>=0&&e<=1){if(t._volume=e,t._muted)return t;t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e,a.ctx.currentTime);for(var n=0;n<t._howls.length;n++)if(!t._howls[n]._webAudio)for(var r=t._howls[n]._getSoundIds(),o=0;o<r.length;o++){var i=t._howls[n]._soundById(r[o]);i&&i._node&&(i._node.volume=i._volume*e)}return t}return t._volume},mute:function(e){var t=this||a;t.ctx||p(),t._muted=e,t.usingWebAudio&&t.masterGain.gain.setValueAtTime(e?0:t._volume,a.ctx.currentTime);for(var n=0;n<t._howls.length;n++)if(!t._howls[n]._webAudio)for(var r=t._howls[n]._getSoundIds(),o=0;o<r.length;o++){var i=t._howls[n]._soundById(r[o]);i&&i._node&&(i._node.muted=!!e||i._muted)}return t},stop:function(){for(var e=this||a,t=0;t<e._howls.length;t++)e._howls[t].stop();return e},unload:function(){for(var e=this||a,t=e._howls.length-1;t>=0;t--)e._howls[t].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,p()),e},codecs:function(e){return(this||a)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||a;if(e.state=e.ctx&&e.ctx.state||"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{void 0===(new Audio).oncanplaythrough&&(e._canPlayEvent="canplay")}catch(t){e.noAudio=!0}else e.noAudio=!0;try{(new Audio).muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||a,t=null;try{t="undefined"!=typeof Audio?new Audio:null}catch(t){return e}if(!t||"function"!=typeof t.canPlayType)return e;var n=t.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),o=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(o||!n&&!t.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!n,opus:!!t.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!t.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!(t.canPlayType('audio/wav; codecs="1"')||t.canPlayType("audio/wav")).replace(/^no$/,""),aac:!!t.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!t.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(t.canPlayType("audio/x-m4a;")||t.canPlayType("audio/m4a;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),m4b:!!(t.canPlayType("audio/x-m4b;")||t.canPlayType("audio/m4b;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(t.canPlayType("audio/x-mp4;")||t.canPlayType("audio/mp4;")||t.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!t.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!t.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(t.canPlayType("audio/x-flac;")||t.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||a;if(!e._audioUnlocked&&e.ctx){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(;e._html5AudioPool.length<e.html5PoolSize;)try{var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}catch(n){e.noAudio=!0;break}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),i=0;i<a.length;i++){var l=e._howls[o]._soundById(a[i]);l&&l._node&&!l._node._unlocked&&(l._node._unlocked=!0,l._node.load())}e._autoResume();var u=e.ctx.createBufferSource();u.buffer=e._scratchBuffer,u.connect(e.ctx.destination),void 0===u.start?u.noteOn(0):u.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),u.onended=function(){u.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||a;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var t=(new Audio).play();return t&&"undefined"!=typeof Promise&&(t instanceof Promise||"function"==typeof t.then)&&t.catch((function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")})),new Audio},_releaseHtml5Audio:function(e){var t=this||a;return e._unlocked&&t._html5AudioPool.push(e),t},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&a.usingWebAudio){for(var t=0;t<e._howls.length;t++)if(e._howls[t]._webAudio)for(var n=0;n<e._howls[t]._sounds.length;n++)if(!e._howls[t]._sounds[n]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout((function(){if(e.autoSuspend){e._suspendTimer=null,e.state="suspending";var t=function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())};e.ctx.suspend().then(t,t)}}),3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&a.usingWebAudio)return"running"===e.state&&"interrupted"!==e.ctx.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state||"running"===e.state&&"interrupted"===e.ctx.state?(e.ctx.resume().then((function(){e.state="running";for(var t=0;t<e._howls.length;t++)e._howls[t]._emit("resume")})),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var a=new o,i=function(e){e.src&&0!==e.src.length?this.init(e):console.error("An array of source files must be passed with any new Howl.")};i.prototype={init:function(e){var t=this;return a.ctx||p(),t._autoplay=e.autoplay||!1,t._format="string"!=typeof e.format?e.format:[e.format],t._html5=e.html5||!1,t._muted=e.mute||!1,t._loop=e.loop||!1,t._pool=e.pool||5,t._preload="boolean"!=typeof e.preload&&"metadata"!==e.preload||e.preload,t._rate=e.rate||1,t._sprite=e.sprite||{},t._src="string"!=typeof e.src?e.src:[e.src],t._volume=void 0!==e.volume?e.volume:1,t._xhr={method:e.xhr&&e.xhr.method?e.xhr.method:"GET",headers:e.xhr&&e.xhr.headers?e.xhr.headers:null,withCredentials:!(!e.xhr||!e.xhr.withCredentials)&&e.xhr.withCredentials},t._duration=0,t._state="unloaded",t._sounds=[],t._endTimers={},t._queue=[],t._playLock=!1,t._onend=e.onend?[{fn:e.onend}]:[],t._onfade=e.onfade?[{fn:e.onfade}]:[],t._onload=e.onload?[{fn:e.onload}]:[],t._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],t._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],t._onpause=e.onpause?[{fn:e.onpause}]:[],t._onplay=e.onplay?[{fn:e.onplay}]:[],t._onstop=e.onstop?[{fn:e.onstop}]:[],t._onmute=e.onmute?[{fn:e.onmute}]:[],t._onvolume=e.onvolume?[{fn:e.onvolume}]:[],t._onrate=e.onrate?[{fn:e.onrate}]:[],t._onseek=e.onseek?[{fn:e.onseek}]:[],t._onunlock=e.onunlock?[{fn:e.onunlock}]:[],t._onresume=[],t._webAudio=a.usingWebAudio&&!t._html5,void 0!==a.ctx&&a.ctx&&a.autoUnlock&&a._unlockAudio(),a._howls.push(t),t._autoplay&&t._queue.push({event:"play",action:function(){t.play()}}),t._preload&&"none"!==t._preload&&t.load(),t},load:function(){var e=this,t=null;if(a.noAudio)e._emit("loaderror",null,"No audio support.");else{"string"==typeof e._src&&(e._src=[e._src]);for(var n=0;n<e._src.length;n++){var r,o;if(e._format&&e._format[n])r=e._format[n];else{if("string"!=typeof(o=e._src[n])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}(r=/^data:audio\/([^;,]+);/i.exec(o))||(r=/\.([^.]+)$/.exec(o.split("?",1)[0])),r&&(r=r[1].toLowerCase())}if(r||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),r&&a.codecs(r)){t=e._src[n];break}}if(t)return e._src=t,e._state="loading","https:"===window.location.protocol&&"http:"===t.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new l(e),e._webAudio&&s(e),e;e._emit("loaderror",null,"No codec support for selected audio sources.")}},play:function(e,t){var n=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===n._state&&!n._sprite[e])return null;if(void 0===e&&(e="__default",!n._playLock)){for(var o=0,i=0;i<n._sounds.length;i++)n._sounds[i]._paused&&!n._sounds[i]._ended&&(o++,r=n._sounds[i]._id);1===o?e=null:r=null}}var l=r?n._soundById(r):n._inactiveSound();if(!l)return null;if(r&&!e&&(e=l._sprite||"__default"),"loaded"!==n._state){l._sprite=e,l._ended=!1;var u=l._id;return n._queue.push({event:"play",action:function(){n.play(u)}}),u}if(r&&!l._paused)return t||n._loadQueue("play"),l._id;n._webAudio&&a._autoResume();var s=Math.max(0,l._seek>0?l._seek:n._sprite[e][0]/1e3),c=Math.max(0,(n._sprite[e][0]+n._sprite[e][1])/1e3-s),d=1e3*c/Math.abs(l._rate),f=n._sprite[e][0]/1e3,p=(n._sprite[e][0]+n._sprite[e][1])/1e3;l._sprite=e,l._ended=!1;var m=function(){l._paused=!1,l._seek=s,l._start=f,l._stop=p,l._loop=!(!l._loop&&!n._sprite[e][2])};if(!(s>=p)){var h=l._node;if(n._webAudio){var g=function(){n._playLock=!1,m(),n._refreshBuffer(l);var e=l._muted||n._muted?0:l._volume;h.gain.setValueAtTime(e,a.ctx.currentTime),l._playStart=a.ctx.currentTime,void 0===h.bufferSource.start?l._loop?h.bufferSource.noteGrainOn(0,s,86400):h.bufferSource.noteGrainOn(0,s,c):l._loop?h.bufferSource.start(0,s,86400):h.bufferSource.start(0,s,c),d!==1/0&&(n._endTimers[l._id]=setTimeout(n._ended.bind(n,l),d)),t||setTimeout((function(){n._emit("play",l._id),n._loadQueue()}),0)};"running"===a.state&&"interrupted"!==a.ctx.state?g():(n._playLock=!0,n.once("resume",g),n._clearTimer(l._id))}else{var v=function(){h.currentTime=s,h.muted=l._muted||n._muted||a._muted||h.muted,h.volume=l._volume*a.volume(),h.playbackRate=l._rate;try{var r=h.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(n._playLock=!0,m(),r.then((function(){n._playLock=!1,h._unlocked=!0,t||(n._emit("play",l._id),n._loadQueue())})).catch((function(){n._playLock=!1,n._emit("playerror",l._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),l._ended=!0,l._paused=!0}))):t||(n._playLock=!1,m(),n._emit("play",l._id),n._loadQueue()),h.playbackRate=l._rate,h.paused)return void n._emit("playerror",l._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||l._loop?n._endTimers[l._id]=setTimeout(n._ended.bind(n,l),d):(n._endTimers[l._id]=function(){n._ended(l),h.removeEventListener("ended",n._endTimers[l._id],!1)},h.addEventListener("ended",n._endTimers[l._id],!1))}catch(e){n._emit("playerror",l._id,e)}};"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"===h.src&&(h.src=n._src,h.load());var y=window&&window.ejecta||!h.readyState&&a._navigator.isCocoonJS;if(h.readyState>=3||y)v();else{n._playLock=!0;var b=function(){v(),h.removeEventListener(a._canPlayEvent,b,!1)};h.addEventListener(a._canPlayEvent,b,!1),n._clearTimer(l._id)}}return l._id}n._ended(l)},pause:function(e){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"pause",action:function(){t.pause(e)}}),t;for(var n=t._getSoundIds(e),r=0;r<n.length;r++){t._clearTimer(n[r]);var o=t._soundById(n[r]);if(o&&!o._paused&&(o._seek=t.seek(n[r]),o._rateSeek=0,o._paused=!0,t._stopFade(n[r]),o._node))if(t._webAudio){if(!o._node.bufferSource)continue;void 0===o._node.bufferSource.stop?o._node.bufferSource.noteOff(0):o._node.bufferSource.stop(0),t._cleanBuffer(o._node)}else isNaN(o._node.duration)&&o._node.duration!==1/0||o._node.pause();arguments[1]||t._emit("pause",o?o._id:null)}return t},stop:function(e,t){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"stop",action:function(){n.stop(e)}}),n;for(var r=n._getSoundIds(e),o=0;o<r.length;o++){n._clearTimer(r[o]);var a=n._soundById(r[o]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,n._stopFade(r[o]),a._node&&(n._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),n._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause(),a._node.duration===1/0&&n._clearSound(a._node))),t||n._emit("stop",a._id))}return n},mute:function(e,t){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"mute",action:function(){n.mute(e,t)}}),n;if(void 0===t){if("boolean"!=typeof e)return n._muted;n._muted=e}for(var r=n._getSoundIds(t),o=0;o<r.length;o++){var i=n._soundById(r[o]);i&&(i._muted=e,i._interval&&n._stopFade(i._id),n._webAudio&&i._node?i._node.gain.setValueAtTime(e?0:i._volume,a.ctx.currentTime):i._node&&(i._node.muted=!!a._muted||e),n._emit("mute",i._id))}return n},volume:function(){var e,t,n,r=this,o=arguments;if(0===o.length)return r._volume;if(1===o.length||2===o.length&&void 0===o[1]){var i=r._getSoundIds(),l=i.indexOf(o[0]);l>=0?t=parseInt(o[0],10):e=parseFloat(o[0])}else o.length>=2&&(e=parseFloat(o[0]),t=parseInt(o[1],10));if(!(void 0!==e&&e>=0&&e<=1))return(n=t?r._soundById(t):r._sounds[0])?n._volume:0;if("loaded"!==r._state||r._playLock)return r._queue.push({event:"volume",action:function(){r.volume.apply(r,o)}}),r;void 0===t&&(r._volume=e),t=r._getSoundIds(t);for(var u=0;u<t.length;u++)(n=r._soundById(t[u]))&&(n._volume=e,o[2]||r._stopFade(t[u]),r._webAudio&&n._node&&!n._muted?n._node.gain.setValueAtTime(e,a.ctx.currentTime):n._node&&!n._muted&&(n._node.volume=e*a.volume()),r._emit("volume",n._id));return r},fade:function(e,t,n,r){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"fade",action:function(){o.fade(e,t,n,r)}}),o;e=Math.min(Math.max(0,parseFloat(e)),1),t=Math.min(Math.max(0,parseFloat(t)),1),n=parseFloat(n),o.volume(e,r);for(var i=o._getSoundIds(r),l=0;l<i.length;l++){var u=o._soundById(i[l]);if(u){if(r||o._stopFade(i[l]),o._webAudio&&!u._muted){var s=a.ctx.currentTime,c=s+n/1e3;u._volume=e,u._node.gain.setValueAtTime(e,s),u._node.gain.linearRampToValueAtTime(t,c)}o._startFadeInterval(u,e,t,n,i[l],void 0===r)}}return o},_startFadeInterval:function(e,t,n,r,o,a){var i=this,l=t,u=n-t,s=Math.abs(u/.01),c=Math.max(4,s>0?r/s:r),d=Date.now();e._fadeTo=n,e._interval=setInterval((function(){var o=(Date.now()-d)/r;d=Date.now(),l+=u*o,l=Math.round(100*l)/100,l=u<0?Math.max(n,l):Math.min(n,l),i._webAudio?e._volume=l:i.volume(l,e._id,!0),a&&(i._volume=l),(n<t&&l<=n||n>t&&l>=n)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,i.volume(n,e._id),i._emit("fade",e._id))}),c)},_stopFade:function(e){var t=this,n=t._soundById(e);return n&&n._interval&&(t._webAudio&&n._node.gain.cancelScheduledValues(a.ctx.currentTime),clearInterval(n._interval),n._interval=null,t.volume(n._fadeTo,e),n._fadeTo=null,t._emit("fade",e)),t},loop:function(){var e,t,n,r=this,o=arguments;if(0===o.length)return r._loop;if(1===o.length){if("boolean"!=typeof o[0])return!!(n=r._soundById(parseInt(o[0],10)))&&n._loop;e=o[0],r._loop=e}else 2===o.length&&(e=o[0],t=parseInt(o[1],10));for(var a=r._getSoundIds(t),i=0;i<a.length;i++)(n=r._soundById(a[i]))&&(n._loop=e,r._webAudio&&n._node&&n._node.bufferSource&&(n._node.bufferSource.loop=e,e&&(n._node.bufferSource.loopStart=n._start||0,n._node.bufferSource.loopEnd=n._stop)));return r},rate:function(){var e,t,n,r=this,o=arguments;if(0===o.length)t=r._sounds[0]._id;else if(1===o.length){var i=r._getSoundIds(),l=i.indexOf(o[0]);l>=0?t=parseInt(o[0],10):e=parseFloat(o[0])}else 2===o.length&&(e=parseFloat(o[0]),t=parseInt(o[1],10));if("number"!=typeof e)return(n=r._soundById(t))?n._rate:r._rate;if("loaded"!==r._state||r._playLock)return r._queue.push({event:"rate",action:function(){r.rate.apply(r,o)}}),r;void 0===t&&(r._rate=e),t=r._getSoundIds(t);for(var u=0;u<t.length;u++)if(n=r._soundById(t[u])){r.playing(t[u])&&(n._rateSeek=r.seek(t[u]),n._playStart=r._webAudio?a.ctx.currentTime:n._playStart),n._rate=e,r._webAudio&&n._node&&n._node.bufferSource?n._node.bufferSource.playbackRate.setValueAtTime(e,a.ctx.currentTime):n._node&&(n._node.playbackRate=e);var s=r.seek(t[u]),c=(r._sprite[n._sprite][0]+r._sprite[n._sprite][1])/1e3-s,d=1e3*c/Math.abs(n._rate);!r._endTimers[t[u]]&&n._paused||(r._clearTimer(t[u]),r._endTimers[t[u]]=setTimeout(r._ended.bind(r,n),d)),r._emit("rate",n._id)}return r},seek:function(){var e,t,n=this,r=arguments;if(0===r.length)t=n._sounds[0]._id;else if(1===r.length){var o=n._getSoundIds(),i=o.indexOf(r[0]);i>=0?t=parseInt(r[0],10):n._sounds.length&&(t=n._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),t=parseInt(r[1],10));if(void 0===t)return n;if("number"==typeof e&&("loaded"!==n._state||n._playLock))return n._queue.push({event:"seek",action:function(){n.seek.apply(n,r)}}),n;var l=n._soundById(t);if(l){if(!("number"==typeof e&&e>=0)){if(n._webAudio){var u=n.playing(t)?a.ctx.currentTime-l._playStart:0,s=l._rateSeek?l._rateSeek-l._seek:0;return l._seek+(s+u*Math.abs(l._rate))}return l._node.currentTime}var c=n.playing(t);c&&n.pause(t,!0),l._seek=e,l._ended=!1,n._clearTimer(t),n._webAudio||!l._node||isNaN(l._node.duration)||(l._node.currentTime=e);var d=function(){n._emit("seek",t),c&&n.play(t,!0)};if(c&&!n._webAudio){var f=function(){n._playLock?setTimeout(f,0):d()};setTimeout(f,0)}else d()}return n},playing:function(e){var t=this;if("number"==typeof e){var n=t._soundById(e);return!!n&&!n._paused}for(var r=0;r<t._sounds.length;r++)if(!t._sounds[r]._paused)return!0;return!1},duration:function(e){var t=this,n=t._duration,r=t._soundById(e);return r&&(n=t._sprite[r._sprite][1]/1e3),n},state:function(){return this._state},unload:function(){for(var e=this,t=e._sounds,n=0;n<t.length;n++)t[n]._paused||e.stop(t[n]._id),e._webAudio||(e._clearSound(t[n]._node),t[n]._node.removeEventListener("error",t[n]._errorFn,!1),t[n]._node.removeEventListener(a._canPlayEvent,t[n]._loadFn,!1),t[n]._node.removeEventListener("ended",t[n]._endFn,!1),a._releaseHtml5Audio(t[n]._node)),delete t[n]._node,e._clearTimer(t[n]._id);var r=a._howls.indexOf(e);r>=0&&a._howls.splice(r,1);var o=!0;for(n=0;n<a._howls.length;n++)if(a._howls[n]._src===e._src||e._src.indexOf(a._howls[n]._src)>=0){o=!1;break}return u&&o&&delete u[e._src],a.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,t,n,r){var o=this["_on"+e];return"function"==typeof t&&o.push(r?{id:n,fn:t,once:r}:{id:n,fn:t}),this},off:function(e,t,n){var r=this,o=r["_on"+e],a=0;if("number"==typeof t&&(n=t,t=null),t||n)for(a=0;a<o.length;a++){var i=n===o[a].id;if(t===o[a].fn&&i||!t&&i){o.splice(a,1);break}}else if(e)r["_on"+e]=[];else{var l=Object.keys(r);for(a=0;a<l.length;a++)0===l[a].indexOf("_on")&&Array.isArray(r[l[a]])&&(r[l[a]]=[])}return r},once:function(e,t,n){return this.on(e,t,n,1),this},_emit:function(e,t,n){for(var r=this,o=r["_on"+e],a=o.length-1;a>=0;a--)o[a].id&&o[a].id!==t&&"load"!==e||(setTimeout(function(e){e.call(this,t,n)}.bind(r,o[a].fn),0),o[a].once&&r.off(e,o[a].fn,o[a].id));return r._loadQueue(e),r},_loadQueue:function(e){var t=this;if(t._queue.length>0){var n=t._queue[0];n.event===e&&(t._queue.shift(),t._loadQueue()),e||n.action()}return t},_ended:function(e){var t=this,n=e._sprite;if(!t._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(t._ended.bind(t,e),100),t;var r=!(!e._loop&&!t._sprite[n][2]);if(t._emit("end",e._id),!t._webAudio&&r&&t.stop(e._id,!0).play(e._id),t._webAudio&&r){t._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=a.ctx.currentTime;var o=1e3*(e._stop-e._start)/Math.abs(e._rate);t._endTimers[e._id]=setTimeout(t._ended.bind(t,e),o)}return t._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,t._clearTimer(e._id),t._cleanBuffer(e._node),a._autoSuspend()),t._webAudio||r||t.stop(e._id,!0),t},_clearTimer:function(e){var t=this;if(t._endTimers[e]){if("function"!=typeof t._endTimers[e])clearTimeout(t._endTimers[e]);else{var n=t._soundById(e);n&&n._node&&n._node.removeEventListener("ended",t._endTimers[e],!1)}delete t._endTimers[e]}return t},_soundById:function(e){for(var t=this,n=0;n<t._sounds.length;n++)if(e===t._sounds[n]._id)return t._sounds[n];return null},_inactiveSound:function(){var e=this;e._drain();for(var t=0;t<e._sounds.length;t++)if(e._sounds[t]._ended)return e._sounds[t].reset();return new l(e)},_drain:function(){var e=this,t=e._pool,n=0,r=0;if(!(e._sounds.length<t)){for(r=0;r<e._sounds.length;r++)e._sounds[r]._ended&&n++;for(r=e._sounds.length-1;r>=0;r--){if(n<=t)return;e._sounds[r]._ended&&(e._webAudio&&e._sounds[r]._node&&e._sounds[r]._node.disconnect(0),e._sounds.splice(r,1),n--)}}},_getSoundIds:function(e){if(void 0===e){for(var t=[],n=0;n<this._sounds.length;n++)t.push(this._sounds[n]._id);return t}return[e]},_refreshBuffer:function(e){return e._node.bufferSource=a.ctx.createBufferSource(),e._node.bufferSource.buffer=u[this._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,a.ctx.currentTime),this},_cleanBuffer:function(e){var t=a._navigator&&a._navigator.vendor.indexOf("Apple")>=0;if(a._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=a._scratchBuffer}catch(e){}return e.bufferSource=null,this},_clearSound:function(e){/MSIE |Trident\//.test(a._navigator&&a._navigator.userAgent)||(e.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA")}};var l=function(e){this._parent=e,this.init()};l.prototype={init:function(){var e=this,t=e._parent;return e._muted=t._muted,e._loop=t._loop,e._volume=t._volume,e._rate=t._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++a._counter,t._sounds.push(e),e.create(),e},create:function(){var e=this,t=e._parent,n=a._muted||e._muted||e._parent._muted?0:e._volume;return t._webAudio?(e._node=void 0===a.ctx.createGain?a.ctx.createGainNode():a.ctx.createGain(),e._node.gain.setValueAtTime(n,a.ctx.currentTime),e._node.paused=!0,e._node.connect(a.masterGain)):a.noAudio||(e._node=a._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(a._canPlayEvent,e._loadFn,!1),e._endFn=e._endListener.bind(e),e._node.addEventListener("ended",e._endFn,!1),e._node.src=t._src,e._node.preload=!0===t._preload?"auto":t._preload,e._node.volume=n*a.volume(),e._node.load()),e},reset:function(){var e=this,t=e._parent;return e._muted=t._muted,e._loop=t._loop,e._volume=t._volume,e._rate=t._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++a._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,t=e._parent;t._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(t._sprite).length&&(t._sprite={__default:[0,1e3*t._duration]}),"loaded"!==t._state&&(t._state="loaded",t._emit("load"),t._loadQueue()),e._node.removeEventListener(a._canPlayEvent,e._loadFn,!1)},_endListener:function(){var e=this,t=e._parent;t._duration===1/0&&(t._duration=Math.ceil(10*e._node.duration)/10,t._sprite.__default[1]===1/0&&(t._sprite.__default[1]=1e3*t._duration),t._ended(e)),e._node.removeEventListener("ended",e._endFn,!1)}};var u={},s=function(e){var t=e._src;if(u[t])return e._duration=u[t].duration,void f(e);if(/^data:[^;]+;base64,/.test(t)){for(var n=atob(t.split(",")[1]),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);d(r.buffer,e)}else{var a=new XMLHttpRequest;a.open(e._xhr.method,t,!0),a.withCredentials=e._xhr.withCredentials,a.responseType="arraybuffer",e._xhr.headers&&Object.keys(e._xhr.headers).forEach((function(t){a.setRequestHeader(t,e._xhr.headers[t])})),a.onload=function(){var t=(a.status+"")[0];"0"===t||"2"===t||"3"===t?d(a.response,e):e._emit("loaderror",null,"Failed loading audio file with status: "+a.status+".")},a.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete u[t],e.load())},c(a)}},c=function(e){try{e.send()}catch(t){e.onerror()}},d=function(e,t){var n=function(){t._emit("loaderror",null,"Decoding audio data failed.")},r=function(e){e&&t._sounds.length>0?(u[t._src]=e,f(t,e)):n()};"undefined"!=typeof Promise&&1===a.ctx.decodeAudioData.length?a.ctx.decodeAudioData(e).then(r).catch(n):a.ctx.decodeAudioData(e,r,n)},f=function(e,t){t&&!e._duration&&(e._duration=t.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},p=function(){if(a.usingWebAudio){try{"undefined"!=typeof AudioContext?a.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?a.ctx=new webkitAudioContext:a.usingWebAudio=!1}catch(e){a.usingWebAudio=!1}a.ctx||(a.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(a._navigator&&a._navigator.platform),t=a._navigator&&a._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),n=t?parseInt(t[1],10):null;if(e&&n&&n<9){var r=/safari/.test(a._navigator&&a._navigator.userAgent.toLowerCase());a._navigator&&!r&&(a.usingWebAudio=!1)}a.usingWebAudio&&(a.masterGain=void 0===a.ctx.createGain?a.ctx.createGainNode():a.ctx.createGain(),a.masterGain.gain.setValueAtTime(a._muted?0:a._volume,a.ctx.currentTime),a.masterGain.connect(a.ctx.destination)),a._setup()}};void 0===(r=function(){return{Howler:a,Howl:i}}.apply(t,[]))||(e.exports=r),t.Howler=a,t.Howl=i,void 0!==n.g?(n.g.HowlerGlobal=o,n.g.Howler=a,n.g.Howl=i,n.g.Sound=l):"undefined"!=typeof window&&(window.HowlerGlobal=o,window.Howler=a,window.Howl=i,window.Sound=l)}(),function(){"use strict";var e;HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var t=this;if(!t.ctx||!t.ctx.listener)return t;for(var n=t._howls.length-1;n>=0;n--)t._howls[n].stereo(e);return t},HowlerGlobal.prototype.pos=function(e,t,n){var r=this;return r.ctx&&r.ctx.listener?(t="number"!=typeof t?r._pos[1]:t,n="number"!=typeof n?r._pos[2]:n,"number"!=typeof e?r._pos:(r._pos=[e,t,n],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,t,n,r,o,a){var i=this;if(!i.ctx||!i.ctx.listener)return i;var l=i._orientation;return t="number"!=typeof t?l[1]:t,n="number"!=typeof n?l[2]:n,r="number"!=typeof r?l[3]:r,o="number"!=typeof o?l[4]:o,a="number"!=typeof a?l[5]:a,"number"!=typeof e?l:(i._orientation=[e,t,n,r,o,a],void 0!==i.ctx.listener.forwardX?(i.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),i.ctx.listener.forwardY.setTargetAtTime(t,Howler.ctx.currentTime,.1),i.ctx.listener.forwardZ.setTargetAtTime(n,Howler.ctx.currentTime,.1),i.ctx.listener.upX.setTargetAtTime(r,Howler.ctx.currentTime,.1),i.ctx.listener.upY.setTargetAtTime(o,Howler.ctx.currentTime,.1),i.ctx.listener.upZ.setTargetAtTime(a,Howler.ctx.currentTime,.1)):i.ctx.listener.setOrientation(e,t,n,r,o,a),i)},Howl.prototype.init=(e=Howl.prototype.init,function(t){var n=this;return n._orientation=t.orientation||[1,0,0],n._stereo=t.stereo||null,n._pos=t.pos||null,n._pannerAttr={coneInnerAngle:void 0!==t.coneInnerAngle?t.coneInnerAngle:360,coneOuterAngle:void 0!==t.coneOuterAngle?t.coneOuterAngle:360,coneOuterGain:void 0!==t.coneOuterGain?t.coneOuterGain:0,distanceModel:void 0!==t.distanceModel?t.distanceModel:"inverse",maxDistance:void 0!==t.maxDistance?t.maxDistance:1e4,panningModel:void 0!==t.panningModel?t.panningModel:"HRTF",refDistance:void 0!==t.refDistance?t.refDistance:1,rolloffFactor:void 0!==t.rolloffFactor?t.rolloffFactor:1},n._onstereo=t.onstereo?[{fn:t.onstereo}]:[],n._onpos=t.onpos?[{fn:t.onpos}]:[],n._onorientation=t.onorientation?[{fn:t.onorientation}]:[],e.call(this,t)}),Howl.prototype.stereo=function(e,n){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(e,n)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===n){if("number"!=typeof e)return r._stereo;r._stereo=e,r._pos=[e,0,0]}for(var a=r._getSoundIds(n),i=0;i<a.length;i++){var l=r._soundById(a[i]);if(l){if("number"!=typeof e)return l._stereo;l._stereo=e,l._pos=[e,0,0],l._node&&(l._pannerAttr.panningModel="equalpower",l._panner&&l._panner.pan||t(l,o),"spatial"===o?void 0!==l._panner.positionX?(l._panner.positionX.setValueAtTime(e,Howler.ctx.currentTime),l._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),l._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):l._panner.setPosition(e,0,0):l._panner.pan.setValueAtTime(e,Howler.ctx.currentTime)),r._emit("stereo",l._id)}}return r},Howl.prototype.pos=function(e,n,r,o){var a=this;if(!a._webAudio)return a;if("loaded"!==a._state)return a._queue.push({event:"pos",action:function(){a.pos(e,n,r,o)}}),a;if(n="number"!=typeof n?0:n,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof e)return a._pos;a._pos=[e,n,r]}for(var i=a._getSoundIds(o),l=0;l<i.length;l++){var u=a._soundById(i[l]);if(u){if("number"!=typeof e)return u._pos;u._pos=[e,n,r],u._node&&(u._panner&&!u._panner.pan||t(u,"spatial"),void 0!==u._panner.positionX?(u._panner.positionX.setValueAtTime(e,Howler.ctx.currentTime),u._panner.positionY.setValueAtTime(n,Howler.ctx.currentTime),u._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):u._panner.setPosition(e,n,r)),a._emit("pos",u._id)}}return a},Howl.prototype.orientation=function(e,n,r,o){var a=this;if(!a._webAudio)return a;if("loaded"!==a._state)return a._queue.push({event:"orientation",action:function(){a.orientation(e,n,r,o)}}),a;if(n="number"!=typeof n?a._orientation[1]:n,r="number"!=typeof r?a._orientation[2]:r,void 0===o){if("number"!=typeof e)return a._orientation;a._orientation=[e,n,r]}for(var i=a._getSoundIds(o),l=0;l<i.length;l++){var u=a._soundById(i[l]);if(u){if("number"!=typeof e)return u._orientation;u._orientation=[e,n,r],u._node&&(u._panner||(u._pos||(u._pos=a._pos||[0,0,-.5]),t(u,"spatial")),void 0!==u._panner.orientationX?(u._panner.orientationX.setValueAtTime(e,Howler.ctx.currentTime),u._panner.orientationY.setValueAtTime(n,Howler.ctx.currentTime),u._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):u._panner.setOrientation(e,n,r)),a._emit("orientation",u._id)}}return a},Howl.prototype.pannerAttr=function(){var e,n,r,o=this,a=arguments;if(!o._webAudio)return o;if(0===a.length)return o._pannerAttr;if(1===a.length){if("object"!=typeof a[0])return(r=o._soundById(parseInt(a[0],10)))?r._pannerAttr:o._pannerAttr;e=a[0],void 0===n&&(e.pannerAttr||(e.pannerAttr={coneInnerAngle:e.coneInnerAngle,coneOuterAngle:e.coneOuterAngle,coneOuterGain:e.coneOuterGain,distanceModel:e.distanceModel,maxDistance:e.maxDistance,refDistance:e.refDistance,rolloffFactor:e.rolloffFactor,panningModel:e.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==e.pannerAttr.coneInnerAngle?e.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==e.pannerAttr.coneOuterAngle?e.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==e.pannerAttr.coneOuterGain?e.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==e.pannerAttr.distanceModel?e.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==e.pannerAttr.maxDistance?e.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==e.pannerAttr.refDistance?e.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==e.pannerAttr.rolloffFactor?e.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==e.pannerAttr.panningModel?e.pannerAttr.panningModel:o._panningModel})}else 2===a.length&&(e=a[0],n=parseInt(a[1],10));for(var i=o._getSoundIds(n),l=0;l<i.length;l++)if(r=o._soundById(i[l])){var u=r._pannerAttr;u={coneInnerAngle:void 0!==e.coneInnerAngle?e.coneInnerAngle:u.coneInnerAngle,coneOuterAngle:void 0!==e.coneOuterAngle?e.coneOuterAngle:u.coneOuterAngle,coneOuterGain:void 0!==e.coneOuterGain?e.coneOuterGain:u.coneOuterGain,distanceModel:void 0!==e.distanceModel?e.distanceModel:u.distanceModel,maxDistance:void 0!==e.maxDistance?e.maxDistance:u.maxDistance,refDistance:void 0!==e.refDistance?e.refDistance:u.refDistance,rolloffFactor:void 0!==e.rolloffFactor?e.rolloffFactor:u.rolloffFactor,panningModel:void 0!==e.panningModel?e.panningModel:u.panningModel};var s=r._panner;s?(s.coneInnerAngle=u.coneInnerAngle,s.coneOuterAngle=u.coneOuterAngle,s.coneOuterGain=u.coneOuterGain,s.distanceModel=u.distanceModel,s.maxDistance=u.maxDistance,s.refDistance=u.refDistance,s.rolloffFactor=u.rolloffFactor,s.panningModel=u.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),t(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var t=this,n=t._parent;t._orientation=n._orientation,t._stereo=n._stereo,t._pos=n._pos,t._pannerAttr=n._pannerAttr,e.call(this),t._stereo?n.stereo(t._stereo):t._pos&&n.pos(t._pos[0],t._pos[1],t._pos[2],t._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var t=this,n=t._parent;return t._orientation=n._orientation,t._stereo=n._stereo,t._pos=n._pos,t._pannerAttr=n._pannerAttr,t._stereo?n.stereo(t._stereo):t._pos?n.pos(t._pos[0],t._pos[1],t._pos[2],t._id):t._panner&&(t._panner.disconnect(0),t._panner=void 0,n._refreshBuffer(t)),e.call(this)}}(Sound.prototype.reset);var t=function(e,t){"spatial"===(t=t||"spatial")?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}()},8172:(e,t,n)=>{"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw Error("[Immer] minified error nr: "+e+(n.length?" "+n.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function o(e){return!!e&&!!e[J]}function a(e){return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&Function.toString.call(n)===te}(e)||Array.isArray(e)||!!e[X]||!!e.constructor[X]||p(e)||m(e))}function i(e){return o(e)||r(23,e),e[J].t}function l(e,t,n){void 0===n&&(n=!1),0===u(e)?(n?Object.keys:ne)(e).forEach((function(r){n&&"symbol"==typeof r||t(r,e[r],e)})):e.forEach((function(n,r){return t(r,n,e)}))}function u(e){var t=e[J];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:p(e)?2:m(e)?3:0}function s(e,t){return 2===u(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function c(e,t){return 2===u(e)?e.get(t):e[t]}function d(e,t,n){var r=u(e);2===r?e.set(t,n):3===r?(e.delete(t),e.add(n)):e[t]=n}function f(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}function p(e){return K&&e instanceof Map}function m(e){return q&&e instanceof Set}function h(e){return e.o||e.t}function g(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=re(e);delete t[J];for(var n=ne(t),r=0;r<n.length;r++){var o=n[r],a=t[o];!1===a.writable&&(a.writable=!0,a.configurable=!0),(a.get||a.set)&&(t[o]={configurable:!0,writable:!0,enumerable:a.enumerable,value:e[o]})}return Object.create(Object.getPrototypeOf(e),t)}function v(e,t){return void 0===t&&(t=!1),b(e)||o(e)||!a(e)||(u(e)>1&&(e.set=e.add=e.clear=e.delete=y),Object.freeze(e),t&&l(e,(function(e,t){return v(t,!0)}),!0)),e}function y(){r(2)}function b(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function _(e){var t=oe[e];return t||r(18,e),t}function w(e,t){oe[e]||(oe[e]=t)}function S(){return U}function E(e,t){t&&(_("Patches"),e.u=[],e.s=[],e.v=t)}function x(e){k(e),e.p.forEach(C),e.p=null}function k(e){e===U&&(U=e.l)}function P(e){return U={p:[],l:U,h:e,m:!0,_:0}}function C(e){var t=e[J];0===t.i||1===t.i?t.j():t.g=!0}function V(e,t){t._=t.p.length;var n=t.p[0],o=void 0!==e&&e!==n;return t.h.O||_("ES5").S(t,e,o),o?(n[J].P&&(x(t),r(4)),a(e)&&(e=O(t,e),t.l||L(t,e)),t.u&&_("Patches").M(n[J],e,t.u,t.s)):e=O(t,n,[]),x(t),t.u&&t.v(t.u,t.s),e!==Y?e:void 0}function O(e,t,n){if(b(t))return t;var r=t[J];if(!r)return l(t,(function(o,a){return A(e,r,t,o,a,n)}),!0),t;if(r.A!==e)return t;if(!r.P)return L(e,r.t,!0),r.t;if(!r.I){r.I=!0,r.A._--;var o=4===r.i||5===r.i?r.o=g(r.k):r.o;l(3===r.i?new Set(o):o,(function(t,a){return A(e,r,o,t,a,n)})),L(e,o,!1),n&&e.u&&_("Patches").R(r,n,e.u,e.s)}return r.o}function A(e,t,n,r,i,l){if(o(i)){var u=O(e,i,l&&t&&3!==t.i&&!s(t.D,r)?l.concat(r):void 0);if(d(n,r,u),!o(u))return;e.m=!1}if(a(i)&&!b(i)){if(!e.h.F&&e._<1)return;O(e,i),t&&t.A.l||L(e,i)}}function L(e,t,n){void 0===n&&(n=!1),e.h.F&&e.m&&v(t,n)}function F(e,t){var n=e[J];return(n?h(n):e)[t]}function M(e,t){if(t in e)for(var n=Object.getPrototypeOf(e);n;){var r=Object.getOwnPropertyDescriptor(n,t);if(r)return r;n=Object.getPrototypeOf(n)}}function T(e){e.P||(e.P=!0,e.l&&T(e.l))}function D(e){e.o||(e.o=g(e.t))}function I(e,t,n){var r=p(t)?_("MapSet").N(t,n):m(t)?_("MapSet").T(t,n):e.O?function(e,t){var n=Array.isArray(e),r={i:n?1:0,A:t?t.A:S(),P:!1,I:!1,D:{},l:t,t:e,k:null,o:null,j:null,C:!1},o=r,a=ae;n&&(o=[r],a=ie);var i=Proxy.revocable(o,a),l=i.revoke,u=i.proxy;return r.k=u,r.j=l,u}(t,n):_("ES5").J(t,n);return(n?n.A:S()).p.push(r),r}function j(e){return o(e)||r(22,e),function e(t){if(!a(t))return t;var n,r=t[J],o=u(t);if(r){if(!r.P&&(r.i<4||!_("ES5").K(r)))return r.t;r.I=!0,n=R(t,o),r.I=!1}else n=R(t,o);return l(n,(function(t,o){r&&c(r.t,t)===o||d(n,t,e(o))})),3===o?new Set(n):n}(e)}function R(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return g(e)}function N(){function e(e,t){var n=a[e];return n?n.enumerable=t:a[e]=n={configurable:!0,enumerable:t,get:function(){var t=this[J];return ae.get(t,e)},set:function(t){var n=this[J];ae.set(n,e,t)}},n}function t(e){for(var t=e.length-1;t>=0;t--){var o=e[t][J];if(!o.P)switch(o.i){case 5:r(o)&&T(o);break;case 4:n(o)&&T(o)}}}function n(e){for(var t=e.t,n=e.k,r=ne(n),o=r.length-1;o>=0;o--){var a=r[o];if(a!==J){var i=t[a];if(void 0===i&&!s(t,a))return!0;var l=n[a],u=l&&l[J];if(u?u.t!==i:!f(l,i))return!0}}var c=!!t[J];return r.length!==ne(t).length+(c?0:1)}function r(e){var t=e.k;if(t.length!==e.t.length)return!0;var n=Object.getOwnPropertyDescriptor(t,t.length-1);return!(!n||n.get)}var a={};w("ES5",{J:function(t,n){var r=Array.isArray(t),o=function(t,n){if(t){for(var r=Array(n.length),o=0;o<n.length;o++)Object.defineProperty(r,""+o,e(o,!0));return r}var a=re(n);delete a[J];for(var i=ne(a),l=0;l<i.length;l++){var u=i[l];a[u]=e(u,t||!!a[u].enumerable)}return Object.create(Object.getPrototypeOf(n),a)}(r,t),a={i:r?5:4,A:n?n.A:S(),P:!1,I:!1,D:{},l:n,t,k:o,o:null,g:!1,C:!1};return Object.defineProperty(o,J,{value:a,writable:!0}),o},S:function(e,n,a){a?o(n)&&n[J].A===e&&t(e.p):(e.u&&function e(t){if(t&&"object"==typeof t){var n=t[J];if(n){var o=n.t,a=n.k,i=n.D,u=n.i;if(4===u)l(a,(function(t){t!==J&&(void 0!==o[t]||s(o,t)?i[t]||e(a[t]):(i[t]=!0,T(n)))})),l(o,(function(e){void 0!==a[e]||s(a,e)||(i[e]=!1,T(n))}));else if(5===u){if(r(n)&&(T(n),i.length=!0),a.length<o.length)for(var c=a.length;c<o.length;c++)i[c]=!1;else for(var d=o.length;d<a.length;d++)i[d]=!0;for(var f=Math.min(a.length,o.length),p=0;p<f;p++)void 0===i[p]&&e(a[p])}}}}(e.p[0]),t(e.p))},K:function(e){return 4===e.i?n(e):r(e)}})}function z(){function e(t){if(!a(t))return t;if(Array.isArray(t))return t.map(e);if(p(t))return new Map(Array.from(t.entries()).map((function(t){return[t[0],e(t[1])]})));if(m(t))return new Set(Array.from(t).map(e));var n=Object.create(Object.getPrototypeOf(t));for(var r in t)n[r]=e(t[r]);return s(t,X)&&(n[X]=t[X]),n}function t(t){return o(t)?e(t):t}var n="add";w("Patches",{$:function(t,o){return o.forEach((function(o){for(var a=o.path,i=o.op,l=t,s=0;s<a.length-1;s++){var d=u(l),f=a[s];0!==d&&1!==d||"__proto__"!==f&&"constructor"!==f||r(24),"function"==typeof l&&"prototype"===f&&r(24),"object"!=typeof(l=c(l,f))&&r(15,a.join("/"))}var p=u(l),m=e(o.value),h=a[a.length-1];switch(i){case"replace":switch(p){case 2:return l.set(h,m);case 3:r(16);default:return l[h]=m}case n:switch(p){case 1:return l.splice(h,0,m);case 2:return l.set(h,m);case 3:return l.add(m);default:return l[h]=m}case"remove":switch(p){case 1:return l.splice(h,1);case 2:return l.delete(h);case 3:return l.delete(o.value);default:return delete l[h]}default:r(17,i)}})),t},R:function(e,r,o,a){switch(e.i){case 0:case 4:case 2:return function(e,r,o,a){var i=e.t,u=e.o;l(e.D,(function(e,l){var d=c(i,e),f=c(u,e),p=l?s(i,e)?"replace":n:"remove";if(d!==f||"replace"!==p){var m=r.concat(e);o.push("remove"===p?{op:p,path:m}:{op:p,path:m,value:f}),a.push(p===n?{op:"remove",path:m}:"remove"===p?{op:n,path:m,value:t(d)}:{op:"replace",path:m,value:t(d)})}}))}(e,r,o,a);case 5:case 1:return function(e,r,o,a){var i=e.t,l=e.D,u=e.o;if(u.length<i.length){var s=[u,i];i=s[0],u=s[1];var c=[a,o];o=c[0],a=c[1]}for(var d=0;d<i.length;d++)if(l[d]&&u[d]!==i[d]){var f=r.concat([d]);o.push({op:"replace",path:f,value:t(u[d])}),a.push({op:"replace",path:f,value:t(i[d])})}for(var p=i.length;p<u.length;p++){var m=r.concat([p]);o.push({op:n,path:m,value:t(u[p])})}i.length<u.length&&a.push({op:"replace",path:r.concat(["length"]),value:i.length})}(e,r,o,a);case 3:return function(e,t,r,o){var a=e.t,i=e.o,l=0;a.forEach((function(e){if(!i.has(e)){var a=t.concat([l]);r.push({op:"remove",path:a,value:e}),o.unshift({op:n,path:a,value:e})}l++})),l=0,i.forEach((function(e){if(!a.has(e)){var i=t.concat([l]);r.push({op:n,path:i,value:e}),o.unshift({op:"remove",path:i,value:e})}l++}))}(e,r,o,a)}},M:function(e,t,n,r){n.push({op:"replace",path:[],value:t}),r.push({op:"replace",path:[],value:e.t})}})}function B(){function e(e,t){function n(){this.constructor=e}i(e,t),e.prototype=(n.prototype=t.prototype,new n)}function t(e){e.o||(e.D=new Map,e.o=new Map(e.t))}function n(e){e.o||(e.o=new Set,e.t.forEach((function(t){if(a(t)){var n=I(e.A.h,t,e);e.p.set(t,n),e.o.add(n)}else e.o.add(t)})))}function o(e){e.g&&r(3,JSON.stringify(h(e)))}var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},u=function(){function n(e,t){return this[J]={i:2,l:t,A:t?t.A:S(),P:!1,I:!1,o:void 0,D:void 0,t:e,k:this,C:!1,g:!1},this}e(n,Map);var r=n.prototype;return Object.defineProperty(r,"size",{get:function(){return h(this[J]).size}}),r.has=function(e){return h(this[J]).has(e)},r.set=function(e,n){var r=this[J];return o(r),h(r).has(e)&&h(r).get(e)===n||(t(r),T(r),r.D.set(e,!0),r.o.set(e,n),r.D.set(e,!0)),this},r.delete=function(e){if(!this.has(e))return!1;var n=this[J];return o(n),t(n),T(n),n.D.set(e,!1),n.o.delete(e),!0},r.clear=function(){var e=this[J];o(e),h(e).size&&(t(e),T(e),e.D=new Map,l(e.t,(function(t){e.D.set(t,!1)})),e.o.clear())},r.forEach=function(e,t){var n=this;h(this[J]).forEach((function(r,o){e.call(t,n.get(o),o,n)}))},r.get=function(e){var n=this[J];o(n);var r=h(n).get(e);if(n.I||!a(r))return r;if(r!==n.t.get(e))return r;var i=I(n.A.h,r,n);return t(n),n.o.set(e,i),i},r.keys=function(){return h(this[J]).keys()},r.values=function(){var e,t=this,n=this.keys();return(e={})[ee]=function(){return t.values()},e.next=function(){var e=n.next();return e.done?e:{done:!1,value:t.get(e.value)}},e},r.entries=function(){var e,t=this,n=this.keys();return(e={})[ee]=function(){return t.entries()},e.next=function(){var e=n.next();if(e.done)return e;var r=t.get(e.value);return{done:!1,value:[e.value,r]}},e},r[ee]=function(){return this.entries()},n}(),s=function(){function t(e,t){return this[J]={i:3,l:t,A:t?t.A:S(),P:!1,I:!1,o:void 0,t:e,k:this,p:new Map,g:!1,C:!1},this}e(t,Set);var r=t.prototype;return Object.defineProperty(r,"size",{get:function(){return h(this[J]).size}}),r.has=function(e){var t=this[J];return o(t),t.o?!!t.o.has(e)||!(!t.p.has(e)||!t.o.has(t.p.get(e))):t.t.has(e)},r.add=function(e){var t=this[J];return o(t),this.has(e)||(n(t),T(t),t.o.add(e)),this},r.delete=function(e){if(!this.has(e))return!1;var t=this[J];return o(t),n(t),T(t),t.o.delete(e)||!!t.p.has(e)&&t.o.delete(t.p.get(e))},r.clear=function(){var e=this[J];o(e),h(e).size&&(n(e),T(e),e.o.clear())},r.values=function(){var e=this[J];return o(e),n(e),e.o.values()},r.entries=function(){var e=this[J];return o(e),n(e),e.o.entries()},r.keys=function(){return this.values()},r[ee]=function(){return this.values()},r.forEach=function(e,t){for(var n=this.values(),r=n.next();!r.done;)e.call(t,r.value,r.value,this),r=n.next()},t}();w("MapSet",{N:function(e,t){return new u(e,t)},T:function(e,t){return new s(e,t)}})}function H(){N(),B(),z()}function G(e){return e}function W(e){return e}n.r(t),n.d(t,{default:()=>ge,Immer:()=>le,applyPatches:()=>pe,castDraft:()=>G,castImmutable:()=>W,createDraft:()=>me,current:()=>j,enableAllPlugins:()=>H,enableES5:()=>N,enableMapSet:()=>B,enablePatches:()=>z,finishDraft:()=>he,freeze:()=>v,immerable:()=>X,isDraft:()=>o,isDraftable:()=>a,nothing:()=>Y,original:()=>i,produce:()=>se,produceWithPatches:()=>ce,setAutoFreeze:()=>de,setUseProxies:()=>fe});var Z,U,$="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),K="undefined"!=typeof Map,q="undefined"!=typeof Set,Q="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,Y=$?Symbol.for("immer-nothing"):((Z={})["immer-nothing"]=!0,Z),X=$?Symbol.for("immer-draftable"):"__$immer_draftable",J=$?Symbol.for("immer-state"):"__$immer_state",ee="undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator",te=""+Object.prototype.constructor,ne="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,re=Object.getOwnPropertyDescriptors||function(e){var t={};return ne(e).forEach((function(n){t[n]=Object.getOwnPropertyDescriptor(e,n)})),t},oe={},ae={get:function(e,t){if(t===J)return e;var n=h(e);if(!s(n,t))return function(e,t,n){var r,o=M(t,n);return o?"value"in o?o.value:null===(r=o.get)||void 0===r?void 0:r.call(e.k):void 0}(e,n,t);var r=n[t];return e.I||!a(r)?r:r===F(e.t,t)?(D(e),e.o[t]=I(e.A.h,r,e)):r},has:function(e,t){return t in h(e)},ownKeys:function(e){return Reflect.ownKeys(h(e))},set:function(e,t,n){var r=M(h(e),t);if(null==r?void 0:r.set)return r.set.call(e.k,n),!0;if(!e.P){var o=F(h(e),t),a=null==o?void 0:o[J];if(a&&a.t===n)return e.o[t]=n,e.D[t]=!1,!0;if(f(n,o)&&(void 0!==n||s(e.t,t)))return!0;D(e),T(e)}return e.o[t]===n&&"number"!=typeof n||(e.o[t]=n,e.D[t]=!0,!0)},deleteProperty:function(e,t){return void 0!==F(e.t,t)||t in e.t?(e.D[t]=!1,D(e),T(e)):delete e.D[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var n=h(e),r=Reflect.getOwnPropertyDescriptor(n,t);return r?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:r.enumerable,value:n[t]}:r},defineProperty:function(){r(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){r(12)}},ie={};l(ae,(function(e,t){ie[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),ie.deleteProperty=function(e,t){return ae.deleteProperty.call(this,e[0],t)},ie.set=function(e,t,n){return ae.set.call(this,e[0],t,n,e[0])};var le=function(){function e(e){var t=this;this.O=Q,this.F=!0,this.produce=function(e,n,o){if("function"==typeof e&&"function"!=typeof n){var i=n;n=e;var l=t;return function(e){var t=this;void 0===e&&(e=i);for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return l.produce(e,(function(e){var r;return(r=n).call.apply(r,[t,e].concat(o))}))}}var u;if("function"!=typeof n&&r(6),void 0!==o&&"function"!=typeof o&&r(7),a(e)){var s=P(t),c=I(t,e,void 0),d=!0;try{u=n(c),d=!1}finally{d?x(s):k(s)}return"undefined"!=typeof Promise&&u instanceof Promise?u.then((function(e){return E(s,o),V(e,s)}),(function(e){throw x(s),e})):(E(s,o),V(u,s))}if(!e||"object"!=typeof e){if((u=n(e))===Y)return;return void 0===u&&(u=e),t.F&&v(u,!0),u}r(21,e)},this.produceWithPatches=function(e,n){return"function"==typeof e?function(n){for(var r=arguments.length,o=Array(r>1?r-1:0),a=1;a<r;a++)o[a-1]=arguments[a];return t.produceWithPatches(n,(function(t){return e.apply(void 0,[t].concat(o))}))}:[t.produce(e,n,(function(e,t){r=e,o=t})),r,o];var r,o},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){a(e)||r(8),o(e)&&(e=j(e));var t=P(this),n=I(this,e,void 0);return n[J].C=!0,k(t),n},t.finishDraft=function(e,t){var n=(e&&e[J]).A;return E(n,t),V(void 0,n)},t.setAutoFreeze=function(e){this.F=e},t.setUseProxies=function(e){e&&!Q&&r(20),this.O=e},t.applyPatches=function(e,t){var n;for(n=t.length-1;n>=0;n--){var r=t[n];if(0===r.path.length&&"replace"===r.op){e=r.value;break}}var a=_("Patches").$;return o(e)?a(e,t):this.produce(e,(function(e){return a(e,t.slice(n+1))}))},e}(),ue=new le,se=ue.produce,ce=ue.produceWithPatches.bind(ue),de=ue.setAutoFreeze.bind(ue),fe=ue.setUseProxies.bind(ue),pe=ue.applyPatches.bind(ue),me=ue.createDraft.bind(ue),he=ue.finishDraft.bind(ue);const ge=se},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,l,u=o(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(u[l[d]]=i[l[d]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function a(){}a.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:a,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),a=n(3840);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function g(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(h,e)||!p.call(m,e)&&(f.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=60103,E=60106,x=60107,k=60108,P=60114,C=60109,V=60110,O=60112,A=60113,L=60120,F=60115,M=60116,T=60121,D=60128,I=60129,j=60130,R=60131;if("function"==typeof Symbol&&Symbol.for){var N=Symbol.for;S=N("react.element"),E=N("react.portal"),x=N("react.fragment"),k=N("react.strict_mode"),P=N("react.profiler"),C=N("react.provider"),V=N("react.context"),O=N("react.forward_ref"),A=N("react.suspense"),L=N("react.suspense_list"),F=N("react.memo"),M=N("react.lazy"),T=N("react.block"),N("react.scope"),D=N("react.opaque.id"),I=N("react.debug_trace_mode"),j=N("react.offscreen"),R=N("react.legacy_hidden")}var z,B="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function G(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var W=!1;function Z(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l])return"\n"+o[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?G(e):""}function U(e){switch(e.tag){case 5:return G(e.type);case 16:return G("Lazy");case 13:return G("Suspense");case 19:return G("SuspenseList");case 0:case 2:case 15:return Z(e.type,!1);case 11:return Z(e.type.render,!1);case 22:return Z(e.type._render,!1);case 1:return Z(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case E:return"Portal";case P:return"Profiler";case k:return"StrictMode";case A:return"Suspense";case L:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case V:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case F:return $(e.type);case T:return $(e._render);case M:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function K(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Y(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=K(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=K(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,K(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ae(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+K(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:K(n)}}function se(e,t){var n=K(t.value),r=K(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ge=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function _e(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=_e(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var Se=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(Se[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function ke(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Ce=null,Ve=null;function Oe(e){if(e=Jr(e)){if("function"!=typeof Pe)throw Error(i(280));var t=e.stateNode;t&&(t=to(t),Pe(e.stateNode,e.type,t))}}function Ae(e){Ce?Ve?Ve.push(e):Ve=[e]:Ce=e}function Le(){if(Ce){var e=Ce,t=Ve;if(Ve=Ce=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Fe(e,t){return e(t)}function Me(e,t,n,r,o){return e(t,n,r,o)}function Te(){}var De=Fe,Ie=!1,je=!1;function Re(){null===Ce&&null===Ve||(Te(),Le())}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var ze=!1;if(d)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(he){ze=!1}function He(e,t,n,r,o,a,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ge=!1,We=null,Ze=!1,Ue=null,$e={onError:function(e){Ge=!0,We=e}};function Ke(e,t,n,r,o,a,i,l,u){Ge=!1,We=null,He.apply($e,arguments)}function qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ye(e){if(qe(e)!==e)throw Error(i(188))}function Xe(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=qe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return Ye(o),e;if(a===r)return Ye(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l){for(u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,at=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function ht(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e=pt(t,n,r,o,a),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function gt(e){var t=Xr(e.target);if(null!==t){var n=qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){a.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==ut&&vt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function _t(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,bt)))}function wt(e){function t(t){return _t(t,e)}if(0<at.length){_t(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&_t(it,e),null!==lt&&_t(lt,e),null!==ut&&_t(ut,e),st.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function St(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:St("Animation","AnimationEnd"),animationiteration:St("Animation","AnimationIteration"),animationstart:St("Animation","AnimationStart"),transitionend:St("Transition","TransitionEnd")},xt={},kt={};function Pt(e){if(xt[e])return xt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in kt)return xt[e]=n[t];return e}d&&(kt=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Ct=Pt("animationend"),Vt=Pt("animationiteration"),Ot=Pt("animationstart"),At=Pt("transitionend"),Lt=new Map,Ft=new Map,Mt=["abort","abort",Ct,"animationEnd",Vt,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",At,"transitionEnd","waiting","waiting"];function Tt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Ft.set(r,t),Lt.set(r,o),s(o,[r])}}(0,a.unstable_now)();var Dt=8;function It(e){if(0!=(1&e))return Dt=15,1;if(0!=(2&e))return Dt=14,2;if(0!=(4&e))return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):0!=(32&e)?(Dt=11,32):0!=(t=192&e)?(Dt=10,t):0!=(256&e)?(Dt=9,256):0!=(t=3584&e)?(Dt=8,t):0!=(4096&e)?(Dt=7,4096):0!=(t=4186112&e)?(Dt=6,t):0!=(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):0!=(134217728&e)?(Dt=3,134217728):0!=(t=805306368&e)?(Dt=2,t):0!=(1073741824&e)?(Dt=1,1073741824):(Dt=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var r=0,o=0,a=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==a)r=a,o=Dt=15;else if(0!=(a=134217727&n)){var u=a&~i;0!==u?(r=It(u),o=Dt):0!=(l&=a)&&(r=It(l),o=Dt)}else 0!=(a=n&~i)?(r=It(a),o=Dt):0!==l&&(r=It(l),o=Dt);if(0===r)return 0;if(r=n&((0>(r=31-Gt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(It(t),o<=Dt)return t;Dt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Gt(t)),r|=e[n],t&=~o;return r}function Rt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Nt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=zt(24&~t))?Nt(10,t):e;case 10:return 0===(e=zt(192&~t))?Nt(8,t):e;case 8:return 0===(e=zt(3584&~t))&&0===(e=zt(4186112&~t))&&(e=512),e;case 2:return 0===(t=zt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function zt(e){return e&-e}function Bt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Gt(t)]=n}var Gt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Zt|0)|0},Wt=Math.log,Zt=Math.LN2,Ut=a.unstable_UserBlockingPriority,$t=a.unstable_runWithPriority,Kt=!0;function qt(e,t,n,r){Ie||Te();var o=Yt,a=Ie;Ie=!0;try{Me(o,e,t,n,r)}finally{(Ie=a)||Re()}}function Qt(e,t,n,r){$t(Ut,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){var o;if(Kt)if((o=0==(4&t))&&0<at.length&&-1<ft.indexOf(e))e=pt(null,e,t,n,r),at.push(e);else{var a=Xt(e,t,n,r);if(null===a)o&&mt(e,r);else{if(o){if(-1<ft.indexOf(e))return e=pt(a,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return it=ht(it,e,t,n,r,o),!0;case"dragenter":return lt=ht(lt,e,t,n,r,o),!0;case"mouseover":return ut=ht(ut,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return st.set(a,ht(st.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,ct.set(a,ht(ct.get(a)||null,e,t,n,r,o)),!0}return!1}(a,e,t,n,r))return;mt(e,r)}Lr(e,t,r,null,n)}}}function Xt(e,t,n,r){var o=ke(r);if(null!==(o=Xr(o))){var a=qe(o);if(null===a)o=null;else{var i=a.tag;if(13===i){if(null!==(o=Qe(a)))return o;o=null}else if(3===i){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;o=null}else a!==o&&(o=null)}}return Lr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=ln(dn),pn=o({},dn,{view:0,detail:0}),mn=ln(pn),hn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),gn=ln(hn),vn=ln(o({},hn,{dataTransfer:0})),yn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),_n=ln(o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),wn=ln(o({},dn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function Pn(){return kn}var Cn=ln(o({},pn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Vn=ln(o({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),An=ln(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=ln(o({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Fn=[9,13,27,32],Mn=d&&"CompositionEvent"in window,Tn=null;d&&"documentMode"in document&&(Tn=document.documentMode);var Dn=d&&"TextEvent"in window&&!Tn,In=d&&(!Mn||Tn&&8<Tn&&11>=Tn),jn=String.fromCharCode(32),Rn=!1;function Nn(e,t){switch(e){case"keyup":return-1!==Fn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Bn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Gn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Ae(r),0<(t=Mr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Zn=null,Un=null;function $n(e){kr(e,0)}function Kn(e){if(Y(eo(e)))return e}function qn(e,t){if("change"===e)return t}var Qn=!1;if(d){var Yn;if(d){var Xn="oninput"in document;if(!Xn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Xn="function"==typeof Jn.oninput}Yn=Xn}else Yn=!1;Qn=Yn&&(!document.documentMode||9<document.documentMode)}function er(){Zn&&(Zn.detachEvent("onpropertychange",tr),Un=Zn=null)}function tr(e){if("value"===e.propertyName&&Kn(Un)){var t=[];if(Wn(t,Un,e,ke(e)),e=$n,Ie)e(t);else{Ie=!0;try{Fe(e,t)}finally{Ie=!1,Re()}}}}function nr(e,t,n){"focusin"===e?(er(),Un=n,(Zn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Un)}function or(e,t){if("click"===e)return Kn(t)}function ar(e,t){if("input"===e||"change"===e)return Kn(t)}var ir="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ir(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ir(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=d&&"documentMode"in document&&11>=document.documentMode,hr=null,gr=null,vr=null,yr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;yr||null==hr||hr!==X(r)||(r="selectionStart"in(r=hr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Mr(gr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=hr)))}Tt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Tt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Tt(Mt,2);for(var _r="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),wr=0;wr<_r.length;wr++)Ft.set(_r[wr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Er=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,l,u,s){if(Ke.apply(this,arguments),Ge){if(!Ge)throw Error(i(198));var c=We;Ge=!1,We=null,Ze||(Ze=!0,Ue=c)}}(r,t,void 0,e),e.currentTarget=null}function kr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==a&&o.isPropagationStopped())break e;xr(o,l,s),a=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==a&&o.isPropagationStopped())break e;xr(o,l,s),a=u}}}if(Ze)throw e=Ue,Ze=!1,Ue=null,e}function Pr(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Ar(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){e[Cr]||(e[Cr]=!0,l.forEach((function(t){Er.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,a=n;if("selectionchange"===e&&9!==n.nodeType&&(a=n.ownerDocument),null!==r&&!t&&Er.has(e)){if("scroll"!==e)return;o|=2,a=r}var i=no(a),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(o|=4),Ar(a,e,o,t),i.add(l))}function Ar(e,t,n,r){var o=Ft.get(t);switch(void 0===o?2:o){case 0:o=qt;break;case 1:o=Qt;break;default:o=Yt}n=o.bind(null,t,n,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Lr(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=Xr(l)))return;if(5===(u=i.tag)||6===u){r=a=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(je)return e();je=!0;try{De(e,t,n)}finally{je=!1,Re()}}((function(){var r=a,o=ke(n),i=[];e:{var l=Lt.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Cn;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Ct:case Vt:case Ot:u=bn;break;case At:u=An;break;case"scroll":u=mn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Vn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=Ne(m,f))&&c.push(Fr(m,h,p))),d)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Xr(s)&&!s[Qr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Xr(s):null)&&(s!==(d=qe(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=gn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=Vn,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(h,m+"leave",u,n,o)).target=d,l.relatedTarget=p,h=null,Xr(o)===r&&((c=new c(f,m+"enter",s,n,o)).target=p,c.relatedTarget=d,h=c),d=h,u&&s)e:{for(f=s,m=0,p=c=u;p;p=Tr(p))m++;for(p=0,h=f;h;h=Tr(h))p++;for(;0<m-p;)c=Tr(c),m--;for(;0<p-m;)f=Tr(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Tr(c),f=Tr(f)}c=null}else c=null;null!==u&&Dr(i,l,u,c,!1),null!==s&&null!==d&&Dr(i,d,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=qn;else if(Gn(l))if(Qn)g=ar;else{g=rr;var v=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=or);switch(g&&(g=g(e,r))?Wn(i,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?eo(r):window,e){case"focusin":(Gn(v)||"true"===v.contentEditable)&&(hr=v,gr=r,vr=null);break;case"focusout":vr=gr=hr=null;break;case"mousedown":yr=!0;break;case"contextmenu":case"mouseup":case"dragend":yr=!1,br(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":br(i,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Bn?Nn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Bn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Bn&&(y=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Bn=!0)),0<(v=Mr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=zn(n)))&&(b.data=y))),(y=Dn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(Rn=!0,jn);case"textInput":return(e=t.data)===jn&&Rn?null:e;default:return null}}(e,n):function(e,t){if(Bn)return"compositionend"===e||!Mn&&Nn(e,t)?(e=nn(),tn=en=Jt=null,Bn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Mr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}kr(i,t)}))}function Fr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Mr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ne(e,n))&&r.unshift(Fr(e,a,o)),null!=(a=Ne(e,t))&&r.push(Fr(e,a,o))),e=e.return}return r}function Tr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Ne(n,a))&&i.unshift(Fr(n,u,l)):o||null!=(u=Ne(n,a))&&i.push(Fr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Ir(){}var jr=null,Rr=null;function Nr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function zr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Br="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Gr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Zr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Ur=0,$r=Math.random().toString(36).slice(2),Kr="__reactFiber$"+$r,qr="__reactProps$"+$r,Qr="__reactContainer$"+$r,Yr="__reactEvents$"+$r;function Xr(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Qr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Zr(e);null!==e;){if(n=e[Kr])return n;e=Zr(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Kr]||e[Qr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function to(e){return e[qr]||null}function no(e){var t=e[Yr];return void 0===t&&(t=e[Yr]=new Set),t}var ro=[],oo=-1;function ao(e){return{current:e}}function io(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=ao(uo),co=ao(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function mo(e){return null!=e.childContextTypes}function ho(){io(co),io(so)}function go(e,t,n){if(so.current!==uo)throw Error(i(168));lo(so,t),lo(co,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())if(!(a in e))throw Error(i(108,$(t)||"Unknown",a));return o({},n,r)}function yo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=vo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,io(co),io(so),lo(so,e)):io(co),lo(co,n)}var _o=null,wo=null,So=a.unstable_runWithPriority,Eo=a.unstable_scheduleCallback,xo=a.unstable_cancelCallback,ko=a.unstable_shouldYield,Po=a.unstable_requestPaint,Co=a.unstable_now,Vo=a.unstable_getCurrentPriorityLevel,Oo=a.unstable_ImmediatePriority,Ao=a.unstable_UserBlockingPriority,Lo=a.unstable_NormalPriority,Fo=a.unstable_LowPriority,Mo=a.unstable_IdlePriority,To={},Do=void 0!==Po?Po:function(){},Io=null,jo=null,Ro=!1,No=Co(),zo=1e4>No?Co:function(){return Co()-No};function Bo(){switch(Vo()){case Oo:return 99;case Ao:return 98;case Lo:return 97;case Fo:return 96;case Mo:return 95;default:throw Error(i(332))}}function Ho(e){switch(e){case 99:return Oo;case 98:return Ao;case 97:return Lo;case 96:return Fo;case 95:return Mo;default:throw Error(i(332))}}function Go(e,t){return e=Ho(e),So(e,t)}function Wo(e,t,n){return e=Ho(e),Eo(e,t,n)}function Zo(){if(null!==jo){var e=jo;jo=null,xo(e)}Uo()}function Uo(){if(!Ro&&null!==Io){Ro=!0;var e=0;try{var t=Io;Go(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),Eo(Oo,Zo),t}finally{Ro=!1}}}var $o=w.ReactCurrentBatchConfig;function Ko(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var qo=ao(null),Qo=null,Yo=null,Xo=null;function Jo(){Xo=Yo=Qo=null}function ea(e){var t=qo.current;io(qo),e.type._context._currentValue=t}function ta(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function na(e,t){Qo=e,Xo=Yo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Mi=!0),e.firstContext=null)}function ra(e,t){if(Xo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Yo){if(null===Qo)throw Error(i(308));Yo=t,Qo.dependencies={lanes:0,firstContext:t,responders:null}}else Yo=Yo.next=t;return e._currentValue}var oa=!1;function aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ia(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function la(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ua(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function sa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ca(e,t,n,r){var a=e.updateQueue;oa=!1;var i=a.firstBaseUpdate,l=a.lastBaseUpdate,u=a.shared.pending;if(null!==u){a.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=s)}}if(null!==i){for(f=a.baseState,l=0,d=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,u);break e}f=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,f,u):m))break e;f=o({},f,u);break e;case 2:oa=!0}}null!==i.callback&&(e.flags|=32,null===(u=a.effects)?a.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=p,s=f):d=d.next=p,l|=u;if(null===(i=i.next)){if(null===(u=a.shared.pending))break;i=u.next,u.next=null,a.lastBaseUpdate=u,a.shared.pending=null}}null===d&&(s=f),a.baseState=s,a.firstBaseUpdate=c,a.lastBaseUpdate=d,Dl|=l,e.lanes=l,e.memoizedState=f}}function da(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var fa=(new r.Component).refs;function pa(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ma={isMounted:function(e){return!!(e=e._reactInternals)&&qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=iu(),o=lu(e),a=la(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),ua(e,a),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=iu(),r=lu(e),o=la(n,r);o.tag=2,null!=t&&(o.callback=t),ua(e,o),uu(e,r,n)}};function ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,a))}function ga(e,t,n){var r=!1,o=uo,a=t.contextType;return"object"==typeof a&&null!==a?a=ra(a):(o=mo(t)?fo:so.current,a=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ma,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function va(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ma.enqueueReplaceState(t,t.state,null)}function ya(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=fa,aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=ra(a):(a=mo(t)?fo:so.current,o.context=po(e,a)),ca(e,n,o,r),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(pa(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ma.enqueueReplaceState(o,o.state,null),ca(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var ba=Array.isArray;function _a(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===fa&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function wa(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Sa(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=zu(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=_a(e,t,n),r.return=e,r):((r=Bu(n.type,n.key,n.props,null,e.mode,r)).ref=_a(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Zu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Bu(t.type,t.key,t.props,null,e.mode,n)).ref=_a(e,null,t),n.return=e,n;case E:return(t=Zu(t,e.mode,n)).return=e,t}if(ba(t)||H(t))return(t=Hu(t,e.mode,n,null)).return=e,t;wa(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?n.type===x?d(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(ba(n)||H(n))return null!==o?null:d(e,t,n,r,null);wa(e,n)}return null}function m(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return e=e.get(null===r.key?n:r.key)||null,r.type===x?d(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ba(r)||H(r))return d(t,e=e.get(n)||null,r,o,null);wa(t,r)}return null}function h(o,i,l,u){for(var s=null,c=null,d=i,h=i=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=p(o,d,l[h],u);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(o,d),i=a(v,i,h),null===c?s=v:c.sibling=v,c=v,d=g}if(h===l.length)return n(o,d),s;if(null===d){for(;h<l.length;h++)null!==(d=f(o,l[h],u))&&(i=a(d,i,h),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(o,d);h<l.length;h++)null!==(g=m(d,o,h,l[h],u))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),i=a(g,i,h),null===c?s=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),s}function g(o,l,u,s){var c=H(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var d=c=null,h=l,g=l=0,v=null,y=u.next();null!==h&&!y.done;g++,y=u.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=p(o,h,y.value,s);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(o,h),l=a(b,l,g),null===d?c=b:d.sibling=b,d=b,h=v}if(y.done)return n(o,h),c;if(null===h){for(;!y.done;g++,y=u.next())null!==(y=f(o,y.value,s))&&(l=a(y,l,g),null===d?c=y:d.sibling=y,d=y);return c}for(h=r(o,h);!y.done;g++,y=u.next())null!==(y=m(h,o,g,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=a(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(o,e)})),c}return function(e,r,a,u){var s="object"==typeof a&&null!==a&&a.type===x&&null===a.key;s&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case S:e:{for(c=a.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(a.type===x){n(e,s.sibling),(r=o(s,a.props.children)).return=e,e=r;break e}break;default:if(s.elementType===a.type){n(e,s.sibling),(r=o(s,a.props)).ref=_a(e,s,a),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}a.type===x?((r=Hu(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=Bu(a.type,a.key,a.props,null,e.mode,u)).ref=_a(e,r,a),u.return=e,e=u)}return l(e);case E:e:{for(s=a.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Zu(a,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,a)).return=e,e=r):(n(e,r),(r=Wu(a,e.mode,u)).return=e,e=r),l(e);if(ba(a))return h(e,r,a,u);if(H(a))return g(e,r,a,u);if(c&&wa(e,a),void 0===a&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,$(e.type)||"Component"))}return n(e,r)}}var Ea=Sa(!0),xa=Sa(!1),ka={},Pa=ao(ka),Ca=ao(ka),Va=ao(ka);function Oa(e){if(e===ka)throw Error(i(174));return e}function Aa(e,t){switch(lo(Va,t),lo(Ca,e),lo(Pa,ka),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}io(Pa),lo(Pa,t)}function La(){io(Pa),io(Ca),io(Va)}function Fa(e){Oa(Va.current);var t=Oa(Pa.current),n=pe(t,e.type);t!==n&&(lo(Ca,e),lo(Pa,n))}function Ma(e){Ca.current===e&&(io(Pa),io(Ca))}var Ta=ao(0);function Da(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ia=null,ja=null,Ra=!1;function Na(e,t){var n=Ru(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function za(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ba(e){if(Ra){var t=ja;if(t){var n=t;if(!za(e,t)){if(!(t=Wr(n.nextSibling))||!za(e,t))return e.flags=-1025&e.flags|2,Ra=!1,void(Ia=e);Na(Ia,n)}Ia=e,ja=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,Ra=!1,Ia=e}}function Ha(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ia=e}function Ga(e){if(e!==Ia)return!1;if(!Ra)return Ha(e),Ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!zr(t,e.memoizedProps))for(t=ja;t;)Na(e,t),t=Wr(t.nextSibling);if(Ha(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ja=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ja=null}}else ja=Ia?Wr(e.stateNode.nextSibling):null;return!0}function Wa(){ja=Ia=null,Ra=!1}var Za=[];function Ua(){for(var e=0;e<Za.length;e++)Za[e]._workInProgressVersionPrimary=null;Za.length=0}var $a=w.ReactCurrentDispatcher,Ka=w.ReactCurrentBatchConfig,qa=0,Qa=null,Ya=null,Xa=null,Ja=!1,ei=!1;function ti(){throw Error(i(321))}function ni(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ir(e[n],t[n]))return!1;return!0}function ri(e,t,n,r,o,a){if(qa=a,Qa=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$a.current=null===e||null===e.memoizedState?Oi:Ai,e=n(r,o),ei){a=0;do{if(ei=!1,!(25>a))throw Error(i(301));a+=1,Xa=Ya=null,t.updateQueue=null,$a.current=Li,e=n(r,o)}while(ei)}if($a.current=Vi,t=null!==Ya&&null!==Ya.next,qa=0,Xa=Ya=Qa=null,Ja=!1,t)throw Error(i(300));return e}function oi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Xa?Qa.memoizedState=Xa=e:Xa=Xa.next=e,Xa}function ai(){if(null===Ya){var e=Qa.alternate;e=null!==e?e.memoizedState:null}else e=Ya.next;var t=null===Xa?Qa.memoizedState:Xa.next;if(null!==t)Xa=t,Ya=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Ya=e).memoizedState,baseState:Ya.baseState,baseQueue:Ya.baseQueue,queue:Ya.queue,next:null},null===Xa?Qa.memoizedState=Xa=e:Xa=Xa.next=e}return Xa}function ii(e,t){return"function"==typeof t?t(e):t}function li(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Ya,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var l=o.next;o.next=a.next,a.next=l}r.baseQueue=o=a,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=a=null,s=o;do{var c=s.lane;if((qa&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var d={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=d,a=r):u=u.next=d,Qa.lanes|=c,Dl|=c}s=s.next}while(null!==s&&s!==o);null===u?a=r:u.next=l,ir(r,t.memoizedState)||(Mi=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ui(e){var t=ai(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{a=e(a,l.action),l=l.next}while(l!==o);ir(a,t.memoizedState)||(Mi=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function si(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(qa&e)===e)&&(t._workInProgressVersionPrimary=r,Za.push(t))),e)return n(t._source);throw Za.push(t),Error(i(350))}function ci(e,t,n,r){var o=Cl;if(null===o)throw Error(i(349));var a=t._getVersion,l=a(t._source),u=$a.current,s=u.useState((function(){return si(o,t,n)})),c=s[1],d=s[0];s=Xa;var f=e.memoizedState,p=f.refs,m=p.getSnapshot,h=f.source;f=f.subscribe;var g=Qa;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=a(t._source);if(!ir(l,e)){e=n(t._source),ir(d,e)||(c(e),e=lu(g),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,i=e;0<i;){var u=31-Gt(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(g);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ir(m,n)&&ir(h,t)&&ir(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:d}).dispatch=c=Ci.bind(null,Qa,e),s.queue=e,s.baseQueue=null,d=si(o,t,n),s.memoizedState=s.baseState=d),d}function di(e,t,n){return ci(ai(),e,t,n)}function fi(e){var t=oi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ii,lastRenderedState:e}).dispatch=Ci.bind(null,Qa,e),[t.memoizedState,e]}function pi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Qa.updateQueue)?(t={lastEffect:null},Qa.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function mi(e){return e={current:e},oi().memoizedState=e}function hi(){return ai().memoizedState}function gi(e,t,n,r){var o=oi();Qa.flags|=e,o.memoizedState=pi(1|t,n,void 0,void 0===r?null:r)}function vi(e,t,n,r){var o=ai();r=void 0===r?null:r;var a=void 0;if(null!==Ya){var i=Ya.memoizedState;if(a=i.destroy,null!==r&&ni(r,i.deps))return void pi(t,n,a,r)}Qa.flags|=e,o.memoizedState=pi(1|t,n,a,r)}function yi(e,t){return gi(516,4,e,t)}function bi(e,t){return vi(516,4,e,t)}function _i(e,t){return vi(4,2,e,t)}function wi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Si(e,t,n){return n=null!=n?n.concat([e]):null,vi(4,2,wi.bind(null,t,e),n)}function Ei(){}function xi(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function ki(e,t){var n=ai();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ni(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pi(e,t){var n=Bo();Go(98>n?98:n,(function(){e(!0)})),Go(97<n?97:n,(function(){var n=Ka.transition;Ka.transition=1;try{e(!1),t()}finally{Ka.transition=n}}))}function Ci(e,t,n){var r=iu(),o=lu(e),a={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?a.next=a:(a.next=i.next,i.next=a),t.pending=a,i=e.alternate,e===Qa||null!==i&&i===Qa)ei=Ja=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(a.eagerReducer=i,a.eagerState=u,ir(u,l))return}catch(e){}uu(e,o,r)}}var Vi={readContext:ra,useCallback:ti,useContext:ti,useEffect:ti,useImperativeHandle:ti,useLayoutEffect:ti,useMemo:ti,useReducer:ti,useRef:ti,useState:ti,useDebugValue:ti,useDeferredValue:ti,useTransition:ti,useMutableSource:ti,useOpaqueIdentifier:ti,unstable_isNewReconciler:!1},Oi={readContext:ra,useCallback:function(e,t){return oi().memoizedState=[e,void 0===t?null:t],e},useContext:ra,useEffect:yi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,gi(4,2,wi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return gi(4,2,e,t)},useMemo:function(e,t){var n=oi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ci.bind(null,Qa,e),[r.memoizedState,e]},useRef:mi,useState:fi,useDebugValue:Ei,useDeferredValue:function(e){var t=fi(e),n=t[0],r=t[1];return yi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=fi(!1),t=e[0];return mi(e=Pi.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oi();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ci(r,e,t,n)},useOpaqueIdentifier:function(){if(Ra){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Ur++).toString(36))),Error(i(355))})),n=fi(t)[1];return 0==(2&Qa.mode)&&(Qa.flags|=516,pi(5,(function(){n("r:"+(Ur++).toString(36))}),void 0,null)),t}return fi(t="r:"+(Ur++).toString(36)),t},unstable_isNewReconciler:!1},Ai={readContext:ra,useCallback:xi,useContext:ra,useEffect:bi,useImperativeHandle:Si,useLayoutEffect:_i,useMemo:ki,useReducer:li,useRef:hi,useState:function(){return li(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=li(ii),n=t[0],r=t[1];return bi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=li(ii)[0];return[hi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return li(ii)[0]},unstable_isNewReconciler:!1},Li={readContext:ra,useCallback:xi,useContext:ra,useEffect:bi,useImperativeHandle:Si,useLayoutEffect:_i,useMemo:ki,useReducer:ui,useRef:hi,useState:function(){return ui(ii)},useDebugValue:Ei,useDeferredValue:function(e){var t=ui(ii),n=t[0],r=t[1];return bi((function(){var t=Ka.transition;Ka.transition=1;try{r(e)}finally{Ka.transition=t}}),[e]),n},useTransition:function(){var e=ui(ii)[0];return[hi().current,e]},useMutableSource:di,useOpaqueIdentifier:function(){return ui(ii)[0]},unstable_isNewReconciler:!1},Fi=w.ReactCurrentOwner,Mi=!1;function Ti(e,t,n,r){t.child=null===e?xa(t,null,n,r):Ea(t,e.child,n,r)}function Di(e,t,n,r,o){n=n.render;var a=t.ref;return na(t,o),r=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Ti(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Ii(e,t,n,r,o,a){if(null===e){var i=n.type;return"function"!=typeof i||Nu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bu(n.type,null,r,t,t.mode,a)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ji(e,t,i,r,o,a))}return i=e.child,0==(o&a)&&(o=i.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Ji(e,t,a):(t.flags|=1,(e=zu(i,r)).ref=t.ref,e.return=t,t.child=e)}function ji(e,t,n,r,o,a){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Mi=!1,0==(a&o))return t.lanes=e.lanes,Ji(e,t,a);0!=(16384&e.flags)&&(Mi=!0)}return zi(e,t,n,r,a)}function Ri(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gu(0,n);else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gu(0,e),null;t.memoizedState={baseLanes:0},gu(0,null!==a?a.baseLanes:n)}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,gu(0,r);return Ti(e,t,o,n),t.child}function Ni(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function zi(e,t,n,r,o){var a=mo(n)?fo:so.current;return a=po(t,a),na(t,o),n=ri(e,t,n,r,a,o),null===e||Mi?(t.flags|=1,Ti(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Ji(e,t,o))}function Bi(e,t,n,r,o){if(mo(n)){var a=!0;yo(t)}else a=!1;if(na(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),ga(t,n,r),ya(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?ra(s):po(t,s=mo(n)?fo:so.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&va(t,i,r,s),oa=!1;var f=t.memoizedState;i.state=f,ca(t,r,i,o),u=t.memoizedState,l!==r||f!==u||co.current||oa?("function"==typeof c&&(pa(t,n,c,r),u=t.memoizedState),(l=oa||ha(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,ia(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Ko(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?ra(u):po(t,u=mo(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&va(t,i,r,u),oa=!1,f=t.memoizedState,i.state=f,ca(t,r,i,o);var m=t.memoizedState;l!==d||f!==m||co.current||oa?("function"==typeof p&&(pa(t,n,p,r),m=t.memoizedState),(s=oa||ha(t,n,s,r,f,m,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Hi(e,t,n,r,a,o)}function Hi(e,t,n,r,o,a){Ni(e,t);var i=0!=(64&t.flags);if(!r&&!i)return o&&bo(t,n,!1),Ji(e,t,a);r=t.stateNode,Fi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Ea(t,e.child,null,a),t.child=Ea(t,null,l,a)):Ti(e,t,l,a),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Gi(e){var t=e.stateNode;t.pendingContext?go(0,t.pendingContext,t.pendingContext!==t.context):t.context&&go(0,t.context,!1),Aa(e,t.containerInfo)}var Wi,Zi,Ui,$i={dehydrated:null,retryLane:0};function Ki(e,t,n){var r,o=t.pendingProps,a=Ta.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),lo(Ta,1&a),null===e?(void 0!==o.fallback&&Ba(t),e=o.children,a=o.fallback,i?(e=qi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,e):"number"==typeof o.unstable_expectedLoadTime?(e=qi(t,e,a,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$i,t.lanes=33554432,e):((n=Gu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(o=function(e,t,n,r,o){var a=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&a)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=zu(i,l),null!==e?r=zu(e,r):(r=Hu(r,a,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),i=t.child,a=e.child.memoizedState,i.memoizedState=null===a?{baseLanes:n}:{baseLanes:a.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=$i,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=zu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function qi(e,t,n,r){var o=e.mode,a=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==a?(a.childLanes=0,a.pendingProps=t):a=Gu(t,o,0,null),n=Hu(n,o,r,null),a.return=e,n.return=e,a.sibling=n,e.child=a,n}function Qi(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ta(e.return,t)}function Yi(e,t,n,r,o,a){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:a}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o,i.lastEffect=a)}function Xi(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Ti(e,t,r.children,n),0!=(2&(r=Ta.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Qi(e,n);else if(19===e.tag)Qi(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(Ta,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Da(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Yi(t,!1,o,n,a,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Da(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Yi(t,!0,n,null,a,t.lastEffect);break;case"together":Yi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=zu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!Ra)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mo(t.type)&&ho(),null;case 3:return La(),io(co),io(so),Ua(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ga(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ma(t);var a=Oa(Va.current);if(n=t.type,null!==e&&null!=t.stateNode)Zi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Oa(Pa.current),Ga(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Kr]=t,r[qr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Pr(Sr[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":ue(r,l),Pr("invalid",r)}for(var s in Ee(n,l),e=null,l)l.hasOwnProperty(s)&&(a=l[s],"children"===s?"string"==typeof a?r.textContent!==a&&(e=["children",a]):"number"==typeof a&&r.textContent!==""+a&&(e=["children",""+a]):u.hasOwnProperty(s)&&null!=a&&"onScroll"===s&&Pr("scroll",r));switch(n){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===a.nodeType?a:a.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Kr]=t,e[qr]=r,Wi(e,t),t.stateNode=e,s=xe(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),a=r;break;case"iframe":case"object":case"embed":Pr("load",e),a=r;break;case"video":case"audio":for(a=0;a<Sr.length;a++)Pr(Sr[a],e);a=r;break;case"source":Pr("error",e),a=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),a=r;break;case"details":Pr("toggle",e),a=r;break;case"input":ee(e,r),a=J(e,r),Pr("invalid",e);break;case"option":a=ae(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},a=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),a=le(e,r),Pr("invalid",e);break;default:a=r}Ee(n,a);var c=a;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?we(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Pr("scroll",e):null!=d&&_(e,l,d,s))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+K(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof a.onClick&&(e.onclick=Ir)}Nr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ui(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Oa(Va.current),Oa(Pa.current),Ga(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return io(Ta),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ga(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ta.current)?0===Fl&&(Fl=3):(0!==Fl&&3!==Fl||(Fl=4),null===Cl||0==(134217727&Dl)&&0==(134217727&Il)||fu(Cl,Ol))),(r||n)&&(t.flags|=4),null);case 4:return La(),null===e&&Vr(t.stateNode.containerInfo),null;case 10:return ea(t),null;case 17:return mo(t.type)&&ho(),null;case 19:if(io(Ta),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==Fl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Da(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(Ta,1&Ta.current|2),t.child}e=e.sibling}null!==r.tail&&zo()>zl&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Da(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!Ra)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*zo()-r.renderingStartTime>zl&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=zo(),n.sibling=null,t=Ta.current,lo(Ta,l?1&t|2:1&t),n):null;case 23:case 24:return vu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function nl(e){switch(e.tag){case 1:mo(e.type)&&ho();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(La(),io(co),io(so),Ua(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Ma(e),null;case 13:return io(Ta),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return io(Ta),null;case 4:return La(),null;case 10:return ea(e),null;case 23:case 24:return vu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Zi=function(e,t,n,r){var a=e.memoizedProps;if(a!==r){e=t.stateNode,Oa(Pa.current);var i,l=null;switch(n){case"input":a=J(e,a),r=J(e,r),l=[];break;case"option":a=ae(e,a),r=ae(e,r),l=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":a=le(e,a),r=le(e,r),l=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(d in Ee(n,r),n=null,a)if(!r.hasOwnProperty(d)&&a.hasOwnProperty(d)&&null!=a[d])if("style"===d){var s=a[d];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(u.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(s=null!=a?a[d]:void 0,r.hasOwnProperty(d)&&c!==s&&(null!=c||null!=s))if("style"===d)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(u.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Pr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===D?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Ui=function(e,t,n,r){n!==r&&(t.flags|=4)};var al="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=la(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Zl=r),ol(0,t)},n}function ll(e,t,n){(n=la(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ul?Ul=new Set([this]):Ul.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Tu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ko(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Gr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(i(163))}function dl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Lu(n,e),Au(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Ko(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&da(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}da(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Nr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(i(163))}function fl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=_e("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(wo&&"function"==typeof wo.onCommitFiberUnmount)try{wo.onCommitFiberUnmount(_o,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Lu(t,n);else{r=t;try{o()}catch(e){Tu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Tu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function ml(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function hl(e){return 5===e.tag||3===e.tag||4===e.tag}function gl(e){e:{for(var t=e.return;null!==t;){if(hl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||hl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vl(e,n,t):yl(e,n,t)}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function yl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yl(e,t,n),e=e.sibling;null!==e;)yl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(i(160));switch(n=a.stateNode,a.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function _l(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,o),t=xe(e,r),o=0;o<a.length;o+=2){var l=a[o],u=a[o+1];"style"===l?we(n,u):"dangerouslySetInnerHTML"===l?ge(n,u):"children"===l?ve(n,u):_(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?ie(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Nl=zo(),fl(t.child,!0)),void wl(t);case 19:return void wl(t);case 17:return;case 23:case 24:return void fl(t,null!==t.memoizedState)}throw Error(i(163))}function wl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Iu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var El=Math.ceil,xl=w.ReactCurrentDispatcher,kl=w.ReactCurrentOwner,Pl=0,Cl=null,Vl=null,Ol=0,Al=0,Ll=ao(0),Fl=0,Ml=null,Tl=0,Dl=0,Il=0,jl=0,Rl=null,Nl=0,zl=1/0;function Bl(){zl=zo()+500}var Hl,Gl=null,Wl=!1,Zl=null,Ul=null,$l=!1,Kl=null,ql=90,Ql=[],Yl=[],Xl=null,Jl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,au=!1;function iu(){return 0!=(48&Pl)?zo():-1!==tu?tu:tu=zo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bo()?1:2;if(0===nu&&(nu=Tl),0!==$o.transition){0!==ru&&(ru=null!==Rl?Rl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Bo(),e=Nt(0!=(4&Pl)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Jl)throw Jl=0,eu=null,Error(i(185));if(null===(e=su(e,t)))return null;Ht(e,t,n),e===Cl&&(Il|=t,4===Fl&&fu(e,Ol));var r=Bo();1===t?0!=(8&Pl)&&0==(48&Pl)?pu(e):(cu(e,n),0===Pl&&(Bl(),Zo())):(0==(4&Pl)||98!==r&&99!==r||(null===Xl?Xl=new Set([e]):Xl.add(e)),cu(e,n)),Rl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,a=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Gt(l),s=1<<u,c=a[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,It(s);var d=Dt;a[u]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=jt(e,e===Cl?Ol:0),t=Dt,0===r)null!==n&&(n!==To&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==To&&xo(n)}15===t?(n=pu.bind(null,e),null===Io?(Io=[n],jo=Eo(Oo,Uo)):Io.push(n),n=To):n=14===t?Wo(99,pu.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),du.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function du(e){if(tu=-1,ru=nu=0,0!=(48&Pl))throw Error(i(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=jt(e,e===Cl?Ol:0);if(0===n)return null;var r=n,o=Pl;Pl|=16;var a=_u();for(Cl===e&&Ol===r||(Bl(),yu(e,r));;)try{Eu();break}catch(t){bu(e,t)}if(Jo(),xl.current=a,Pl=o,null!==Vl?r=0:(Cl=null,Ol=0,r=Fl),0!=(Tl&Il))yu(e,0);else if(0!==r){if(2===r&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Gr(e.containerInfo)),0!==(n=Rt(e))&&(r=wu(e,n))),1===r)throw t=Ml,yu(e,0),fu(e,n),cu(e,zo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:Pu(e);break;case 3:if(fu(e,n),(62914560&n)===n&&10<(r=Nl+500-zo())){if(0!==jt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){iu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Br(Pu.bind(null,e),r);break}Pu(e);break;case 4:if(fu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Gt(n);a=1<<l,(l=r[l])>o&&(o=l),n&=~a}if(n=o,10<(n=(120>(n=zo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*El(n/1960))-n)){e.timeoutHandle=Br(Pu.bind(null,e),n);break}Pu(e);break;case 5:Pu(e);break;default:throw Error(i(329))}}return cu(e,zo()),e.callbackNode===t?du.bind(null,e):null}function fu(e,t){for(t&=~jl,t&=~Il,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Gt(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Pl))throw Error(i(327));if(Ou(),e===Cl&&0!=(e.expiredLanes&Ol)){var t=Ol,n=wu(e,t);0!=(Tl&Il)&&(n=wu(e,t=jt(e,t)))}else n=wu(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Pl|=64,e.hydrate&&(e.hydrate=!1,Gr(e.containerInfo)),0!==(t=Rt(e))&&(n=wu(e,t))),1===n)throw n=Ml,yu(e,0),fu(e,t),cu(e,zo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Pu(e),cu(e,zo()),null}function mu(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Bl(),Zo())}}function hu(e,t){var n=Pl;Pl&=-2,Pl|=8;try{return e(t)}finally{0===(Pl=n)&&(Bl(),Zo())}}function gu(e,t){lo(Ll,Al),Al|=t,Tl|=t}function vu(){Al=Ll.current,io(Ll)}function yu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Vl)for(n=Vl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&ho();break;case 3:La(),io(co),io(so),Ua();break;case 5:Ma(r);break;case 4:La();break;case 13:case 19:io(Ta);break;case 10:ea(r);break;case 23:case 24:vu()}n=n.return}Cl=e,Vl=zu(e.current,null),Ol=Al=Tl=t,Fl=0,Ml=null,jl=Il=Dl=0}function bu(e,t){for(;;){var n=Vl;try{if(Jo(),$a.current=Vi,Ja){for(var r=Qa.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Ja=!1}if(qa=0,Xa=Ya=Qa=null,ei=!1,kl.current=null,null===n||null===n.return){Fl=1,Ml=t,Vl=null;break}e:{var a=e,i=n.return,l=n,u=t;if(t=Ol,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Ta.current),f=i;do{var p;if(p=13===f.tag){var m=f.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!d)}}if(p){var g=f.updateQueue;if(null===g){var v=new Set;v.add(s),f.updateQueue=v}else g.add(s);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=la(-1,1);y.tag=2,ua(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=a.pingCache;if(null===b?(b=a.pingCache=new al,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var _=Du.bind(null,a,s,l);s.then(_,_)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);u=Error(($(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Fl&&(Fl=2),u=rl(u,l),f=i;do{switch(f.tag){case 3:a=u,f.flags|=4096,t&=-t,f.lanes|=t,sa(f,il(0,a,t));break e;case 1:a=u;var w=f.type,S=f.stateNode;if(0==(64&f.flags)&&("function"==typeof w.getDerivedStateFromError||null!==S&&"function"==typeof S.componentDidCatch&&(null===Ul||!Ul.has(S)))){f.flags|=4096,t&=-t,f.lanes|=t,sa(f,ll(f,a,t));break e}}f=f.return}while(null!==f)}ku(n)}catch(e){t=e,Vl===n&&null!==n&&(Vl=n=n.return);continue}break}}function _u(){var e=xl.current;return xl.current=Vi,null===e?Vi:e}function wu(e,t){var n=Pl;Pl|=16;var r=_u();for(Cl===e&&Ol===t||yu(e,t);;)try{Su();break}catch(t){bu(e,t)}if(Jo(),Pl=n,xl.current=r,null!==Vl)throw Error(i(261));return Cl=null,Ol=0,Fl}function Su(){for(;null!==Vl;)xu(Vl)}function Eu(){for(;null!==Vl&&!ko();)xu(Vl)}function xu(e){var t=Hl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?ku(e):Vl=t,kl.current=null}function ku(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Al)))return void(Vl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Al)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Vl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Vl=t);Vl=t=e}while(null!==t);0===Fl&&(Fl=5)}function Pu(e){var t=Bo();return Go(99,Cu.bind(null,e,t)),null}function Cu(e,t){do{Ou()}while(null!==Kl);if(0!=(48&Pl))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,a=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<a;){var s=31-Gt(a),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,a&=~c}if(null!==Xl&&0==(24&r)&&Xl.has(e)&&Xl.delete(e),e===Cl&&(Vl=Cl=null,Ol=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Pl,Pl|=32,kl.current=null,jr=Kt,pr(l=fr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,a=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var d=0,f=-1,p=-1,m=0,h=0,g=l,v=null;t:for(;;){for(var y;g!==u||0!==a&&3!==g.nodeType||(f=d+a),g!==s||0!==c&&3!==g.nodeType||(p=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===l)break t;if(v===u&&++m===a&&(f=d),v===s&&++h===c&&(p=d),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}u=-1===f||-1===p?null:{start:f,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;Rr={focusedElem:l,selectionRange:u},Kt=!1,ou=null,au=!1,Gl=r;do{try{Vu()}catch(e){if(null===Gl)throw Error(i(330));Tu(Gl,e),Gl=Gl.nextEffect}}while(null!==Gl);ou=null,Gl=r;do{try{for(l=e;null!==Gl;){var b=Gl.flags;if(16&b&&ve(Gl.stateNode,""),128&b){var _=Gl.alternate;if(null!==_){var w=_.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&b){case 2:gl(Gl),Gl.flags&=-3;break;case 6:gl(Gl),Gl.flags&=-3,_l(Gl.alternate,Gl);break;case 1024:Gl.flags&=-1025;break;case 1028:Gl.flags&=-1025,_l(Gl.alternate,Gl);break;case 4:_l(Gl.alternate,Gl);break;case 8:bl(l,u=Gl);var S=u.alternate;ml(u),null!==S&&ml(S)}Gl=Gl.nextEffect}}catch(e){if(null===Gl)throw Error(i(330));Tu(Gl,e),Gl=Gl.nextEffect}}while(null!==Gl);if(w=Rr,_=fr(),b=w.focusedElem,l=w.selectionRange,_!==b&&b&&b.ownerDocument&&dr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(_=l.start,void 0===(w=l.end)&&(w=_),"selectionStart"in b?(b.selectionStart=_,b.selectionEnd=Math.min(w,b.value.length)):(w=(_=b.ownerDocument||document)&&_.defaultView||window).getSelection&&(w=w.getSelection(),u=b.textContent.length,S=Math.min(l.start,u),l=void 0===l.end?S:Math.min(l.end,u),!w.extend&&S>l&&(u=l,l=S,S=u),u=cr(b,S),a=cr(b,l),u&&a&&(1!==w.rangeCount||w.anchorNode!==u.node||w.anchorOffset!==u.offset||w.focusNode!==a.node||w.focusOffset!==a.offset)&&((_=_.createRange()).setStart(u.node,u.offset),w.removeAllRanges(),S>l?(w.addRange(_),w.extend(a.node,a.offset)):(_.setEnd(a.node,a.offset),w.addRange(_))))),_=[];for(w=b;w=w.parentNode;)1===w.nodeType&&_.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<_.length;b++)(w=_[b]).element.scrollLeft=w.left,w.element.scrollTop=w.top}Kt=!!jr,Rr=jr=null,e.current=n,Gl=r;do{try{for(b=e;null!==Gl;){var E=Gl.flags;if(36&E&&dl(b,Gl.alternate,Gl),128&E){_=void 0;var x=Gl.ref;if(null!==x){var k=Gl.stateNode;switch(Gl.tag){case 5:_=k;break;default:_=k}"function"==typeof x?x(_):x.current=_}}Gl=Gl.nextEffect}}catch(e){if(null===Gl)throw Error(i(330));Tu(Gl,e),Gl=Gl.nextEffect}}while(null!==Gl);Gl=null,Do(),Pl=o}else e.current=n;if($l)$l=!1,Kl=e,ql=t;else for(Gl=r;null!==Gl;)t=Gl.nextEffect,Gl.nextEffect=null,8&Gl.flags&&((E=Gl).sibling=null,E.stateNode=null),Gl=t;if(0===(r=e.pendingLanes)&&(Ul=null),1===r?e===eu?Jl++:(Jl=0,eu=e):Jl=0,n=n.stateNode,wo&&"function"==typeof wo.onCommitFiberRoot)try{wo.onCommitFiberRoot(_o,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,zo()),Wl)throw Wl=!1,e=Zl,Zl=null,e;return 0!=(8&Pl)||Zo(),null}function Vu(){for(;null!==Gl;){var e=Gl.alternate;au||null===ou||(0!=(8&Gl.flags)?Je(Gl,ou)&&(au=!0):13===Gl.tag&&Sl(e,Gl)&&Je(Gl,ou)&&(au=!0));var t=Gl.flags;0!=(256&t)&&cl(e,Gl),0==(512&t)||$l||($l=!0,Wo(97,(function(){return Ou(),null}))),Gl=Gl.nextEffect}}function Ou(){if(90!==ql){var e=97<ql?97:ql;return ql=90,Go(e,Fu)}return!1}function Au(e,t){Ql.push(t,e),$l||($l=!0,Wo(97,(function(){return Ou(),null})))}function Lu(e,t){Yl.push(t,e),$l||($l=!0,Wo(97,(function(){return Ou(),null})))}function Fu(){if(null===Kl)return!1;var e=Kl;if(Kl=null,0!=(48&Pl))throw Error(i(331));var t=Pl;Pl|=32;var n=Yl;Yl=[];for(var r=0;r<n.length;r+=2){var o=n[r],a=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===a)throw Error(i(330));Tu(a,e)}}for(n=Ql,Ql=[],r=0;r<n.length;r+=2){o=n[r],a=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===a)throw Error(i(330));Tu(a,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Pl=t,Zo(),!0}function Mu(e,t,n){ua(e,t=il(0,t=rl(n,t),1)),t=iu(),null!==(e=su(e,1))&&(Ht(e,1,t),cu(e,t))}function Tu(e,t){if(3===e.tag)Mu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Mu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ul||!Ul.has(r))){var o=ll(n,e=rl(t,e),1);if(ua(n,o),o=iu(),null!==(n=su(n,1)))Ht(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ul||!Ul.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Du(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=iu(),e.pingedLanes|=e.suspendedLanes&n,Cl===e&&(Ol&n)===n&&(4===Fl||3===Fl&&(62914560&Ol)===Ol&&500>zo()-Nl?yu(e,0):jl|=n),cu(e,t)}function Iu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bo()?1:2:(0===nu&&(nu=Tl),0===(t=zt(62914560&~nu))&&(t=4194304))),n=iu(),null!==(e=su(e,t))&&(Ht(e,t,n),cu(e,n))}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Ru(e,t,n,r){return new ju(e,t,n,r)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zu(e,t){var n=e.alternate;return null===n?((n=Ru(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bu(e,t,n,r,o,a){var l=2;if(r=e,"function"==typeof e)Nu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Hu(n.children,o,a,t);case I:l=8,o|=16;break;case k:l=8,o|=1;break;case P:return(e=Ru(12,n,t,8|o)).elementType=P,e.type=P,e.lanes=a,e;case A:return(e=Ru(13,n,t,o)).type=A,e.elementType=A,e.lanes=a,e;case L:return(e=Ru(19,n,t,o)).elementType=L,e.lanes=a,e;case j:return Gu(n,o,a,t);case R:return(e=Ru(24,n,t,o)).elementType=R,e.lanes=a,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:l=10;break e;case V:l=9;break e;case O:l=11;break e;case F:l=14;break e;case M:l=16,r=null;break e;case T:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Ru(l,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Hu(e,t,n,r){return(e=Ru(7,e,r,t)).lanes=n,e}function Gu(e,t,n,r){return(e=Ru(23,e,r,t)).elementType=j,e.lanes=n,e}function Wu(e,t,n){return(e=Ru(6,e,null,t)).lanes=n,e}function Zu(e,t,n){return(t=Ru(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Uu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Bt(0),this.expirationTimes=Bt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Bt(0),this.mutableSourceEagerHydrationData=null}function $u(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ku(e,t,n,r){var o=t.current,a=iu(),l=lu(o);e:if(n){t:{if(qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(mo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(mo(s)){n=vo(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=la(a,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ua(o,t),uu(o,l,a),l}function qu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Qu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Yu(e,t){Qu(e,t),(e=e.alternate)&&Qu(e,t)}function Xu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Uu(e,t,null!=n&&!0===n.hydrate),t=Ru(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,aa(t),e[Qr]=n.current,Vr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=qu(i);l.call(e)}}Ku(t,i,e,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xu(e,0,t?{hydrate:!0}:void 0)}(n,r),i=a._internalRoot,"function"==typeof o){var u=o;o=function(){var e=qu(i);u.call(e)}}hu((function(){Ku(t,i,e,o)}))}return qu(i)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ju(t))throw Error(i(200));return $u(e,t,null,n)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Mi=!0;else{if(0==(n&r)){switch(Mi=!1,t.tag){case 3:Gi(t),Wa();break;case 5:Fa(t);break;case 1:mo(t.type)&&yo(t);break;case 4:Aa(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(qo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ki(e,t,n):(lo(Ta,1&Ta.current),null!==(t=Ji(e,t,n))?t.sibling:null);lo(Ta,1&Ta.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Xi(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(Ta,Ta.current),r)break;return null;case 23:case 24:return t.lanes=0,Ri(e,t,n)}return Ji(e,t,n)}Mi=0!=(16384&e.flags)}else Mi=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),na(t,n),o=ri(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mo(r)){var a=!0;yo(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,aa(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pa(t,r,l,e),o.updater=ma,t.stateNode=o,o._reactInternals=t,ya(t,r,e,n),t=Hi(null,t,r,!0,a,n)}else t.tag=0,Ti(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(a=o._init)(o._payload),t.type=o,a=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===F)return 14}return 2}(o),e=Ko(o,e),a){case 0:t=zi(null,t,o,e,n);break e;case 1:t=Bi(null,t,o,e,n);break e;case 11:t=Di(null,t,o,e,n);break e;case 14:t=Ii(null,t,o,Ko(o.type,e),r,n);break e}throw Error(i(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,zi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 1:return r=t.type,o=t.pendingProps,Bi(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 3:if(Gi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ia(e,t),ca(t,r,null,n),(r=t.memoizedState.element)===o)Wa(),t=Ji(e,t,n);else{if((a=(o=t.stateNode).hydrate)&&(ja=Wr(t.stateNode.containerInfo.firstChild),Ia=t,a=Ra=!0),a){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(a=e[o])._workInProgressVersionPrimary=e[o+1],Za.push(a);for(n=xa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ti(e,t,r,n),Wa();t=t.child}return t;case 5:return Fa(t),null===e&&Ba(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,l=o.children,zr(r,o)?l=null:null!==a&&zr(r,a)&&(t.flags|=16),Ni(e,t),Ti(e,t,l,n),t.child;case 6:return null===e&&Ba(t),null;case 13:return Ki(e,t,n);case 4:return Aa(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ea(t,null,r,n):Ti(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Di(e,t,r,o=t.elementType===r?o:Ko(r,o),n);case 7:return Ti(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ti(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,a=o.value;var u=t.type._context;if(lo(qo,u._currentValue),u._currentValue=a,null!==l)if(u=l.value,0==(a=ir(u,a)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(l.children===o.children&&!co.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&a)){1===u.tag&&((c=la(-1,n&-n)).tag=2,ua(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ta(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ti(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(a=t.pendingProps).children,na(t,n),r=r(o=ra(o,a.unstable_observedBits)),t.flags|=1,Ti(e,t,r,n),t.child;case 14:return a=Ko(o=t.type,t.pendingProps),Ii(e,t,o,a=Ko(o.type,a),r,n);case 15:return ji(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ko(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mo(r)?(e=!0,yo(t)):e=!1,na(t,n),ga(t,r,o),ya(t,r,o,n),Hi(null,t,r,!0,e,n);case 19:return Xi(e,t,n);case 23:case 24:return Ri(e,t,n)}throw Error(i(156,t.tag))},Xu.prototype.render=function(e){Ku(e,this._internalRoot,null,null)},Xu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ku(null,e,null,(function(){t[Qr]=null}))},et=function(e){13===e.tag&&(uu(e,4,iu()),Yu(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,iu()),Yu(e,67108864))},nt=function(e){if(13===e.tag){var t=iu(),n=lu(e);uu(e,n,t),Yu(e,n)}},rt=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(i(90));Y(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Fe=mu,Me=function(e,t,n,r,o){var a=Pl;Pl|=4;try{return Go(98,e.bind(null,t,n,r,o))}finally{0===(Pl=a)&&(Bl(),Zo())}},Te=function(){0==(49&Pl)&&(function(){if(null!==Xl){var e=Xl;Xl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,zo())}))}Zo()}(),Ou())},De=function(e,t){var n=Pl;Pl|=2;try{return e(t)}finally{0===(Pl=n)&&(Bl(),Zo())}};var ns={Events:[Jr,eo,to,Ae,Le,Ou,{current:!1}]},rs={findFiberByHostInstance:Xr,bundleType:0,version:"17.0.1",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var as=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!as.isDisabled&&as.supportsFiber)try{_o=as.inject(os),wo=as}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Pl;if(0!=(48&n))return e(t);Pl|=1;try{if(e)return Go(99,e.bind(null,t))}finally{Pl=n,Zo()}},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(i(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Ju(t))throw Error(i(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(i(40));return!!e._reactRootContainer&&(hu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Qr]=null}))})),!0)},t.unstable_batchedUpdates=mu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return es(e,t,n,!1,r)},t.version="17.0.1"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},1512:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Provider:()=>c,ReactReduxContext:()=>o,batch:()=>Q.unstable_batchedUpdates,connect:()=>z,connectAdvanced:()=>E,createDispatchHook:()=>W,createSelectorHook:()=>$,createStoreHook:()=>H,shallowEqual:()=>k,useDispatch:()=>Z,useSelector:()=>q,useStore:()=>G});var r=n(7294),o=(n(5697),r.createContext(null)),a=function(e){e()},i=function(){return a},l={notify:function(){}},u=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=l,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=i(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=l)},e}(),s="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;const c=function(e){var t=e.store,n=e.context,a=e.children,i=(0,r.useMemo)((function(){var e=new u(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=(0,r.useMemo)((function(){return t.getState()}),[t]);s((function(){var e=i.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,l]);var c=n||o;return r.createElement(c.Provider,{value:i},a)};function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function f(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var p=n(8679),m=n.n(p),h=n(2973),g=[],v=[null,null];function y(e,t){var n=e[1];return[t.payload,n+1]}function b(e,t,n){s((function(){return e.apply(void 0,t)}),n)}function _(e,t,n,r,o,a,i){e.current=r,t.current=o,n.current=!1,a.current&&(a.current=null,i())}function w(e,t,n,r,o,a,i,l,u,s){if(e){var c=!1,d=null,f=function(){if(!c){var e,n,f=t.getState();try{e=r(f,o.current)}catch(e){n=e,d=e}n||(d=null),e===a.current?i.current||u():(a.current=e,l.current=e,i.current=!0,s({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=f,n.trySubscribe(),f(),function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}}var S=function(){return[null,0]};function E(e,t){void 0===t&&(t={});var n=t,a=n.getDisplayName,i=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=n.methodName,s=void 0===l?"connectAdvanced":l,c=n.renderCountProp,p=void 0===c?void 0:c,E=n.shouldHandleStateChanges,x=void 0===E||E,k=n.storeKey,P=void 0===k?"store":k,C=(n.withRef,n.forwardRef),V=void 0!==C&&C,O=n.context,A=void 0===O?o:O,L=f(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),F=A;return function(t){var n=t.displayName||t.name||"Component",o=i(n),a=d({},L,{getDisplayName:i,methodName:s,renderCountProp:p,shouldHandleStateChanges:x,storeKey:P,displayName:o,wrappedComponentName:n,WrappedComponent:t}),l=L.pure,c=l?r.useMemo:function(e){return e()};function E(n){var o=(0,r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=f(n,["reactReduxForwardedRef"]);return[n.context,e,t]}),[n]),i=o[0],l=o[1],s=o[2],p=(0,r.useMemo)((function(){return i&&i.Consumer&&(0,h.isContextConsumer)(r.createElement(i.Consumer,null))?i:F}),[i,F]),m=(0,r.useContext)(p),E=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(m)&&Boolean(m.store);var k=E?n.store:m.store,P=(0,r.useMemo)((function(){return function(t){return e(t.dispatch,a)}(k)}),[k]),C=(0,r.useMemo)((function(){if(!x)return v;var e=new u(k,E?null:m.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[k,E,m]),V=C[0],O=C[1],A=(0,r.useMemo)((function(){return E?m:d({},m,{subscription:V})}),[E,m,V]),L=(0,r.useReducer)(y,g,S),M=L[0][0],T=L[1];if(M&&M.error)throw M.error;var D=(0,r.useRef)(),I=(0,r.useRef)(s),j=(0,r.useRef)(),R=(0,r.useRef)(!1),N=c((function(){return j.current&&s===I.current?j.current:P(k.getState(),s)}),[k,M,s]);b(_,[I,D,R,s,N,j,O]),b(w,[x,k,V,P,I,D,R,j,O,T],[k,V,P]);var z=(0,r.useMemo)((function(){return r.createElement(t,d({},N,{ref:l}))}),[l,t,N]);return(0,r.useMemo)((function(){return x?r.createElement(p.Provider,{value:A},z):z}),[p,z,A])}var k=l?r.memo(E):E;if(k.WrappedComponent=t,k.displayName=o,V){var C=r.forwardRef((function(e,t){return r.createElement(k,d({},e,{reactReduxForwardedRef:t}))}));return C.displayName=o,C.WrappedComponent=t,m()(C,t)}return m()(k,t)}}function x(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function k(e,t){if(x(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!x(e[n[o]],t[n[o]]))return!1;return!0}var P=n(4890);function C(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function V(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function O(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=V(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=V(o),o=r(t,n)),o},r}}const A=[function(e){return"function"==typeof e?O(e):void 0},function(e){return e?void 0:C((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?C((function(t){return(0,P.bindActionCreators)(e,t)})):void 0}],L=[function(e){return"function"==typeof e?O(e):void 0},function(e){return e?void 0:C((function(){return{}}))}];function F(e,t,n){return d({},n,e,t)}const M=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,a=n.areMergedPropsEqual,i=!1;return function(t,n,l){var u=e(t,n,l);return i?o&&a(u,r)||(r=u):(i=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return F}}];function T(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function D(e,t,n,r,o){var a,i,l,u,s,c=o.areStatesEqual,d=o.areOwnPropsEqual,f=o.areStatePropsEqual,p=!1;return function(o,m){return p?function(o,p){var m,h,g=!d(p,i),v=!c(o,a);return a=o,i=p,g&&v?(l=e(a,i),t.dependsOnOwnProps&&(u=t(r,i)),s=n(l,u,i)):g?(e.dependsOnOwnProps&&(l=e(a,i)),t.dependsOnOwnProps&&(u=t(r,i)),s=n(l,u,i)):v?(m=e(a,i),h=!f(m,l),l=m,h&&(s=n(l,u,i)),s):s}(o,m):(l=e(a=o,i=m),u=t(r,i),s=n(l,u,i),p=!0,s)}}function I(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=f(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),l=r(e,a),u=o(e,a);return(a.pure?D:T)(i,l,u,e,a)}function j(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function R(e,t){return e===t}function N(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?E:n,o=t.mapStateToPropsFactories,a=void 0===o?L:o,i=t.mapDispatchToPropsFactories,l=void 0===i?A:i,u=t.mergePropsFactories,s=void 0===u?M:u,c=t.selectorFactory,p=void 0===c?I:c;return function(e,t,n,o){void 0===o&&(o={});var i=o,u=i.pure,c=void 0===u||u,m=i.areStatesEqual,h=void 0===m?R:m,g=i.areOwnPropsEqual,v=void 0===g?k:g,y=i.areStatePropsEqual,b=void 0===y?k:y,_=i.areMergedPropsEqual,w=void 0===_?k:_,S=f(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),E=j(e,a,"mapStateToProps"),x=j(t,l,"mapDispatchToProps"),P=j(n,s,"mergeProps");return r(p,d({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:x,initMergeProps:P,pure:c,areStatesEqual:h,areOwnPropsEqual:v,areStatePropsEqual:b,areMergedPropsEqual:w},S))}}const z=N();function B(){return(0,r.useContext)(o)}function H(e){void 0===e&&(e=o);var t=e===o?B:function(){return(0,r.useContext)(e)};return function(){return t().store}}var G=H();function W(e){void 0===e&&(e=o);var t=e===o?G:H(e);return function(){return t().dispatch}}var Z=W(),U=function(e,t){return e===t};function $(e){void 0===e&&(e=o);var t=e===o?B:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=U);var o=t(),a=function(e,t,n,o){var a,i=(0,r.useReducer)((function(e){return e+1}),0)[1],l=(0,r.useMemo)((function(){return new u(n,o)}),[n,o]),c=(0,r.useRef)(),d=(0,r.useRef)(),f=(0,r.useRef)(),p=(0,r.useRef)(),m=n.getState();try{if(e!==d.current||m!==f.current||c.current){var h=e(m);a=void 0!==p.current&&t(h,p.current)?p.current:h}else a=p.current}catch(e){throw c.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\n"),e}return s((function(){d.current=e,f.current=m,p.current=a,c.current=void 0})),s((function(){function e(){try{var e=d.current(n.getState());if(t(e,p.current))return;p.current=e}catch(e){c.current=e}i()}return l.onStateChange=e,l.trySubscribe(),e(),function(){return l.tryUnsubscribe()}}),[n,l]),a}(e,n,o.store,o.subscription);return(0,r.useDebugValue)(a),a}}var K,q=$(),Q=n(3935);K=Q.unstable_batchedUpdates,a=K},8359:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=(n&&Symbol.for("react.suspense_list"),n?Symbol.for("react.memo"):60115),h=n?Symbol.for("react.lazy"):60116;n&&Symbol.for("react.block"),n&&Symbol.for("react.fundamental"),n&&Symbol.for("react.responder"),n&&Symbol.for("react.scope");function g(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case f:case h:case m:case u:return e;default:return t}}case o:return t}}}t.isContextConsumer=function(e){return g(e)===s}},2973:(e,t,n)=>{"use strict";e.exports=n(8359)},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,a=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;o=d("react.element"),a=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),u=d("react.forward_ref"),t.Suspense=d("react.suspense"),s=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function g(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,r(b,g.prototype),b.isPureReactComponent=!0;var _={current:null},w=Object.prototype.hasOwnProperty,S={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,a={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!S.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:l,props:a,_owner:_.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var k=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case a:u=!0}}if(u)return i=i(u=e),e=""===r?"."+P(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(k,"$&/")+"/"),C(i,t,n,"",(function(e){return e}))):null!=i&&(x(i)&&(i=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(k,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+P(l=e[s],s);u+=C(l,t,n,c,i)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=C(l=l.value,t,n,c=r+P(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function V(e,t,n){if(null==e)return e;var r=[],o=0;return C(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var A={current:null};function L(){var e=A.current;if(null===e)throw Error(p(321));return e}var F={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:V,forEach:function(e,t,n){V(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return V(e,(function(){t++})),t},toArray:function(e){return V(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=F,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var a=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=_.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)w.call(t,c)&&!S.hasOwnProperty(c)&&(a[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)a.children=n;else if(1<c){s=Array(c);for(var d=0;d<c;d++)s[d]=arguments[d+2];a.children=s}return{$$typeof:o,type:e.type,key:i,ref:l,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="17.0.1"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},4890:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__DO_NOT_USE__ActionTypes:()=>a,applyMiddleware:()=>g,bindActionCreators:()=>d,combineReducers:()=>s,compose:()=>h,createStore:()=>l});var r=n(7121),o=function(){return Math.random().toString(36).substring(7).split("").join(".")},a={INIT:"@@redux/INIT"+o(),REPLACE:"@@redux/REPLACE"+o(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+o()}};function i(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function l(e,t,n){var o;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(l)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,s=t,c=[],d=c,f=!1;function p(){d===c&&(d=c.slice())}function m(){if(f)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function h(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(f)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),d.push(e),function(){if(t){if(f)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=d.indexOf(e);d.splice(n,1),c=null}}}function g(e){if(!i(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(f)throw new Error("Reducers may not dispatch actions.");try{f=!0,s=u(s,e)}finally{f=!1}for(var t=c=d,n=0;n<t.length;n++)(0,t[n])();return e}function v(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,g({type:a.REPLACE})}function y(){var e,t=h;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[r.Z]=function(){return this},e}return g({type:a.INIT}),(o={dispatch:g,subscribe:h,getState:m,replaceReducer:v})[r.Z]=y,o}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function s(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,l=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:a.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:a.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+a.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},a=0;a<l.length;a++){var s=l[a],c=n[s],d=e[s],f=c(d,t);if(void 0===f){var p=u(s,t);throw new Error(p)}o[s]=f,r=r||f!==d}return(r=r||l.length!==Object.keys(e).length)?o:e}}function c(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return c(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=c(o,t))}return n}function f(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){f(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function h(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function g(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},a=t.map((function(e){return e(o)}));return m({},n,{dispatch:r=h.apply(void 0,a)(n.dispatch)})}}}},53:(e,t)=>{"use strict";var n,r,o,a;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,d=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,g=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,w=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+y;try{g(!0,e)?w.postMessage(null):(h=!1,g=null)}catch(e){throw w.postMessage(null),e}}else h=!1},n=function(e){g=e,h||(h=!0,w.postMessage(null))},r=function(e,n){v=f((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<k(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var a=2*(r+1)-1,i=e[a],l=a+1,u=e[l];if(void 0!==i&&0>k(i,n))void 0!==u&&0>k(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[a]=n,r=a);else{if(!(void 0!==u&&0>k(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function k(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],C=[],V=1,O=null,A=3,L=!1,F=!1,M=!1;function T(e){for(var t=E(C);null!==t;){if(null===t.callback)x(C);else{if(!(t.startTime<=e))break;x(C),t.sortIndex=t.expirationTime,S(P,t)}t=E(C)}}function D(e){if(M=!1,T(e),!F)if(null!==E(P))F=!0,n(I);else{var t=E(C);null!==t&&r(D,t.startTime-e)}}function I(e,n){F=!1,M&&(M=!1,o()),L=!0;var a=A;try{for(T(n),O=E(P);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=O.callback;if("function"==typeof i){O.callback=null,A=O.priorityLevel;var l=i(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?O.callback=l:O===E(P)&&x(P),T(n)}else x(P);O=E(P)}if(null!==O)var u=!0;else{var s=E(C);null!==s&&r(D,s.startTime-n),u=!1}return u}finally{O=null,A=a,L=!1}}var j=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){F||L||(F=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return A},t.unstable_getFirstCallbackNode=function(){return E(P)},t.unstable_next=function(e){switch(A){case 1:case 2:case 3:var t=3;break;default:t=A}var n=A;A=t;try{return e()}finally{A=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=j,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=A;A=e;try{return t()}finally{A=n}},t.unstable_scheduleCallback=function(e,a,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:V++,callback:a,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,S(C,e),null===E(P)&&e===E(C)&&(M?o():M=!0,r(D,i-l))):(e.sortIndex=u,S(P,e),F||L||(F=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=A;return function(){var n=A;A=t;try{return e.apply(this,arguments)}finally{A=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},7121:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r}),e=n.hmd(e);const r=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}("undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:e)},3813:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(2584)),a=r(n(9519)),i=n(3640),l=n(3279),{pixelSize:u}=a.default(),s=-1*u;class c{constructor(e,t,n,r,a){this.enemyId=0,this.locationProvider=r,this.explosion=n(),this.frameTickHandler=new o.default(e,(()=>this.onFrameChange()));const i=t();this.offSets=i.offSets.map((e=>({left:e.left*u,top:e.top*u}))),this.frameProvider=a,this.frameProvider.setFrames(i.frames),this.currentFrame=this.frameProvider.getCurrentFrame();const{left:l,top:s}=this.getOffsetLocation();this.offsetLeft=l,this.offsetTop=s,this.enemyId=c.idCounter,c.idCounter+=1}getId(){return this.enemyId}updateState(e){this.frameTickHandler.tick(e);const t=this.getOffsetLocation();this.offsetLeft=t.left,this.offsetTop=t.top,this.locationProvider.updateState(e),this.alterState(e)}getCurrentEnemyState(){return{enemyId:this.getId(),coloredExplosion:this.explosion,offsetLeft:this.offsetLeft,offsetTop:this.offsetTop,currentFrame:this.currentFrame,hitpoints:this.getHitpoints(),hitbox:this.getHitbox(),centerLocation:this.getCenterLocation(),points:this.getPoints(),currentFrameIndex:this.frameProvider.getCurrentIndex(),nozzleLocation:this.getNozzleLocation()}}getOffsetLocation(){const e=this.offSets[this.frameProvider.getCurrentIndex()],t=this.locationProvider.getCurrentLocation();return e?l.getOffsetLocation(t.left,t.top,e.left,e.top):t}increaseSpeed(e){this.locationProvider.increaseSpeed(e),this.frameTickHandler.increaseSpeed(e)}getHitpoints(){return 1}recudeHitpoints(){}getCenterLocation(){return void 0!==this.currentFrame?i.getFrameCenter(this.offsetLeft,this.offsetTop,this.currentFrame):void 0}getHitbox(){return this.currentFrame?i.getFrameHitbox(this.offsetLeft,this.offsetTop,this.currentFrame,s):{left:0,top:0,right:0,bottom:0}}getNozzleLocation(){if(void 0!==this.currentFrame){const{width:e,height:t}=i.getFrameDimensions(this.currentFrame);return{left:this.offsetLeft+e/2-u/2,top:this.offsetTop+t+u}}}}t.default=c,c.idCounter=0},8851:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=class{constructor(e){this.add=1,this.frameIndex=e,this.maxIndex=-1}setFrames(e){this.frames=r.copyFrames(e),this.maxIndex=e.length-1}getCurrentFrame(){if(void 0===this.frames)throw new Error("Set the frames.");const e=r.getFrameByIndex(this.frames,this.frameIndex);return r.copyFrame(e)}getCurrentIndex(){return this.frameIndex}}},6227:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{constructor(e,t,n,r,o,a){this.left=e,this.top=t,this.angle=r,this.width=o,this.height=a,this.speed=n(),this.baseSpeed=n}getCurrentLocation(){return{left:this.left,top:this.top}}increaseSpeed(e){this.speed=this.baseSpeed()*e}}},224:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getAngles=t.extraAngles=t.angles=void 0,t.angles={left:180,right:0,up:270,down:90,rightdown:45,leftdown:135,leftup:225,rightup:315},t.extraAngles={leftleftdown:155,rightrightdown:25},t.getAngles=function(){return Object.keys(t.angles).map((e=>t.angles[e]))}},1501:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validColors=void 0;const n={black:"#000000",blue:"#0000AA",green:"#00AA00",cyan:"#00AAAA",red:"#AA0000",magenta:"#AA00AA",brown:"#AA5500",lightGray:"#AAAAAA",darkGray:"555555",lightBlue:"#5555FF",lightGreen:"#55FF55",lightCyan:"#55FFFF",lightRed:"#FF5555",lightMagenta:"#FF55FF",yellow:"#FFFF55",white:"#FFFFFF"};t.validColors=Object.keys(n).map((e=>n[e])),t.default=n},4395:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ColorSchemes=t.WarpLevelConstants=t.Points=t.FrameTimes=t.MovementAngles=t.Locations=void 0;const o=r(n(9519)),a=r(n(3504)),i=n(224),l=r(n(1501)),{gameField:u,pixelSize:s}=o.default();var c,d,f,p;!function(e){let t,n,r,o,i,l,c,d;!function(e){e.topStart=u.top+18*s,e.maxBottom=u.top+65*s,e.scatteredMaxBottom=u.top+45*s}(t=e.robot||(e.robot={})),function(e){e.topStart=u.top+18*s,e.maxTop=u.top+5*s,e.maxBottom=u.top+55*s}(n=e.Orb||(e.Orb={})),function(e){e.topStart=u.top+18*s}(r=e.Piston||(e.Piston={})),function(e){e.maxBottom=u.top+60*s}(o=e.Devil||(e.Devil={})),function(e){e.topStart=u.top+18*s}(i=e.Crab||(e.Crab={})),function(e){e.spawnLocation=a.default()}(l=e.Player||(e.Player={})),function(e){e.topStart=18*s}(c=e.Boat||(e.Boat={})),function(e){e.maxBottom=55*s}(d=e.CloakingOrb||(e.CloakingOrb={}))}(t.Locations||(t.Locations={})),(p=t.MovementAngles||(t.MovementAngles={})).bird=[2,358,178,182],p.robot=5,p.spinner=[2,358,178,182],p.piston=170,p.diabolo=[2,358,178,182],p.diaboloHardLeftRight=[0,180],p.diaboloHardUpDown=[90,270],p.devil=[i.angles.leftdown,i.angles.rightdown],(f=t.FrameTimes||(t.FrameTimes={})).bird=100,f.robot=200,f.orb=200,f.spinner=100,f.balloon=100,f.piston=200,f.diabolo=200,f.crab=100,f.bat=100,f.boat=200,f.cloakingOrb=150,f.fish=150,(d=t.Points||(t.Points={})).bird=200,d.robot=100,d.orb=200,d.spinner=200,d.balloon=200,d.asteroid=300,d.piston=200,d.diabolo=200,d.spaceMonster=300,d.devil=100,d.crab=200,d.bat=200,d.boat=200,d.cloakingOrb=100,d.fish=100,d.warpLevel=[1300,1400,1500,1600,1700],(c=t.WarpLevelConstants||(t.WarpLevelConstants={})).heightPixelCount=72,c.top=8*s,c.height=c.heightPixelCount*s,c.left=u.left+s,c.right=u.right-2*s,c.bottom=c.top+c.height,c.width=16.5*s,function(e){let t,n;!function(e){e.robot=[l.default.lightBlue,l.default.lightCyan,l.default.lightRed,l.default.lightGreen,l.default.lightBlue,l.default.lightMagenta],e.cloakingOrb=[l.default.lightBlue,l.default.lightCyan,l.default.lightRed,l.default.lightGreen,l.default.lightBlue,l.default.lightMagenta],e.orb=[[l.default.lightGreen,l.default.lightBlue],[l.default.brown,l.default.lightGreen],[l.default.lightBlue,l.default.white],[l.default.white,l.default.brown]]}(t=e.Enemies||(e.Enemies={})),function(e){e.spaceMonster=[l.default.yellow,l.default.lightGreen,l.default.lightBlue]}(n=e.Explosions||(e.Explosions={})),e.birds=[l.default.lightMagenta,l.default.yellow,l.default.lightCyan,l.default.lightRed]}(t.ColorSchemes||(t.ColorSchemes={}))},5217:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(3935)),i=r(n(7913)),l=n(5172),u=r(n(143)),s=n(9830),c=n(4898),d=n(6997),f=r(n(4975)),p=n(2536),m=r(n(2412));t.default=function(){var e;const t=p.getURLQueryKVPs(window.location.search),n=t.some((e=>"playground"===e.key)),r=t.some((e=>"canvas"===e.key));let h=null===(e=t.find((e=>"level"===e.key)))||void 0===e?void 0:e.value;const g=t.find((e=>"grid"===e.key)),v=t.find((e=>"hitboxes"===e.key)),y=t.find((e=>"god"===e.key)),b=t.find((e=>"lives"===e.key)),_=t.find((e=>"phasers"===e.key)),w=t.find((e=>"timelevelTimeLimit"===e.key)),S=t.find((e=>"sound"===e.key));if(n){const e={};if(h||(h="0"),h&&d.dispatch(c.setLevel(parseInt(h,10))),b?d.dispatch(c.setLives(parseInt(b.value,10))):d.dispatch(c.setLives(900)),_?d.dispatch(c.setPhasers(parseInt(_.value,10))):d.dispatch(c.setPhasers(900)),w&&d.dispatch(c.setTimeLevelTimeLimit(parseInt(w.value,10))),y&&(e.playerIsImmortal=!0),g){let t;g.value&&(t=parseInt(g.value,10)),e.drawGrid=!0,e.gridDetail=t}v&&(e.drawHitboxes=!0),d.dispatch(c.increaseScore(7400)),d.dispatch(s.setDebuggingState(e)),l.Canvas.setCanvasDimensions(),f.default.setSettings(),i.default.init()}else if(r){const e=u.default();e.fillStyle="#00AA00",window.r42=e}else{if(!S)throw new Error("No Debugging info given");a.default.render(o.default.createElement(m.default,null),document.getElementById("root"))}}},2412:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=n(1766),u=a(n(7294)),s=n(6630),c=n(1244),d=i(n(7171)),f={color:"white"};t.default=function(){const[e,t]=u.useState();function n(n,r,o){null==e||e.stop();const a=new l.Howl({src:n,sprite:{play:[r,o]},loop:!0});t(a),a.play("play")}return u.default.createElement("div",{style:f},u.default.createElement("h1",null,"Sound tester app"),u.default.createElement("div",{style:{display:"flex",flexDirection:"column",width:"250px"}},u.default.createElement("p",null,"Player bullet"),u.default.createElement(d.default,{src:s.Sounds.Player.Shoot,text:"Shoot",onPlay:function(n,r,o){null==e||e.stop();const a=new l.Howl({src:n,sprite:{play:[r,o]},loop:!1});t(a),a.play("play")}}),u.default.createElement("p",null,"WarpLevel loop. Played only during warp levels"),u.default.createElement(d.default,{src:s.Sounds.Player.WarpGate,text:"Warp level",onPlay:n}),u.default.createElement("p",null,"Wizzing used by Balloons"),s.Sounds.Wizzing.map(((t,r)=>u.default.createElement("div",{style:{display:"flex",flexDirection:"row"}},u.default.createElement(d.default,{key:r,src:t,text:"Wizzing "+r.toString(),onPlay:n,sprite:c.SoundSprites.Wizzing[r]}),u.default.createElement("button",{onClick:()=>null==e?void 0:e.stop()},"Stop")))),u.default.createElement("p",null,"Whoping used by orbs"),s.Sounds.Whoping.map(((t,r)=>u.default.createElement("div",{style:{display:"flex",flexDirection:"row"}},u.default.createElement(d.default,{key:r,src:t,text:"Whoping "+r.toString(),onPlay:n,sprite:c.SoundSprites.Whoping[r]}),u.default.createElement("button",{onClick:()=>null==e?void 0:e.stop()},"Stop")))),u.default.createElement("p",null,"Tjirping, used by birds"),s.Sounds.Tjirping.map(((t,r)=>u.default.createElement("div",{style:{display:"flex",flexDirection:"row"}},u.default.createElement(d.default,{key:r,src:t,text:"Tjirping "+r.toString(),onPlay:n,sprite:c.SoundSprites.Tjirping[r]}),u.default.createElement("button",{onClick:()=>null==e?void 0:e.stop()},"Stop"))))))}},2757:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.DEBUGGING_drawGrid=t.DEBUGGING_drawGameRect=t.DEBUGGING_renderHitboxes=void 0;const o=r(n(1501)),a=r(n(9519)),i=r(n(143)),l=n(6997),{pixelSize:u,fullGameWidth:s,fullGameHeight:c}=a.default();function d(e,t,n=2){const r=i.default();r.beginPath(),r.strokeStyle=t,r.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),r.lineWidth=n,r.stroke(),r.closePath()}t.DEBUGGING_renderHitboxes=function(){var e;const{playerState:t,enemyLevelState:n}=l.appState(),r=n.enemies.map((e=>e.hitbox));t.hitboxes&&(r.push(t.hitboxes.bottom),r.push(t.hitboxes.middle)),(null===(e=t.bulletState)||void 0===e?void 0:e.hitbox)&&r.push(t.bulletState.hitbox),n.bullets.forEach((e=>r.push(e.hitbox))),n.shrapnells.forEach((e=>r.push(e.hitbox)));for(const e of r)void 0!==e&&d(e,o.default.lightRed)},t.DEBUGGING_drawGameRect=d,t.DEBUGGING_drawGrid=function(e){void 0===e&&(e=1);const t=i.default();for(let n=0;n<120;n+=1){t.beginPath();const r=n*u*e;t.lineTo(0,r),t.lineTo(s,r),t.lineWidth=1,t.strokeStyle="white",t.stroke(),t.closePath()}for(let n=0;n<160;n+=1){t.beginPath();const r=n*u*e;t.lineTo(r,0),t.lineTo(r,c),t.lineWidth=1,t.strokeStyle="white",t.stroke(),t.closePath()}}},7171:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const i=n(1766),l=a(n(7294));t.default=function(e){const[t,n]=l.useState("0"),[r,o]=l.useState("0"),[a,u]=l.useState(0),[s,c]=l.useState(!1),[d,f]=l.useState(!1);return l.useEffect((()=>{const t=new i.Howl({src:e.src}),r=Math.round(1e3*t.duration());u(r),e.sprite&&void 0!==e.sprite[0]?(n(e.sprite[0].toString()),c(!0)):n("0"),e.sprite&&void 0!==e.sprite[1]?(o(e.sprite[1].toString()),f(!0)):o(r.toString())}),[]),l.default.createElement("div",{style:{display:"flex",flexDirection:"row"}},l.default.createElement("button",{style:{width:"150px"},onClick:function(){e.onPlay(e.src,parseInt(t,10),parseInt(r,10))}},e.text),l.default.createElement("input",{style:{width:"30px",backgroundColor:s?"yellow":"white"},value:t,onChange:e=>n(e.target.value)}),l.default.createElement("input",{style:{width:"30px",backgroundColor:d?"yellow":"white"},value:r,onChange:e=>o(e.target.value)}),l.default.createElement("input",{style:{width:"30px"},value:a.toString(),readOnly:!0}))}},1217:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.AsteroidEnemy=void 0;const o=r(n(3813)),a=r(n(1501)),i=n(4395),l=r(n(152));class u extends o.default{constructor(e,t,n,r,o){super(e,t,n,r,o),this.hitpoints=4,l.default.Frame.setColor(this.explosion.explosionCenterFrame,a.default.lightRed),this.explosion.particleFrames.forEach((e=>l.default.Frame.setColor(e,a.default.lightRed)))}getPoints(){return i.Points.asteroid}getHitpoints(){return this.hitpoints}recudeHitpoints(){this.hitpoints--,this.frameProvider.getNextFrame()}onFrameChange(){const e=this.frameProvider.getCurrentFrame();l.default.Frame.convertHexToCGA(e),this.currentFrame=e}alterState(){}}t.AsteroidEnemy=u},914:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getAsteroidOffsetFrames=void 0;const r=n(3640);t.getAsteroidOffsetFrames=function(){const e={frames:[[["0","0","6","6","0","0"],["0","6","6","6","6","0"],["6","6","6","6","6","6"],["6","6","6","6","6","6"],["0","6","6","6","6","0"],["0","0","6","6","0","0"]],[["0","0","6","6","0","0"],["0","6","6","6","6","0"],["6","6","C","C","6","6"],["6","6","C","C","6","6"],["0","6","6","6","6","0"],["0","0","6","6","0","0"]],[["0","0","6","6","0","0"],["0","6","C","C","6","0"],["6","C","C","C","C","6"],["6","C","C","C","C","6"],["0","6","C","C","6","0"],["0","0","6","6","0","0"]],[["0","0","C","C","0","0"],["0","C","C","C","C","0"],["C","C","C","C","C","C"],["C","C","C","C","C","C"],["0","C","C","C","C","0"],["0","0","C","C","0","0"]]],offSets:[],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},6148:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["0","E","E","E","E","0"],["A","E","E","E","E","A"],["A","E","E","E","E","A"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]],[["0","E","E","E","E","0"],["A","A","E","E","E","E"],["A","A","E","E","E","E"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]],[["0","E","E","E","E","0"],["E","A","A","E","E","E"],["E","A","A","E","E","E"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]],[["0","E","E","E","E","0"],["E","E","A","A","E","E"],["E","E","A","A","E","E"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]],[["0","E","E","E","E","0"],["E","E","E","A","A","E"],["E","E","E","A","A","E"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]],[["0","E","E","E","E","0"],["E","E","E","E","A","A"],["E","E","E","E","A","A"],["0","E","E","E","E","0"],["0","0","E","E","0","0"]]],offSets:[],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},5051:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(224);t.default=function(){return{explosionCenterFrame:[["0"]],particleFrames:[[["0","0","V","V","V","0","0"],["0","V","0","0","0","V","0"],["V","0","0","0","0","0","V"]]],angles:[r.angles.up],particleFrameIndexes:[0],speed:10,acceleration:1,explosionCenterDelay:0,speeds:[],useSpeed:!0}}},7374:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["V","0","0","0","0","0","V"],["0","V","0","0","0","V","0"],["0","0","V","V","V","0","0"]],[["0","0","V","V","V","0","0"],["0","V","0","0","0","V","0"],["V","0","0","0","0","0","V"]]],offSets:[{top:-2,left:0}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},6479:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(3813)),a=r(n(1501)),i=n(4395),l=r(n(2584)),u=n(1813),s=r(n(152));class c extends o.default{constructor(e,t,n,r,o){super(e,t,n,r,o),this.colorTickHandler=new l.default(40,(()=>this.onColorChange())),s.default.Frame.setColor(this.explosion.explosionCenterFrame,a.default.white),this.explosion.particleFrames.forEach((e=>s.default.Frame.setColor(e,a.default.white)))}alterState(e){this.colorTickHandler.tick(e)}getPoints(){return i.Points.bird}onColorChange(){const e=this.frameProvider.getCurrentFrame();this.setCurrentFrameColor(e)}setCurrentFrameColor(e){s.default.Frame.setColor(e,u.getRandomArrayElement(i.ColorSchemes.birds)),this.currentFrame=e}onFrameChange(){const e=this.frameProvider.getNextFrame();this.setCurrentFrameColor(e)}}t.default=c},6774:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["0","V","0","V","0"],["V","0","V","0","V"],["V","0","0","0","V"]],[["0","V","V","0","V","V","0"],["V","0","0","V","0","0","V"],["0","0","0","0","0","0","0"]],[["V","V","V","0","V","V","V"],["0","0","0","V","0","0","0"]],[["V","0","0","0","0","0","V"],["0","V","V","0","V","V","0"],["0","0","0","V","0","0","0"]]],offSets:[{top:1,left:1},{top:1,left:0},{top:1,left:0},{top:0,left:0}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},7395:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["E","0","C","C","C","C","0","0"],["0","E","0","0","A","A","A","0"],["E","0","0","0","0","0","0","A"],["0","E","0","0","A","A","A","0"],["E","0","C","C","C","C","0","0"]],[["0","E","C","C","C","C","0","0"],["E","0","0","0","A","A","A","0"],["0","E","0","0","0","0","0","A"],["E","0","0","0","A","A","A","0"],["0","E","C","C","C","C","0","0"]]],offSets:[{left:0,top:0},{left:0,top:-2},{left:0,top:-4},{left:0,top:-6},{left:0,top:-4},{left:0,top:-2},{left:0,top:0}],maxSizes:{width:0,height:0}};return e.frames=[...e.frames,...e.frames,...e.frames],e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},9599:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4395),a=r(n(9519)),{gameField:i,pixelSize:l}=a.default();t.default=function(){const e=[];let t=i.left+5*l;const n=10*l;for(let r=0;r<13;r++){const r={left:t,top:o.Locations.Boat.topStart};t+=n,e.push(r)}return e}},1810:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e=[[["0","V","V","0"],["V","V","V","V"],["V","V","V","V"],["0","V","V","0"]],[["0","V","V"],["V","0","V"],["0","V","V"],["0","V","V"]],[["V","0"],["0","V"],["V","0"],["0","V"]],[["0","V"],["V","0"]],[["0"]],[["0"]]],t={frames:[],offSets:[{left:0,top:0},{left:0,top:0},{left:0,top:0},{left:0,top:0},{left:1,top:0},{left:1,top:1}],maxSizes:{width:0,height:0}};return t.frames.push(e[0]),t.frames.push(e[0]),e.forEach((e=>t.frames.push(e))),t.maxSizes=r.getMaximumFrameDimensions(t.frames),t}},4993:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["0","E","E","E","0"],["E","1","1","1","E"],["E","F","1","F","E"],["E","1","1","1","E"],["E","E","0","E","E"]],[["0","E","E","E","0"],["E","1","1","1","E"],["E","F","1","F","E"],["E","1","1","1","E"],["0","E","0","E","0"],["E","0","0","0","E"]],[["0","E","E","E","0"],["E","1","1","1","E"],["E","F","1","F","E"],["E","1","1","1","E"],["0","E","0","E","0"],["0","E","0","E","0"]],[["0","E","E","E","0"],["E","1","1","1","E"],["E","F","1","F","E"],["E","1","1","1","E"],["0","E","E","E","0"]]],offSets:[{left:-2,top:0},{left:0,top:0},{left:2,top:0},{left:1,top:0}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e.frames=[...e.frames,...e.frames.reverse()],e}},1794:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(3813)),a=r(n(152));class i extends o.default{constructor(e,t,n,r,o,i,l){if(super(t,n,r,o,i),this.points=e,void 0!==l&&void 0!==l.explosionColor?a.default.Frame.setColor(this.explosion.explosionCenterFrame,l.explosionColor):a.default.Frame.convertHexToCGA(this.explosion.explosionCenterFrame),void 0!==l&&void 0!==l.explosionParticleColor){const e=l.explosionParticleColor;this.explosion.particleFrames.forEach((t=>a.default.Frame.setColor(t,e)))}else this.explosion.particleFrames.forEach((e=>a.default.Frame.convertHexToCGA(e)));void 0!==l&&l.varyingEnemyColor&&(this.color=l.varyingEnemyColor)}onFrameChange(){const e=this.frameProvider.getNextFrame();void 0===this.color?a.default.Frame.convertHexToCGA(e):a.default.Frame.setColor(e,this.color),this.currentFrame=e}getPoints(){return this.points}alterState(e){}}t.default=i},339:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["0","4","4","0"],["0","0","0","0"],["4","2","2","4"],["0","0","0","0"],["4","0","0","4"]],particleFrames:[[["4"]],[["4","2"]],[["2","4"]]],angles:[160,180,200,340,0,20],particleFrameIndexes:[0,1,0,0,2,0],speed:17,acceleration:1.05,explosionCenterDelay:30,speeds:[],useSpeed:!0}}},8977:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["0","4","4","0"],["4","4","4","4"],["A","4","A","4"],["4","4","4","4"],["4","4","4","4"],["4","0","4","0"],["4","0","4","0"]],[["0","4","4","0"],["4","4","4","4"],["4","A","4","A"],["4","4","4","4"],["4","4","4","4"],["0","4","0","4"],["0","4","0","4"]]],offSets:[],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},1738:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["9","9","9","9"],["9","9","9","9"],["4","0","0","0"],["4","0","0","0"],["9","9","9","9"],["9","9","9","9"]],[["9","9","9","9"],["9","9","9","9"],["0","4","0","0"],["0","4","0","0"],["9","9","9","9"],["9","9","9","9"]],[["9","9","9","9"],["9","9","9","9"],["0","0","4","0"],["0","0","4","0"],["9","9","9","9"],["9","9","9","9"]],[["9","9","9","9"],["9","9","9","9"],["0","0","0","4"],["0","0","0","4"],["9","9","9","9"],["9","9","9","9"]]],offSets:[],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},1749:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(3813)),a=r(n(152));class i extends o.default{constructor(e,t,n,r,o){super(0,t,n,r,o),this.points=e,a.default.Frame.convertHexToCGA(this.explosion.explosionCenterFrame),this.explosion.particleFrames.forEach((e=>a.default.Frame.convertHexToCGA(e))),this.locationDirectionProvider=r}alterState(){"left"===this.locationDirectionProvider.getDirection()?0!==this.frameProvider.getCurrentIndex()&&this.frameProvider.getNextFrame():"right"===this.locationDirectionProvider.getDirection()&&1!==this.frameProvider.getCurrentIndex()&&this.frameProvider.getNextFrame()}onFrameChange(){const e=this.frameProvider.getCurrentFrame();a.default.Frame.convertHexToCGA(e),this.currentFrame=e}getPoints(){return this.points}}t.default=i},479:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.FishEnemy=void 0;const o=r(n(9519)),a=r(n(152)),i=r(n(1749)),l=n(4027),{pixelSize:u}=o.default(),s=-2.5*u,c=-6*u;class d extends i.default{alterState(){if(super.alterState(),this.locationDirectionProvider.isAttacking()){const e=l.getFishFireFrame();a.default.Frame.convertHexToCGA(e),this.currentFrame=e}else{const e=this.frameProvider.getCurrentFrame();a.default.Frame.convertHexToCGA(e),this.currentFrame=e}}onFrameChange(){}getNozzleLocation(){const e=super.getNozzleLocation();return void 0!==e&&(e.left+=s,e.top+=c),e}}t.FishEnemy=d},5459:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(224);t.default=function(){return{explosionCenterFrame:[["0"]],particleFrames:[[["B","B"],["0","0"],["4","4"],["0","0"],["D","D"],["0","0"],["D","D"],["0","0"],["4","4"]],[["A","A"],["0","0"],["7","7"],["0","0"],["E","E"],["0","0"],["E","E"],["0","0"],["7","7"],["0","0"],["A","A"]]],angles:[r.angles.left,r.angles.right],particleFrameIndexes:[0,1],speed:10,acceleration:1,explosionCenterDelay:0,speeds:[],useSpeed:!0}}},4027:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getFishFireFrame=void 0;const r=n(3640);t.default=function(){const e={frames:[[["0","0","0","0","0","A"],["0","0","0","0","B","0"],["0","0","0","7","7","0"],["0","0","C","C","C","C"],["0","E","E","E","E","0"],["D","D","D","D","D","D"],["0","E","E","E","E","0"],["0","0","C","C","C","C"],["0","0","0","7","7","0"],["0","0","0","0","B","0"],["0","0","0","0","0","A"]],[["A","0","0","0","0","0"],["0","B","0","0","0","0"],["0","7","7","0","0","0"],["C","C","C","C","0","0"],["0","E","E","E","E","0"],["D","D","D","D","D","D"],["0","E","E","E","E","0"],["C","C","C","C","0","0"],["0","7","7","0","0","0"],["0","B","0","0","0","0"],["A","0","0","0","0","0"]]],offSets:[{left:0,top:0},{left:0,top:0},{left:2,top:0}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e},t.getFishFireFrame=function(){return[["A","A"],["B","B"],["7","7"],["C","C"],["E","E"],["D","D"],["E","E"],["C","C"],["7","7"],["B","B"],["A","A"]]}},1843:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e=[["0","V0","V0","0"],["V0","V1","V1","V0"],["V0","V1","V1","V0"],["0","V0","V0","0"]],t={frames:[],offSets:[{left:0,top:0},{left:0,top:-2},{left:0,top:-4},{left:0,top:-6},{left:2,top:-6},{left:4,top:-6},{left:6,top:-6},{left:6,top:-4},{left:6,top:-2},{left:6,top:0},{left:4,top:0},{left:2,top:0}],maxSizes:{width:0,height:0}};return t.offSets.forEach((()=>{t.frames.push(e)})),t.maxSizes=r.getMaximumFrameDimensions(t.frames),t}},1300:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4395),a=r(n(9519)),{pixelSize:i}=a.default(),l=[],u=o.Locations.Orb.topStart;let s=16*i;const c=6*i;for(let e=0;e<22;e++){const e={left:s,top:u};s+=c,l.push(e)}t.default=l},7532:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(3813)),a=r(n(1501)),i=n(4395),l=r(n(2584)),u=r(n(9519)),s=n(3640),c=r(n(152)),{gameField:d}=u.default();class f extends o.default{constructor(e,t,n,r,o){super(e,t,n,r,o),this.currentColorIndex=0,this.updateCurrentFrameAndColor(this.frameProvider.getCurrentFrame()),c.default.Frame.setColor(this.explosion.explosionCenterFrame,a.default.magenta),this.explosion.particleFrames.forEach((e=>c.default.Frame.setColor(e,a.default.magenta))),this.colorTickHandler=new l.default(100,(()=>this.onColorChange()))}onColorChange(){this.currentColorIndex++,this.currentColorIndex>=i.ColorSchemes.Enemies.orb.length&&(this.currentColorIndex=0),this.updateCurrentFrameAndColor(this.frameProvider.getCurrentFrame())}updateCurrentFrameAndColor(e){const t=i.ColorSchemes.Enemies.orb[this.currentColorIndex];if(void 0===t)throw new Error("Color cannot be undefined.");c.default.Frame.setColor(e,...t),this.currentFrame=e}onFrameChange(){const e=this.frameProvider.getNextFrame();this.updateCurrentFrameAndColor(e)}alterState(e){if(this.colorTickHandler.tick(e),this.currentFrame){const{height:e}=s.getFrameDimensions(this.currentFrame),{top:t}=this.locationProvider.getCurrentLocation(),n=t-this.offsetTop;this.offsetTop<d.top?this.offsetTop=i.Locations.Orb.maxBottom-n:this.offsetTop+e>i.Locations.Orb.maxBottom&&(this.offsetTop=d.top+n)}}getPoints(){return 200}}t.default=f},7307:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["3","3","3"],["C","3","C"],["C","C","C"],["C","3","C"],["0","3","0"]],[["3","3","3"],["C","3","C"],["C","C","C"],["C","3","C"],["0","3","0"]],[["3","3","3"],["C","3","C"],["C","C","C"],["C","3","C"],["0","3","0"]],[["3","3","3"],["0","3","0"],["C","3","C"],["C","C","C"],["C","3","C"]],[["3","3","3"],["0","3","0"],["0","3","0"],["C","3","C"],["C","C","C"],["C","0","C"]]],offSets:[{left:0,top:0},{left:0,top:0},{left:0,top:0},{left:0,top:-1},{left:0,top:-2}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},3073:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){let e=0;const t={frames:[[["0","V","V","V","0"],["V","V","V","V","V"],["V","0","V","0","V"],["V","V","V","V","V"],["V","0","0","0","V"],["V","V","V","V","V"],["0","V","0","V","0"],["0","V","0","V","0"],["V","V","0","V","V"]],[["0","V","V","V","0"],["V","V","V","V","V"],["V","0","V","0","V"],["V","V","V","V","V"],["V","0","0","0","V"],["V","V","V","V","V"],["0","V","0","V","0"],["V","V","0","V","V"]],[["0","V","V","V","0"],["V","V","V","V","V"],["V","0","V","0","V"],["V","V","V","V","V"],["V","0","0","0","V"],["V","V","V","V","V"],["V","V","0","V","V"]]],offSets:[{top:e,left:0},{top:e,left:0},{top:e,left:0},{top:++e,left:0},{top:++e,left:0},{top:e+=1,left:0},{top:e+=1,left:0},{top:e+=2,left:0},{top:e+=1,left:0}],maxSizes:{width:0,height:0}};return t.frames=[t.frames[0],t.frames[0],t.frames[0],t.frames[0],t.frames[0],t.frames[0],...t.frames],t.maxSizes=r.getMaximumFrameDimensions(t.frames),t}},6628:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4395),a=r(n(9519)),{pixelSize:i}=a.default(),l=[],u=o.Locations.robot.topStart;let s=12*i;const c=8*i;for(let e=0;e<14;e++){const e={left:s,top:u};s+=c,l.push(e)}t.default=l},9151:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["7","7"],["7","7"],["7","7"],["7","7"],["7","7"]],[["0","0","7","7","0","0"],["0","0","7","7","0","0"],["0","0","7","7","0","0"],["0","7","0","0","7","0"],["7","0","0","0","0","7"]]],offSets:[{left:2,top:0},{left:0,top:0}],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},7346:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(3813)),a=n(4395),i=r(n(9519)),l=n(1813),u=r(n(152)),{pixelSize:s}=i.default(),c=55*s;class d extends o.default{constructor(e,t,n,r,o){super(e,t,n,r,o),this.jawsClosed=!0;const i=l.getRandomArrayElement(a.ColorSchemes.Explosions.spaceMonster);u.default.Frame.setColor(this.explosion.explosionCenterFrame,i),this.explosion.particleFrames.forEach((e=>u.default.Frame.setColor(e,i)))}alterState(){this.offsetTop>=c&&this.jawsClosed?(this.frameProvider.getNextFrame(),this.jawsClosed=!1):this.offsetTop<c&&!1===this.jawsClosed&&(this.frameProvider.getNextFrame(),this.jawsClosed=!0)}getPoints(){return a.Points.spaceMonster}onFrameChange(){const e=this.frameProvider.getCurrentFrame();u.default.Frame.convertHexToCGA(e),this.currentFrame=e}}t.default=d},2145:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3640);t.default=function(){const e={frames:[[["0","A","0"],["0","C","0"],["0","A","0"]],[["0","0","A"],["0","C","0"],["A","0","0"]],[["0","0","0"],["A","C","A"],["0","0","0"]],[["A","0","0"],["0","C","0"],["0","0","A"]]],offSets:[],maxSizes:{width:0,height:0}};return e.maxSizes=r.getMaximumFrameDimensions(e.frames),e}},7472:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8851));class a extends o.default{getNextFrame(){return this.frameIndex+=this.add,this.frameIndex>this.maxIndex&&(this.frameIndex=this.maxIndex),this.frameIndex!==this.maxIndex&&0!==this.frameIndex||(this.add*=-1),this.getCurrentFrame()}}t.default=a},4273:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8851));class a extends o.default{getNextFrame(){return this.frameIndex+=1,this.frameIndex>this.maxIndex&&(this.frameIndex=0),this.getCurrentFrame()}}t.default=a},7913:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameLoop=void 0;const l=n(4395),u=n(2757),s=n(4974),c=n(7855),d=i(n(4039)),f=n(5172),p=i(n(8024)),m=i(n(5790)),h=a(n(2326)),g=i(n(4244)),v=n(8278),y=n(3892),b=n(4898),_=n(5695),w=n(9096),S=n(6997),E=n(159);let x,k,P=[],C=[],V=[],O=[],A=[],L=[];var F;!function(e){function t(){e.registerForegroundDrawing(c.drawStatusBar),e.registerForegroundDrawing(s.drawGameFieldBorder),e.registerUpdateState(g.default),e.registerUpdateState(m.default),e.registerUpdateState(h.default),e.registerUpdateState(d.default),E.registerListeners(),x=window.requestAnimationFrame(r)}function n(){void 0!==x&&window.cancelAnimationFrame(x),v.SoundPlayer.stopBackground(),P=[],C=[],V=[],O=[],A=[],L=[],E.unregisterListeners(),S.dispatch(b.resetScore())}function r(e){x=window.requestAnimationFrame(r);const{gameState:{pause:o,gameOver:a,enemiesHit:i,bulletsFired:s,score:c}}=S.appState();if(L.forEach((e=>e(o))),o)return;if(a){if(n(),h.resetLevelProgression(),S.dispatch(w.setPlayerLocationData(l.Locations.Player.spawnLocation.left,l.Locations.Player.spawnLocation.top)),S.dispatch(_.resetKeyboardState()),S.dispatch(w.setPlayerIsAlive(!1)),S.dispatch(b.gameStart()),p.default.setNewEnemies([]),S.dispatch(y.resetLevelState()),void 0!==k){const e=document.getElementById("canvas");return e&&(e.width=0,e.height=0,e.style.left="0px",e.style.top="0px",e.style.width="0px",e.style.height="0px"),void k({bulletsFired:s,score:c,enemiesHit:i})}t()}P.forEach((t=>t(e))),O.forEach((e=>e())),C.forEach((e=>e())),A.forEach((e=>e())),A=[],V.forEach((e=>e()));const{debuggingState:d}=S.appState();d.drawHitboxes&&u.DEBUGGING_renderHitboxes(),d.drawGrid&&u.DEBUGGING_drawGrid(d.gridDetail)}e.init=function(e){e&&(k=e),f.Canvas.setCanvasDimensions(),S.dispatch(b.setGameInProgress(!0)),t()},e.stop=n,e.registerUpdateState=function(e){return P.push(e),()=>{P=P.filter((t=>t!==e))}},e.registerBackgroundDrawing=function(e){return C.push(e),()=>{C=C.filter((t=>t!==e))}},e.registerForegroundDrawing=function(e){return V.push(e),()=>{V=V.filter((t=>t!==e))}},e.registerLevelWonMonitor=function(e){return O.push(e),()=>{O=O.filter((t=>t!==e))}},e.registerDraw=function(e){A.push(e)},e.registerSoundRunner=function(e){return L.push(e),()=>{L=L.filter((t=>t!==e))}}}(F=t.GameLoop||(t.GameLoop={})),t.default=F},2359:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1501)),a=r(n(7913)),i=r(n(9519)),l=r(n(143)),u=r(n(1700)),s=r(n(6124)),c=r(n(2137)),d=n(3640),f=r(n(5801)),{pixelSize:p,gameField:m}=i.default(),h=l.default(),g=s.default(o.default.lightGreen),v=c.default(o.default.lightGreen),y=[f.default(g,"R"),f.default(g,"O"),f.default(g,"U"),f.default(g,"N"),f.default(g,"D")],{width:b}=d.getFrameDimensions(y[0]),_=.33*m.bottom,w=26*p,S=30*p,E=76*p,x=2*p;t.default=function(e,t){let n=0;void 0!==e&&(n=e);const r=a.default.registerBackgroundDrawing((()=>function(e){let t,n=_;for(let e=0;e<3;e++)t=e%2==0?o.default.red:o.default.brown,h.fillStyle=t,h.fillRect(w,n,S,p),h.fillRect(w+E,n,S,p),n+=2*p;let r,a,i,l,s=0;for(let e=0;e<5;e++){const t=w+S+2*x+(0===e?0:x*e)+b*e;s=t,u.default(t,_,y[e])}s+=b+x;const c=e.toString(),f=s+b+x;e>=10?(r=c[0],a=c[1],i=d.getFrameByIndex(v,parseInt(r,10)),l=d.getFrameByIndex(v,parseInt(a,10))):(a=c,l=d.getFrameByIndex(v,parseInt(a,10))),r&&i&&u.default(s,_,i),u.default(f,_,l)}(n)));window.setTimeout((()=>{r(),t()}),1e3)}},4974:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.drawWarpBackground=t.drawGameFieldBorder=t.drawBackground=void 0;const o=r(n(1501)),a=n(4395),i=r(n(9519)),l=r(n(143)),{pixelSize:u,gameField:s,statusBarBottom:c,fullGameWidth:d}=i.default();t.drawBackground=function(){!function(){const e=l.default();e.fillStyle=o.default.black,e.fillRect(s.left,s.top,s.right,s.bottom)}()},t.drawGameFieldBorder=function(){const e=l.default();e.fillStyle=o.default.blue,e.fillRect(0,c,d,u),e.fillRect(s.right,c,u,s.bottom),e.fillRect(0,s.bottom,d,u),e.fillRect(0,c,u,s.bottom)},t.drawWarpBackground=function(e,t){const n=l.default();let r=!0,i=a.WarpLevelConstants.left;for(;a.WarpLevelConstants.right>=i;)r?(n.fillStyle=o.default.white,r=!1):(n.fillStyle=e,r=!0),n.fillRect(i,a.WarpLevelConstants.top,u,a.WarpLevelConstants.height),i+=u;n.fillStyle="black",t.forEach((e=>n.fillRect(e.left,e.top,e.right-e.left,e.bottom-e.top)))}},7855:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.drawStatusBar=void 0;const o=r(n(1501)),a=n(6458),i=r(n(9519)),l=r(n(143)),u=r(n(1700)),s=r(n(2137)),c=n(6997),d=n(3640),f=r(n(152)),p=n(3559),m=l.default(),{pixelSize:h,fullGameWidth:g}=i.default(),v=s.default(o.default.yellow),y=a.getPlayerFrame();f.default.Frame.setColor(y,o.default.yellow);const b=4*h,_=2*h,w=45*h,S=2*h,E=50*h,x=[["E","0"],["E","0"],["E","E"],["0","E"],["0","E"]];f.default.Frame.convertHexToCGA(x);const k=2*h,P=d.getFrameDimensions(y).width,C=148*h,V=154*h,O=6*h;t.drawStatusBar=function(){m.fillStyle=o.default.red,m.fillRect(0,0,g,O),function(){const{gameState:e}=c.appState(),t=p.padLeft(e.score.toString(),6,"0");let n=0;for(const e of t){const t=d.getFrameByIndex(v,parseInt(e,10)),r=0===n?0:_;let o=n*(d.getFrameDimensions(t).width+r);o=b+o,u.default(o,0,t),n++}}(),function(){const{gameState:e}=c.appState(),t=e.phasers<11?e.phasers:11;for(let e=0;e<t;e++){const t=w+e*h+e*(0===e?0:S);t<=w+E&&u.default(t,0,x)}}(),function(){const{gameState:e}=c.appState();let t=135*h;const n=e.lives<=8?e.lives:8;for(let e=1;e<=n;e++)u.default(t,h,y),t-=k+P}(),function(){const{gameState:e}=c.appState();let t="0";void 0!==e.level&&(t=p.padLeft(e.level.toString(),2,"0"));const n=parseInt(t[1],10),r=parseInt(t[0],10),o=d.getFrameByIndex(v,n),a=d.getFrameByIndex(v,r);u.default(C,0,a),u.default(V,0,o)}()}},3819:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8629);var o;!function(e){e.isValidGameKey=function(e){return-1!==r.KeybindingsMapping.getAllGameKeys().indexOf(e)},e.isEnemy=function(e){return e&&"enemy"===e.getObjectType()},e.isPlayerAlive=function(e){return e.alive&&void 0!==e.hitboxes&&void 0!==e.nozzleLocation}}(o||(o={})),t.default=o},8576:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.playerMovementHandler=void 0;const o=n(6458),a=r(n(9519)),i=n(9096),l=n(6997),u=n(3640),s=n(3855),{pixelSize:c,gameField:d}=a.default(),f=2*c,p=.6*c,{width:m,height:h}=u.getFrameDimensions(o.getPlayerFrame());t.playerMovementHandler=function(e,t){const{keyboardState:n,playerState:r}=l.appState(),o=Object.assign({},n);switch(r.moveLimit){case"immobile":return;case"sideways":o.down=o.up=!1;break;case"forceup":o.up=!0,o.down=!1,t=l.appState().speedState.movement.Player.warpUpSpeed}const a=s.getAngle(o),{left:g,top:v}=function(e,t,n,r,o){const a={left:r,top:o};if(-1===e)return a;const i=s.getNextX(e,t,r),l=s.getNextY(e,n,o);return i<d.left||i+m>d.right||l+h>d.bottom||l<d.top?a:{left:i,top:l}}(a,e,t,r.left,r.top),y=u.getFrameHitbox(g,v,r.coloredFrame,0),b={middle:Object.assign(Object.assign({},y),{left:y.left+f+p,right:y.right-f-p,top:y.top+p,bottom:y.bottom-p}),bottom:Object.assign(Object.assign({},y),{top:y.top+c+p,left:y.left+p,right:y.right-p,bottom:y.bottom-p})},_={left:g+2*c,top:v};l.dispatch(i.setPlayerLocationData(g,v,b,_))}},2584:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2536);t.default=class{constructor(e,t){this.lastTick=0,this.time=e,this.baseTime=e,this.onTimePassed=t}tick(e){e-this.lastTick>=this.time&&(this.onTimePassed(e),this.lastTick=e)}increaseSpeed(e){this.time=r.calculateTimeSpeedIncrease(this.baseTime,e)}}},3489:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7913)),a=r(n(2359)),i=n(4974),l=r(n(2587)),u=r(n(8024)),s=n(8278),c=n(3892),d=n(9096),f=n(6997),p=r(n(8916));t.default=class{constructor(e){this.enemy=e,this.subscriptions=[],this.enemy=e}registerSubscription(e){this.subscriptions.push(e)}begin(){return new Promise((e=>{const{enemies:t,bulletRunner:n}=l.default(this.enemy),{gameState:r}=f.appState();f.dispatch(d.setPlayerMovementLimit("immobile")),this.registerSubscription(o.default.registerBackgroundDrawing(i.drawBackground));let c=0;void 0!==r.level&&(c=r.level),a.default(c,(()=>{this.registerSubscription(o.default.registerUpdateState(u.default.run)),void 0!==n&&this.registerSubscription(o.default.registerUpdateState((e=>n.updateState(e)))),u.default.setNewEnemies(t),this.registerSubscription(o.default.registerLevelWonMonitor((()=>this.monitorLevelWonRun()))),this.registerSubscription(o.default.registerSoundRunner((()=>this.updateSound()))),this.registerSubscription(o.default.registerSoundRunner(s.SoundPlayer.ensureBackground)),f.dispatch(d.setPlayerMovementLimit("none")),e()}))}))}dispose(){u.default.setNewEnemies([]),f.dispatch(c.resetLevelState()),this.subscriptions.forEach((e=>e())),this.subscriptions=[],s.SoundPlayer.stopBackground()}monitorLevelWonRun(){this.levelClear()&&p.default()}levelClear(){const{enemyLevelState:{enemies:e,shrapnells:t}}=f.appState();return 0===e.length&&0===t.length}updateSound(){const{enemyLevelState:{enemies:e}}=f.appState();(void 0===this.currentEnemyCount||this.currentEnemyCount!==e.length)&&(s.SoundPlayer.playEnemyBackgroundSound(this.enemy,e.length),this.currentEnemyCount=e.length)}}},618:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.levelFactory=void 0;const o=n(4898),a=n(6997),i=r(n(3489)),l=n(8841),u=r(n(418));t.levelFactory=function(e){const{gameState:{hardMode:t}}=a.appState();switch(e){case 0:return new u.default;case 1:return t?new i.default("bird-fire"):new i.default("bird");case 2:return t?new i.default("robots-random"):new i.default("robot");case 3:return t?new i.default("orb-up-down"):new i.default("orb");case 4:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(0)),new u.default;case 5:return new i.default("spinner");case 6:return new i.default("balloon");case 7:return t?new l.TimeLimitLevel("asteroid-diagonal"):new l.TimeLimitLevel("asteroid-down");case 8:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(1)),new u.default;case 9:return new i.default("piston");case 10:return t?new i.default("diabolo-hard"):new i.default("diabolo");case 11:return t?new l.TimeLimitLevel("spacemonster-diagonal"):new l.TimeLimitLevel("spacemonster-down");case 12:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(2)),new u.default;case 13:return new i.default("devil");case 14:return new i.default("balloon");case 15:return new l.TimeLimitLevel("asteroid-diagonal");case 16:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(3)),new u.default;case 17:return new i.default("crab");case 18:return new i.default("bat");case 19:return new l.TimeLimitLevel("spacemonster-diagonal");case 20:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(4)),new u.default;case 21:return new i.default("piston");case 22:return new i.default("boat");case 23:return new i.default("cloaking-orb");case 24:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(5)),new u.default;case 25:return new i.default("orb-up-down");case 26:return new l.TimeLimitLevel("asteroid-diagonal");case 27:return new l.TimeLimitLevel("spacemonster-diagonal");case 28:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(6)),new u.default;case 29:return new i.default("robots-random");case 30:return new i.default("boat");case 31:return new i.default("orb-up-down");case 32:return t?a.dispatch(o.setWarpGamteComplexity(8)):a.dispatch(o.setWarpGamteComplexity(7)),new u.default;case 33:return new i.default("piston");case 34:return new i.default("bird-fire");case 35:return a.dispatch(o.setWarpGamteComplexity(8)),new u.default;case 36:case 37:return a.dispatch(o.setWarpGamteComplexity(8)),new u.default;case 38:return new i.default("spinner");case 39:case 40:case 41:return a.dispatch(o.setWarpGamteComplexity(8)),new u.default;case 42:return new i.default("fish");default:return new i.default("crab")}}},8841:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.TimeLimitLevel=void 0;const o=r(n(7913)),a=r(n(2955)),i=r(n(8024)),l=n(8278),u=n(6997),s=r(n(8916)),c=r(n(3489));class d extends c.default{constructor(){super(...arguments),this.timeUp=!1,this.tickCount=0}begin(){return super.begin().then((()=>{this.registerSubscription(o.default.registerUpdateState((()=>this.handleRespawn()))),this.intervalHandle=window.setInterval((()=>{const{gameState:{pause:e,timeLevelTimeLimit:t}}=u.appState();e||(this.tickCount+=1e3),this.tickCount>=t&&(this.timeUp=!0)}),1e3)}))}handleRespawn(){const{enemyLevelState:{enemies:e}}=u.appState(),t="asteroid-diagonal"===this.enemy||"spacemonster-diagonal"===this.enemy?10:8;if(e.length<t){const e=a.default(this.enemy);i.default.addEnemy(e)}}monitorLevelWonRun(){const{playerState:{alive:e}}=u.appState();this.timeUp&&e&&s.default()}dispose(){super.dispose(),l.SoundPlayer.stopFalling(),void 0!==this.intervalHandle&&window.clearInterval(this.intervalHandle)}}t.TimeLimitLevel=d},418:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1501)),a=n(4395),i=n(2757),l=r(n(7913)),u=r(n(2359)),s=n(4974),c=r(n(3819)),d=r(n(9519)),f=n(8278),p=n(4898),m=n(9096),h=n(6997),g=r(n(8916)),v=r(n(6070)),y=n(1813),b=n(2536),_=n(3279),w=[o.default.brown,o.default.green,o.default.magenta,o.default.blue],{pixelSize:S,fullGameWidth:E,gameField:x}=d.default(),k=E/2-16*S/2;t.default=class{constructor(){this.gameLoopSubscriptions=[]}begin(){return new Promise((e=>{h.dispatch(m.setPlayerMovementLimit("immobile")),h.dispatch(m.setPlayerLocationData(a.Locations.Player.spawnLocation.left,a.Locations.Player.spawnLocation.top)),this.gameLoopSubscriptions.push(l.default.registerBackgroundDrawing(s.drawBackground));const t=Math.ceil(Math.random()*w.length-1),n=w[t],{gameState:r}=h.appState();u.default(r.level,(()=>{const t=this.calculateWarpGate(x.left,x.right,r.warpLevelSteps.stepsX,r.warpLevelSteps.stepsY),o=this.getWallHitboxes(t);this.gameLoopSubscriptions.push(l.default.registerBackgroundDrawing((()=>s.drawWarpBackground(n,t)))),this.gameLoopSubscriptions.push(l.default.registerLevelWonMonitor((()=>this.monitorLevelWon()))),this.gameLoopSubscriptions.push(l.default.registerUpdateState((e=>this.hitDetection(e,o)))),window.setTimeout((()=>{this.gameLoopSubscriptions.push(l.default.registerSoundRunner((()=>this.soundRunner()))),h.dispatch(m.setPlayerMovementLimit("forceup")),f.SoundPlayer.playTravelingWarpGate(),e()}),1e3)}))}))}soundRunner(){const{playerState:{alive:e},gameState:{pause:t}}=h.appState();t?f.SoundPlayer.pauseWarpLevelTravellingSound():e?f.SoundPlayer.ensureWarpLevelBackground(t):f.SoundPlayer.pauseWarpLevelTravellingSound()}getWallHitboxes(e){return e.map((e=>({left:{left:x.left,right:e.left,top:e.top,bottom:e.bottom},right:{left:e.right,right:x.right,top:e.top,bottom:e.bottom}})))}hitDetection(e,t){const{playerState:n,debuggingState:r}=h.appState();if(!c.default.isPlayerAlive(n))return;const{hitboxes:o,alive:a}=n;t.some((e=>{const{left:t,right:n}=e,{middle:r,bottom:a}=o;return _.fallsWithin(a.left,a.right,a.top,a.bottom,t.left,t.right,t.top,t.bottom)||_.fallsWithin(a.left,a.right,a.top,a.bottom,n.left,n.right,n.top,n.bottom)||_.fallsWithin(r.left,r.right,r.top,r.bottom,t.left,t.right,t.top,t.bottom)||_.fallsWithin(r.left,r.right,r.top,r.bottom,n.left,n.right,n.top,n.bottom)}))&&a&&v.default(e),r.drawHitboxes&&t.forEach((e=>{l.default.registerDraw((()=>i.DEBUGGING_drawGameRect(e.left,"red"))),l.default.registerDraw((()=>i.DEBUGGING_drawGameRect(e.right,"red")))}))}monitorLevelWon(){this.reachedEnd()&&(f.SoundPlayer.warpLeveEnd(),g.default(),h.dispatch(p.increaseScore(y.getRandomArrayElement(a.Points.warpLevel))),h.dispatch(m.setPlayerLocationData(a.Locations.Player.spawnLocation.left,a.Locations.Player.spawnLocation.top)))}reachedEnd(){const{playerState:{top:e}}=h.appState();return e<x.top+3*S}calculateWarpGate(e,t,n,r){const o=[];let i=k,l=a.WarpLevelConstants.bottom;const u=a.WarpLevelConstants.heightPixelCount;let s=0,c=y.getRandomArrayElement(r),d=y.getRandomArrayElement(n);for(;s+c<u;){const u=c*S,f={left:i,top:l-u,right:i+a.WarpLevelConstants.width,bottom:l},p=d*S;b.coinFlip()?i-=p:i+=p,(i<=e||i+a.WarpLevelConstants.width>=t)&&(i*=-1),l-=u,s+=c,o.push(f),c=y.getRandomArrayElement(r),d=y.getRandomArrayElement(n)}if(0!==s){const e={left:i,top:a.WarpLevelConstants.top,right:i+a.WarpLevelConstants.width,bottom:l};o.push(e)}return o}dispose(){f.SoundPlayer.stopBackground(),this.gameLoopSubscriptions.forEach((e=>e()))}}},5950:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(6227)),a=n(3279);class i extends o.default{constructor(e,t,n,r,o,a,i,l){super(e,t,n,r,o,a),this.topLimit=i,this.bottomLimit=l}updateState(e){const{location:{left:t,top:n},angle:r}=a.getNextLocationAndAngle(this.left,this.top,this.angle,this.speed,this.width,this.height,this.topLimit,this.bottomLimit);this.left=t,this.top=n,this.angle=r}}t.default=i},1665:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(3819)),i=n(6997),l=n(1813),u=n(3855),s=n(3279);t.default=class{constructor(e,t,n,r,o,a,i,u){this.left=e,this.top=t,this.sideAngles=r,this.width=o,this.height=a,this.topLimit=i,this.bottomLimit=u,this.baseSpeed=n,this.speed=n(),this.angle=l.getRandomArrayElement(r),this.attacking=!1,this.recovering=!1}isAttacking(){return this.attacking||this.recovering}getDirection(){let e=u.getLeftOrRightFromAngle(this.angle);return void 0===e&&(e=u.getUpOrDownFromAngle(this.angle)),e}getCurrentLocation(){return{left:this.left,top:this.top}}increaseSpeed(e){this.speed=this.baseSpeed()*e}updateState(e){const{playerState:t}=i.appState();if(a.default.isPlayerAlive(t)){const{hitboxes:{bottom:e}}=t;this.left>e.left&&this.left<e.right&&!1===this.recovering&&!1===this.attacking?(this.angle=o.angles.down,this.attacking=!0):this.top-this.height<=this.topLimit&&this.recovering?(this.recovering=!1,this.angle=l.getRandomArrayElement(this.sideAngles)):this.top>=this.bottomLimit&&this.attacking&&(this.recovering=!0,this.attacking=!1,this.angle=o.angles.up)}if(this.attacking||this.recovering){const{left:e,top:t}=s.getLocation(this.left,this.top,this.angle,this.speed);this.left=e,this.top=t}else{const{location:{left:e,top:t},angle:n}=s.getNextLocationAndAngle(this.left,this.top,this.angle,this.speed,this.width,this.height,this.topLimit,this.bottomLimit);this.left=e,this.top=t,this.angle=n}}}},2591:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4395),a=r(n(9519)),i=n(3279),{gameField:l,pixelSize:u}=a.default(),s=l.left,c=l.right-3*u;t.default=class{constructor(e,t,n,r){this.left=e,this.top=t,this.maxIndex=n,this.indexProvider=r,this.canChangeLocationResetHandle=void 0,this.canChangeLocation=!0}increaseSpeed(e){}getCurrentLocation(){return{left:this.left,top:this.top}}updateState(e){if(this.indexProvider.getCurrentIndex()===this.maxIndex&&this.canChangeLocation){this.canChangeLocation=!1;const{left:e,top:t}=i.getRandomLocation(c,s,o.Locations.CloakingOrb.maxBottom,l.top);this.left=e,this.top=t}void 0===this.canChangeLocationResetHandle&&!1===this.canChangeLocation&&(this.canChangeLocationResetHandle=window.setTimeout((()=>{this.canChangeLocation=!0,this.canChangeLocationResetHandle=void 0}),2*o.FrameTimes.cloakingOrb))}}},283:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(9519)),i=n(3279),{gameField:l}=a.default();t.default=class{constructor(e,t,n,r,a){this.left=e,this.top=t,this.height=r,this.indexProvider=a,this.baseSpeed=n,this.angle=o.angles.up,this.speed=n()}increaseSpeed(e){this.speed=this.baseSpeed()*e}getCurrentLocation(){return{left:this.left,top:this.top}}updateState(e){const{left:t,top:n}=i.getLocation(this.left,this.top,this.angle,this.speed);this.left=t,n<l.top-this.height?this.top=l.bottom+this.height:this.top=n,this.indexProvider.getCurrentIndex()<5||this.top>l.bottom?this.angle=o.angles.up:this.angle=o.angles.down}}},2477:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(6227)),a=n(3855),i=n(3279);class l extends o.default{constructor(e,t,n,r,o,a,i,l){super(e,t,n,r,o,a),this.target=i,this.reset=l}getCurrentLocation(){return{left:this.left,top:this.top}}updateState(e){const{left:t,top:n}=i.getLocation(this.left,this.top,this.angle,this.speed);this.left=t;let r=n;const o=a.getUpOrDownFromAngle(this.angle);"up"===o?r<this.target-this.height&&(r=this.reset):"down"===o&&r+this.height>this.target&&(r=this.reset),this.top=r}}t.default=l},5954:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),a=n(1813),i=n(3855),l=n(2536),u=n(3279),{gameField:s}=o.default();t.default=class{constructor(e,t,n,r){this.width=e,this.height=t,this.angles=n,this.speeds=r;const o=2*this.height;this.top=s.top-o,this.left=this.getRandomLeft(),this.angle=a.getRandomArrayElement(n),this.speed=a.getRandomArrayElement(r()),this.maxBottom=s.bottom+o,this.startTop=s.top-o}getCurrentLocation(){return{left:this.left,top:this.top}}updateState(e){const t=u.getLocation(this.left,this.top,this.angle,this.speed);if(this.left=t.left,this.top=t.top,this.top>this.maxBottom){this.left=this.getRandomLeft(),this.angle=a.getRandomArrayElement(this.angles),this.speed=a.getRandomArrayElement(this.speeds());const e=i.getLeftOrRightFromAngle(this.angle);"left"===e?(this.left=s.right,this.top=l.randomNumberInRange(s.bottom/2,s.top)):"right"===e?(this.left=s.left,this.top=l.randomNumberInRange(s.bottom/2,s.top)):this.top=this.startTop}}getRandomLeft(){return l.randomNumberInRange(s.right-this.width,this.width)}increaseSpeed(e){}}},2561:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(6227)),a=n(3279);class i extends o.default{constructor(e,t,n,r,o,a,i,l){super(e,t,n,r,o,a),this.maxTop=i,this.maxBottom=l}updateState(e){const{left:t,top:n}=a.getNextLocationWithinBoundaries(this.left,this.top,this.width,this.angle,this.speed,this.maxTop,this.maxBottom);this.left=t,this.top=n}}t.default=i},1527:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3279);t.default=class{constructor(e,t,n,r,o,a,i,l,u,s,c,d){this.left=e,this.top=t,this.angle=n,this.width=r,this.height=o,this.maxTop=a,this.maxBottom=i,this.indexProvider=l,this.slowFrames=c,this.fastFrames=d,this.baseSlowSpeed=u,this.baseFastSpeed=s,this.slowSpeed=u(),this.fastSpeed=s()}getCurrentLocation(){return{left:this.left,top:this.top}}updateState(e){const t=this.indexProvider.getCurrentIndex();let n=0;if(this.slowFrames.indexOf(t)>-1)n=this.slowSpeed;else{if(!(this.fastFrames.indexOf(t)>-1))throw new Error("Index "+t+" was not found in the slowFrames or fastFrames array");n=this.fastSpeed}const{left:o,top:a}=r.getNextLocationWithinBoundaries(this.left,this.top,this.width,this.angle,n,this.maxTop-this.height,this.maxBottom+this.height);this.left=o,this.top=a}increaseSpeed(e){this.slowSpeed=this.baseSlowSpeed()*e,this.fastSpeed=this.baseFastSpeed()*e}}},9868:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(6227)),a=n(224),i=r(n(9519)),l=n(1813),u=n(3279),{gameField:s}=i.default();class c extends o.default{constructor(e,t,n,r,o,i,l){super(e,t,n,r,o,i),this.lastTick=0,this.angleSwitchTimeout=l,this.angles=a.getAngles()}updateState(e){e>this.angleSwitchTimeout+this.lastTick&&(this.angle=l.getRandomArrayElement(this.angles),this.lastTick=e);const t=u.getLocation(this.left,this.top,this.angle,this.speed);(t.left<=s.left||t.left+this.width>=s.right)&&(this.angle=180-this.angle),t.top<=s.top&&(this.angle*=-1),t.top>=s.bottom-1.5*this.height&&(this.top=.3*s.bottom);const n=u.getLocation(this.left,this.top,this.angle,this.speed);this.left=n.left,this.top=n.top}}t.default=c},6767:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),a=n(3855),i=n(3279),{pixelSize:l}=o.default();t.default=function(e,t,n,r){const o=a.calculateAngle(e,t,n,r);let u=i.calculateDistance(e,t,n,r),s=e,c=t;const d=[];for(;u>=0;){d.push(i.getLocation(s,c,o,l)),u-=l;const e=i.getLocation(s,c,o,l);s=e.left,c=e.top}return d}},8979:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["0","0","2","2","0","0"],["4","E","0","0","E","4"]],particleFrames:[[["C","C"]],[["E","C"]],[["C","E"]],[["F","C"]],[["C","F"]]],particleFrameIndexes:[0,0,0,0,0,1,1,1,1,2,2,2,2,2,3,3,3,4,4,4,4,0,0,0,0],angles:[270,270,270,270,270,210,210,210,210,330,330,330,300,195,195,195,195,345,345,345,345,180,180,0,0],speeds:[3,4.5,7,8,10,3,4.5,7,8,3,4.5,7,8,3,4.5,7,8,3,4.5,7,8,4.5,8,4.5,8],acceleration:1.1,explosionCenterDelay:20,useSpeed:!1,speed:0}}},4137:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1700)),a=n(6997),i=n(3855),l=n(3279);t.default=class{constructor(e,t,n,r,o,a){this.frame=n,this.speed=r,this.leftOffset=o,this.topOffset=a,this.currentLeftLocation=e+o,this.currentTopLocation=t+a}updateState(){const{playerState:e}=a.appState(),t=e.left+this.leftOffset,n=e.top+this.topOffset,r=i.calculateAngle(this.currentLeftLocation,this.currentTopLocation,t,n);if(l.calculateDistance(this.currentLeftLocation,this.currentTopLocation,t,n)>a.appState().speedState.minimumDistance){const e=l.getLocation(this.currentLeftLocation,this.currentTopLocation,r,this.speed);this.currentLeftLocation=e.left,this.currentTopLocation=e.top}else this.currentLeftLocation=t,this.currentTopLocation=n}draw(){o.default(this.currentLeftLocation,this.currentTopLocation,this.frame)}traveling(){const{playerState:e}=a.appState(),t=e.left+this.leftOffset,n=e.top+this.topOffset;return l.calculateDistance(this.currentLeftLocation,this.currentTopLocation,t,n)>a.appState().speedState.minimumDistance}setSpeed(e){this.speed=e}}},6458:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getPlayerFormationFrames=t.getPlayerFrame=void 0;const o=r(n(152));t.getPlayerFrame=function(){const e=[["0","0","B","B","0","0"],["A","B","F","F","B","A"],["B","F","0","0","F","B"]];return o.default.Frame.convertHexToCGA(e),e},t.getPlayerFormationFrames=function(){const e=[[["B","B"]],[["F","F"]],[["A","B"],["B","F"]],[["B","A"],["F","B"]]];return e.forEach((e=>o.default.Frame.convertHexToCGA(e))),e}},8421:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3855);t.default=function(e,t){if(void 0===e)return!1;if(void 0===t)return!1;const n=r.overlaps(e.middle,t),o=r.overlaps(e.bottom,t);return n||o}},4039:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(4395),a=r(n(7913)),i=n(8576),l=r(n(9519)),u=n(8278),s=n(9096),c=n(6997),d=n(3279),f=r(n(4137)),p=n(6458),{pixelSize:m}=l.default(),h=60*m,g=h+m,v=p.getPlayerFormationFrames();let y,b,_,w,S,E=[],x=!1,k="none";function P(e,t){"fast"===e?u.SoundPlayer.playerFormationFast():u.SoundPlayer.playPlayerFormationSlow(),S=e,k=c.appState().playerState.moveLimit,c.dispatch(s.setPlayerLocationData(o.Locations.Player.spawnLocation.left,o.Locations.Player.spawnLocation.top)),function(){const{playerState:e}=c.appState(),t=e.left,n=e.top,r=d.getLocation(t,n,270,g),o=d.getLocation(t,n,270,h),a=d.getLocation(t,n,200,h),i=d.getLocation(t,n,340,h);y=new f.default(r.left,r.top,v[0],0,2*m,0),b=new f.default(o.left,o.top,v[1],0,2*m,m),_=new f.default(a.left,a.top,v[2],0,0,m),w=new f.default(i.left,i.top,v[3],0,4*m,m),E=[y,b,_,w].filter((e=>void 0!==e))}();const{speedState:{slowParticleFormationSpeed:n,fastParticleFormationSpeed:r}}=c.appState();"fast"===e?E.forEach((e=>e.setSpeed(r))):E.forEach((e=>e.setSpeed(n))),c.dispatch(s.setPlayerMovementLimit(t)),x=!0}function C(){E.forEach((e=>e.draw()))}t.default=function(){const{playerState:e,enemyLevelState:{enemies:t,shrapnells:n,bullets:r}}=c.appState();e.alive||!1!==x||0!==n.length||(t.length>0?0===r.length&&P("slow","sideways"):P("fast","immobile")),x&&(function(){const{keyboardState:e}=c.appState();if(!1===e.pause&&"slow"===S&&E.some((e=>e.traveling()))){E.forEach((e=>{e.updateState()}));const{formingSpeed:e}=c.appState().speedState.movement.Player;i.playerMovementHandler(e,e)}else"fast"===S&&E.forEach((e=>{e.updateState()}));E.every((e=>!1===e.traveling()))&&(c.dispatch(s.setPlayerIsAlive(!0)),c.dispatch(s.setPlayerMovementLimit(k)),E=[],x=!1)}(),a.default.registerDraw(C))}},9519:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n){const e=10,t=1e3,r=1600,o=6*e;n={fullGameWidth:r,fullGameHeight:t,statusBarBottom:o,pixelSize:e,pixelSize2x:2*e,gameField:{left:e,right:r-e,top:o+e,bottom:t-e,width:r-2*e,height:t-o}}}return n}},2955:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(1501)),i=n(4395),l=n(1217),u=n(914),s=r(n(6148)),c=r(n(5051)),d=r(n(7374)),f=r(n(6479)),p=r(n(6774)),m=r(n(7395)),h=r(n(1810)),g=r(n(4993)),v=r(n(1794)),y=r(n(339)),b=r(n(8977)),_=r(n(1738)),w=r(n(1749)),S=n(479),E=r(n(5459)),x=r(n(4027)),k=r(n(1843)),P=r(n(7532)),C=r(n(7307)),V=r(n(3073)),O=r(n(9151)),A=r(n(7346)),L=r(n(2145)),F=r(n(7472)),M=r(n(4273)),T=r(n(5950)),D=r(n(1665)),I=r(n(2591)),j=r(n(283)),R=r(n(2477)),N=r(n(5954)),z=r(n(2561)),B=r(n(1527)),H=r(n(9868)),G=r(n(6510)),W=r(n(4104)),Z=r(n(2867)),U=r(n(1941)),$=r(n(358)),K=n(6997),q=n(1813),Q=n(3640),Y=n(2536),X=r(n(9519)),{pixelSize:J,gameField:ee}=X.default();t.default=function(e,t,n){switch(e){case"bird":case"bird-fire":{if(void 0===t)throw new Error("Bird enemy requires a location");const e=p.default(),{maxSizes:{width:n,height:r}}=e,o=new F.default(Q.getRandomFrameKeyIndex(e.frames)),a=q.getRandomArrayElement(i.MovementAngles.bird),l=new T.default(t.left,t.top,(()=>K.appState().speedState.movement.bird),a,n,r,ee.top,ee.bottom);return new f.default(i.FrameTimes.bird,p.default,G.default,l,o)}case"robot":case"robots-random":{if(void 0===t)throw new Error("Robot enemy requires a starting position");const{maxSizes:{width:n,height:r},frames:a}=V.default();let l;const u=new F.default("robot"===e?0:Q.getRandomFrameKeyIndex(a));l=new z.default(t.left,t.top,(()=>K.appState().speedState.movement.robot),"robot"===e?i.MovementAngles.robot:o.angles.right,n,r,ee.top,i.Locations.robot.maxBottom);const s=q.getRandomArrayElement(i.ColorSchemes.Enemies.robot);return new v.default(i.Points.robot,i.FrameTimes.robot,V.default,W.default,l,u,{explosionColor:s,explosionParticleColor:s,varyingEnemyColor:s})}case"orb":case"orb-up-down":{if(void 0===t)throw new Error("Orb enemy requires a starting location");if(void 0===n&&"orb-up-down"===e)throw new Error("Orb-up-down requires an index");const{maxSizes:{width:r,height:a}}=k.default(),l=new M.default(0);let u=o.angles.down,s=i.Locations.Orb.maxBottom,c=i.Locations.Orb.maxTop;if("orb-up-down"===e&&void 0!==n){const e=n%2==0;u=e?o.angles.down:o.angles.up,s=e?ee.bottom:ee.top,c=e?ee.top:ee.bottom}const d=new R.default(t.left,t.top,(()=>K.appState().speedState.movement.orb),u,r,a,s,c);return new P.default(i.FrameTimes.orb,k.default,W.default,d,l)}case"spinner":{if(void 0===t)throw new Error("Spinner enemy requires a starting location");const{frames:e,maxSizes:{width:n,height:r}}=L.default(),o=6*J,l=t.top-o,u=t.top+o,s=new M.default(Q.getRandomFrameKeyIndex(e)),c=q.getRandomArrayElement(i.MovementAngles.spinner),d=new T.default(t.left,t.top,(()=>K.appState().speedState.movement.spinner),c,n,r,l,u);return new v.default(i.Points.spinner,i.FrameTimes.spinner,L.default,G.default,d,s,{explosionColor:a.default.white,explosionParticleColor:a.default.white})}case"balloon":{if(void 0===t)throw new Error("Balloon enemy requires a starting location");const{frames:e,maxSizes:{width:n,height:r}}=s.default(),o=new M.default(Q.getRandomFrameKeyIndex(e)),a=new H.default(t.left,t.top,(()=>K.appState().speedState.movement.balloon),0,n,r,200);return new v.default(i.Points.balloon,i.FrameTimes.balloon,s.default,Z.default,a,o)}case"asteroid-down":case"asteroid-diagonal":{const{maxSizes:{width:t,height:n}}=u.getAsteroidOffsetFrames(),r=new M.default(0);let a,i;"asteroid-down"===e?(a=[o.angles.down],i=()=>K.appState().speedState.movement.Asteroid.down):(a=[o.extraAngles.leftleftdown,o.angles.leftdown,o.angles.down,o.angles.rightdown,o.extraAngles.rightrightdown],i=()=>K.appState().speedState.movement.Asteroid.diagonal);const s=new N.default(t,n,a,i);return new l.AsteroidEnemy(0,u.getAsteroidOffsetFrames,U.default,s,r)}case"piston":{if(void 0===t)throw new Error("Balloon enemy requires a starting location");const{maxSizes:{width:e,height:n}}=C.default(),r=new F.default(0),o=new B.default(t.left,t.top,i.MovementAngles.piston,n,e,ee.top,ee.bottom,r,(()=>K.appState().speedState.movement.Piston.slow),(()=>K.appState().speedState.movement.Piston.fast),[0,1,2],[3,4]);return new v.default(i.Points.piston,i.FrameTimes.piston,C.default,W.default,o,r,{explosionColor:a.default.magenta,explosionParticleColor:a.default.magenta})}case"diabolo":case"diabolo-hard":{if(void 0===t)throw new Error("Diabolo enemy requires a starting location");const{maxSizes:{width:n,height:r},frames:o}=_.default(),l=new M.default(Q.getRandomFrameKeyIndex(o));let u;if("diabolo"===e){const e=q.getRandomArrayElement(i.MovementAngles.diabolo);u=new T.default(t.left,t.top,(()=>K.appState().speedState.movement.diabolo),e,n,r,ee.top,ee.bottom)}else if(Y.coinFlip()){const e=q.getRandomArrayElement(i.MovementAngles.diaboloHardLeftRight);u=new T.default(t.left,t.top,(()=>K.appState().speedState.movement.diabolo),e,n,r,ee.top,ee.bottom)}else{const e=q.getRandomArrayElement(i.MovementAngles.diaboloHardUpDown);u=new T.default(t.left,t.top,(()=>K.appState().speedState.movement.diabolo),e,n,r,ee.top,ee.bottom)}return new v.default(i.Points.diabolo,i.FrameTimes.diabolo,_.default,G.default,u,l,{explosionColor:a.default.white,explosionParticleColor:a.default.white})}case"spacemonster-down":case"spacemonster-diagonal":{let t,n;"spacemonster-down"===e?(t=[o.angles.down],n=()=>K.appState().speedState.movement.SpaceMonster.down):(t=[o.extraAngles.leftleftdown,o.angles.leftdown,o.angles.down,o.angles.rightdown,o.extraAngles.rightrightdown],n=()=>K.appState().speedState.movement.SpaceMonster.diagonal);const{maxSizes:{width:r,height:a}}=O.default(),i=new M.default(0),l=new N.default(r,a,t,n);return new A.default(0,O.default,$.default,l,i)}case"devil":{if(void 0===t)throw new Error("Devil enemy requires a starting location");const{maxSizes:{width:e,height:n},frames:r}=b.default(),o=new M.default(Q.getRandomFrameKeyIndex(r)),a=new D.default(t.left,t.top,(()=>K.appState().speedState.movement.devil),i.MovementAngles.devil,e,n,ee.top,i.Locations.Devil.maxBottom);return new w.default(i.Points.devil,b.default,y.default,a,o)}case"crab":{if(void 0===t)throw new Error("Crap enemy requires a starting location");const{maxSizes:{height:e}}=g.default(),n=new F.default(0),r=new j.default(t.left,t.top,(()=>K.appState().speedState.movement.crab),e,n);return new v.default(i.Points.crab,i.FrameTimes.crab,g.default,W.default,r,n,{explosionColor:a.default.magenta,explosionParticleColor:a.default.magenta})}case"bat":{if(void 0===t)throw new Error("Bats enemy requires a starting location");const{maxSizes:{width:e,height:n}}=d.default(),r=new F.default(0),l=q.getRandomArrayElement(o.getAngles()),u=new H.default(t.left,t.top,(()=>K.appState().speedState.movement.bat),l,e,n,200),s=Y.coinFlip()?a.default.lightGreen:a.default.lightBlue;return new v.default(i.Points.bat,i.FrameTimes.bat,d.default,c.default,u,r,{explosionColor:a.default.lightGray,explosionParticleColor:a.default.lightGray,varyingEnemyColor:s})}case"boat":{if(void 0===t)throw new Error("Boat enemy requires a starting location");const{maxSizes:{width:e,height:n}}=m.default(),r=new M.default(0),l=new B.default(t.left,t.top,o.extraAngles.rightrightdown,n,e,ee.top,ee.bottom,r,(()=>K.appState().speedState.movement.Boat.slow),(()=>K.appState().speedState.movement.Boat.fast),[0,1,5],[2,3,4]);return new v.default(i.Points.boat,i.FrameTimes.boat,m.default,W.default,l,r,{explosionColor:a.default.magenta,explosionParticleColor:a.default.magenta})}case"cloaking-orb":{if(void 0===t)throw new Error("Cloaking Orb enemy requires a starting location");const{frames:e}=h.default(),n=new F.default(Q.getRandomFrameKeyIndex(e)),r=new I.default(t.left,t.top,e.length-2,n),o=q.getRandomArrayElement(i.ColorSchemes.Enemies.cloakingOrb);return new v.default(i.Points.cloakingOrb,i.FrameTimes.cloakingOrb,h.default,W.default,r,n,{explosionColor:o,explosionParticleColor:o,varyingEnemyColor:o})}case"fish":{if(void 0===t)throw new Error("Fishb enemy requires a starting location");const{maxSizes:{width:e,height:n},frames:r}=x.default(),o=new M.default(Q.getRandomFrameKeyIndex(r)),a=new D.default(t.left,t.top,(()=>K.appState().speedState.movement.devil),i.MovementAngles.devil,e,n,ee.top,i.Locations.Devil.maxBottom);return new S.FishEnemy(i.Points.fish,x.default,E.default,a,o)}default:throw new Error("Unknown enemy "+e)}}},2587:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1501)),a=n(4395),i=r(n(9599)),l=r(n(1300)),u=r(n(6628)),s=r(n(6922)),c=r(n(8149)),d=n(938),f=r(n(7034)),p=r(n(8953)),m=r(n(6393)),h=r(n(2676)),g=r(n(226)),v=n(6997),y=r(n(9519)),b=r(n(2955)),{gameField:_}=y.default();t.default=function(e){switch(e){case"bird":case"bird-fire":{const t=g.default().map((t=>b.default(e,t)));let n;return"bird-fire"===e&&(n=new s.default(o.default.brown,(()=>v.appState().speedState.bullets.bird),p.default)),{enemies:t,bulletRunner:n}}case"robot":case"robots-random":{let t,n;if("robot"===e)t=new s.default(o.default.lightRed,(()=>v.appState().speedState.bullets.robot),f.default),n=u.default.map((t=>b.default(e,t)));else{if("robots-random"!==e)throw new Error("Unhandled level creation");t=new s.default(o.default.lightRed,(()=>v.appState().speedState.bullets.robot),p.default),n=h.default(14,_.top,a.Locations.robot.scatteredMaxBottom).map((t=>b.default(e,t)))}return{enemies:n,bulletRunner:t}}case"orb":case"orb-up-down":return{enemies:l.default.map(((t,n)=>b.default(e,t,n))),bulletRunner:new s.default(o.default.magenta,(()=>v.appState().speedState.bullets.orb),p.default)};case"spinner":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.white,(()=>v.appState().speedState.bullets.spinner),p.default)};case"balloon":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.blue,(()=>v.appState().speedState.bullets.balloon),p.default)};case"asteroid-down":case"asteroid-diagonal":{const t=[];for(let n=0;n<7;n++)t.push(b.default(e));return{enemies:t}}case"piston":return{enemies:m.default(a.Locations.Piston.topStart).map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.blue,(()=>v.appState().speedState.bullets.balloon),d.threeDownRandom)};case"diabolo":case"diabolo-hard":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.yellow,(()=>v.appState().speedState.bullets.diabolo),p.default)};case"spacemonster-down":case"spacemonster-diagonal":{const t=[];for(let n=0;n<7;n++)t.push(b.default(e));return{enemies:t}}case"devil":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.lightGreen,(()=>v.appState().speedState.bullets.devil),(e=>c.default(e,3)))};case"crab":return{enemies:m.default(a.Locations.Crab.topStart).map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.lightRed,(()=>v.appState().speedState.bullets.crab),p.default)};case"bat":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.yellow,(()=>v.appState().speedState.bullets.bat),p.default)};case"boat":return{enemies:i.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.blue,(()=>v.appState().speedState.bullets.balloon),d.fiveDownRandom)};case"cloaking-orb":return{enemies:h.default(15,_.top,a.Locations.CloakingOrb.maxBottom).map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.lightRed,(()=>v.appState().speedState.bullets.cloakingOrb),(e=>c.default(e,5,[0,1,3])))};case"fish":return{enemies:g.default().map((t=>b.default(e,t))),bulletRunner:new s.default(o.default.lightGreen,(()=>v.appState().speedState.bullets.fish),(e=>c.default(e,5,[0,1])))};default:throw new Error(`Unknown enemy ${e}`)}}},3504:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(6458),a=n(3640),i=r(n(9519)),{pixelSize:l,fullGameWidth:u,fullGameHeight:s}=i.default(),c=u/2-a.getFrameDimensions(o.getPlayerFrame()).width/2,d=s-8*l;t.default=function(){return{left:c,top:d}}},2639:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if("function"==typeof e.requestFullscreen)return e.requestFullscreen();if("function"==typeof e.webkitRequestFullScreen)return e.webkitRequestFullScreen();throw new Error("Could not find a function for request full screen")}},5172:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Canvas=void 0;const o=r(n(9519)),{fullGameHeight:a,fullGameWidth:i}=o.default();var l;(l=t.Canvas||(t.Canvas={})).setCanvasDimensions=function(){const e=document.getElementById("canvas");if(!e)throw new Error("Could not find canvas element.");const t=document.getElementById("body");if(!t)throw new Error("Could not find body element");const n=t.getBoundingClientRect();e.width=i,e.height=a;const r=n.width<n.height?n.width/i:n.height/a,o=i*r,l=a*r,u=(n.width-o)/2,s=(n.height-l)/2;e.style.left=`${Math.round(u)}px`,e.style.top=`${Math.round(s)}px`,e.style.width=`${Math.round(o)}px`,e.style.height=`${Math.round(l)}px`},l.minimizeCanvas=function(){const e=document.getElementById("canvas");if(!e)throw new Error("Could not find canvas element.");e.style.width="0px",e.style.height="0px"}},143:(e,t)=>{"use strict";let n;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){if(!n){const e=document.getElementById("canvas");n=e.getContext("2d")}return n}},1700:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),a=r(n(143)),{pixelSize:i}=o.default(),l=a.default();t.default=function(e,t,n){for(let r=0;r<n.length;r++){const o=n[r];for(let n=0;n<o.length;n++){const a=o[n],u=Math.round(e+n*i),s=Math.round(t+r*i);"0"!==a&&(l.fillStyle=a,l.fillRect(u,s,i,i))}}}},6922:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8956)),a=n(3892),i=n(993),l=n(6997);t.default=class{constructor(e,t,n){this.speed=t,this.shipsToFire=n,this.coloredBulletFrame=o.default(e)}updateState(e){const{playerState:{alive:t}}=l.appState();if(!t)return;const n=this.shipsToFire(e);for(const t of n){const{angle:n,enemy:{nozzleLocation:r,enemyId:o}}=t;if(void 0!==n&&void 0!==r){const{left:u,top:s}=r,c=i.StateProviders.getBulletParticleState(u,s,this.speed(),n,this.coloredBulletFrame,o);l.dispatch(a.addBullet(c)),l.dispatch(a.setEnemyLastFireTick(t.enemy.enemyId,e))}}}}},8024:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EnemyLevelRunner=void 0;const o=r(n(1501)),a=r(n(7913)),i=r(n(6767)),l=r(n(8421)),u=r(n(1700)),s=n(8278),c=n(3892),d=n(4898),f=n(9096),p=n(6997),m=r(n(1742)),h=r(n(6070)),g=n(1813),v=n(3855),y={enemies:[]};var b;function _(){const{enemies:e,bullets:t,phaserLocations:n}=p.appState().enemyLevelState;for(const t of e)void 0!==t.currentFrame&&u.default(t.offsetLeft,t.offsetTop,t.currentFrame);for(const e of t)u.default(e.left,e.top,e.coloredFrame);n.forEach((e=>u.default(e.left,e.top,[[o.default.yellow,o.default.yellow]])))}function w(e,t){if(1===t.hitpoints)!function(e,t){const{enemyLevelState:n}=p.appState();y.enemies=y.enemies.filter((e=>e.getId()!==t.enemyId&&(e.increaseSpeed(n.totalNumberOfEnemies/(y.enemies.length-1)),!0))),s.SoundPlayer.enemyExplosion(),m.default(t.offsetLeft,t.offsetTop,t.coloredExplosion,e),p.dispatch(c.removeEnemy(t.enemyId)),p.dispatch(d.increaseScore(t.points)),p.dispatch(d.enemeyHit())}(e,t);else{const e=y.enemies.find((e=>e.getId()===t.enemyId));e&&(p.dispatch(d.enemeyHit()),e.recudeHitpoints())}}function S(e,t){const{playerState:n,enemyLevelState:{enemies:r}}=p.appState();n.alive&&t.some((e=>l.default(n.hitboxes,e.hitbox)))&&r.length>0&&h.default(e)}!function(e){e.run=function(e){!function(e){(function(e){const{enemyLevelState:t,playerState:n,gameState:r,keyboardState:o}=p.appState();if(n.alive&&o.phraser&&t.enemies.length>0&&r.phasers>0&&0===t.phaserLocations.length&&n.nozzleLocation){const r=g.getRandomArrayElement(t.enemies),o=n.nozzleLocation,a=r.centerLocation;if(void 0!==a){p.dispatch(d.removePhaser()),s.SoundPlayer.phaser();const t=i.default(o.left,o.top,a.left,a.top);p.dispatch(c.setPhaserLocations(t)),p.dispatch(d.phaserFired()),p.dispatch(d.setPause(!0)),window.setTimeout((()=>{p.dispatch(d.setPause(!1)),w(e,r),p.dispatch(c.clearPhaserLocations())}),100)}}})(e),function(e){const t=y.enemies.map((t=>(t.updateState(e),t.getCurrentEnemyState())));p.dispatch(c.setEnemiesState(t))}(e),function(e){(function(e){const{playerState:t,enemyLevelState:n}=p.appState();if(void 0!==t.bulletState&&void 0!==t.bulletState.hitbox){const r=t.bulletState.hitbox,o=n.enemies.find((e=>{if(v.overlaps(r,e.hitbox))return!0}));void 0!==o&&(w(e,o),p.dispatch(f.setPlayerBulletState(void 0)))}})(e),S(e,p.appState().enemyLevelState.shrapnells),S(e,p.appState().enemyLevelState.bullets),function(e){const{enemyLevelState:t,playerState:n}=p.appState();n.alive&&t.enemies.some((e=>l.default(n.hitboxes,e.hitbox)))&&h.default(e)}(e)}(e)}(e),a.default.registerDraw(_)},e.setNewEnemies=function(e){y.enemies=e,p.dispatch(c.setTotalEnemies(e.length));const t=e.map((e=>e.getCurrentEnemyState()));p.dispatch(c.setEnemiesState(t))},e.addEnemy=function(e){y.enemies.push(e)}}(b=t.EnemyLevelRunner||(t.EnemyLevelRunner={})),t.default=b},5790:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7913)),a=r(n(1700)),i=n(3892),l=n(4898),u=n(993),s=n(6997);function c(){const{explosionCenters:e,shrapnells:t}=s.appState().enemyLevelState;for(const t of e)a.default(t.left,t.top,t.coloredFrame);for(const e of t)a.default(e.left,e.top,e.coloredFrame)}t.default=function(e){!function(e){const{explosionCenters:t}=s.appState().enemyLevelState,n=t.filter((t=>t.startTick+t.explosionCenterDelay>e));s.dispatch(i.setExplosionCenters(n))}(e),function(){const e=s.appState().enemyLevelState.bullets,t=u.StateProviders.getUpdatedParticleState(e);s.dispatch(i.setBulletState(t))}(),function(){const e=u.StateProviders.getUpdatedParticleState(s.appState().enemyLevelState.shrapnells);s.dispatch(i.setShrapnellState(e))}(),function(){const{gameState:e}=s.appState();e.score-e.lastAwardScore>=7500&&s.dispatch(l.addLifeAndPhaser())}(),o.default.registerDraw(c)}},2326:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resetLevelProgression=void 0;const r=n(618),o=n(6997);let a,i,l=!1;t.default=function(){const{gameState:e}=o.appState();a!==e.level&&!1===l&&(l=!0,a=e.level,void 0!==i&&i.dispose(),i=r.levelFactory(e.level),i.begin().then((()=>{l=!1})))},t.resetLevelProgression=function(){a=void 0,void 0!==i&&i.dispose()}},4244:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(1501)),i=r(n(7913)),l=n(8576),u=r(n(9519)),s=r(n(1700)),c=r(n(8956)),d=n(8278),f=n(4898),p=n(9096),m=n(993),h=n(6997),g=n(3640),v=n(3279);t.default=function(){!function(){const{playerState:e,speedState:{movement:{Player:{aliveSpeed:{speedX:t,speedY:n}}}}}=h.appState();e.alive&&(l.playerMovementHandler(t,n),function(){const{playerState:e}=h.appState();if(void 0!==e.bulletState){const t=e.bulletState,n=v.getLocation(t.left,t.top,t.angle,t.speed),r=g.getFrameHitbox(n.left,n.top,t.coloredFrame);if(v.fallsWithinGameField(r.left,r.right,n.top,r.bottom)){const e=_(n.left,n.top);h.dispatch(p.setPlayerBulletState(e))}else h.dispatch(p.setPlayerBulletState(void 0))}}(),function(){const{playerState:e,keyboardState:t}=h.appState();if(void 0!==e.nozzleLocation&&t.fire&&void 0===e.bulletState&&"immobile"!==e.moveLimit){const t=e.nozzleLocation,n=_(t.left,t.top);h.dispatch(p.setPlayerBulletState(n)),d.SoundPlayer.playerShoot(),h.dispatch(f.bulletFired())}}())}(),i.default.registerDraw(w)};const{pixelSize:y}=u.default(),b=c.default(a.default.yellow);function _(e,t){const{speedState:{bullets:n}}=h.appState();return m.StateProviders.getParticleState(e,t,n.player,o.angles.up,b,1,-.5*y,-.5*y)}function w(){const{playerState:e}=h.appState();if(e.alive&&s.default(e.left,e.top,e.coloredFrame),e.bulletState){const t=e.bulletState;s.default(t.left,t.top,t.coloredFrame)}}},6124:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(152));t.default=function(e){const t=[[["0","V","V","0"],["V","0","0","V"],["V","V","V","V"],["V","0","0","V"],["V","0","0","V"]],[["V","V","V","0"],["V","0","0","V"],["V","V","V","V"],["V","0","0","V"],["V","V","V","0"]],[["0","V","V","0"],["V","0","0","V"],["V","0","0","0"],["V","0","0","V"],["0","V","V","0"]],[["V","V","V","0"],["V","0","0","V"],["V","0","0","V"],["V","0","0","V"],["V","V","V","0"]],[["V","V","V","V"],["V","0","0","0"],["V","V","V","0"],["V","0","0","0"],["V","V","V","V"]],[["V","V","V","V"],["V","0","0","0"],["V","V","V","0"],["V","0","0","0"],["V","0","0","0"]],[["0","V","V","V"],["V","0","0","0"],["V","0","V","V"],["V","0","0","V"],["0","V","V","V"]],[["V","0","0","V"],["V","0","0","V"],["V","V","V","V"],["V","0","0","V"],["V","0","0","V"]],[["V","V","V"],["0","V","0"],["0","V","0"],["0","V","0"],["V","V","V"]],[["V","V","V","V"],["0","0","0","V"],["0","0","0","V"],["V","0","0","V"],["0","V","V","0"]],[["V","0","0","V"],["V","0","V","0"],["V","V","0","0"],["V","0","V","0"],["V","0","0","V"]],[["V","0","0","0"],["V","0","0","0"],["V","0","0","0"],["V","0","0","0"],["V","V","V","V"]],[["V","0","0","0","V"],["V","V","0","V","V"],["V","0","V","0","V"],["V","0","0","0","V"],["V","0","0","0","V"]],[["V","0","0","V"],["V","V","0","V"],["V","0","V","V"],["V","0","0","V"],["V","0","0","V"]],[["0","V","V","0"],["V","0","0","V"],["V","0","0","V"],["V","0","0","V"],["0","V","V","0"]],[["V","V","V","0"],["V","0","0","V"],["V","V","V","0"],["V","0","0","0"],["V","0","0","0"]],[["0","V","V","0"],["V","0","0","V"],["V","0","0","V"],["V","0","V","V"],["0","V","V","V"]],[["V","V","V","0"],["V","0","0","V"],["V","V","V","0"],["V","0","V","0"],["V","0","0","V"]],[["0","V","V","V"],["V","0","0","0"],["0","V","V","0"],["0","0","0","V"],["V","V","V","0"]],[["V","V","V","V","V"],["0","0","V","0","0"],["0","0","V","0","0"],["0","0","V","0","0"],["0","0","V","0","0"]],[["V","0","0","V"],["V","0","0","V"],["V","0","0","V"],["V","0","0","V"],["0","V","V","0"]],[["V","0","0","0","V"],["V","0","0","0","V"],["0","V","0","V","0"],["0","V","0","V","0"],["0","0","V","0","0"]],[["V","0","0","0","V"],["V","0","0","0","V"],["V","0","V","0","V"],["0","V","V","V","0"],["0","V","0","V","0"]],[["V","0","0","0","V"],["0","V","0","V","0"],["0","0","V","0","0"],["0","V","0","V","0"],["V","0","0","0","V"]],[["V","0","0","0","V"],["0","V","0","V","0"],["0","0","V","0","0"],["0","0","V","0","0"],["0","0","V","0","0"]],[["V","V","V","V"],["0","0","V","0"],["0","V","0","0"],["V","0","0","0"],["V","V","V","V"]],[["0"],["0"],["0"],["0"],["0"]]];return o.default.Frames.setColor(t,e),t}},6510:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(152));t.default=function(e,t){const n={explosionCenterFrame:[["V","0","V","0"],["V","V","V","V"],["0","V","0","V"]],particleFrames:[[["V"]],[["V","V"]]],angles:[160,180,200,340,0,20],particleFrameIndexes:[0,1,0,0,1,0],speed:17,acceleration:1.05,explosionCenterDelay:50,speeds:[],useSpeed:!0};return e&&o.default.Frame.setColor(n.explosionCenterFrame,e),t&&o.default.Frames.setColor(n.particleFrames,t),n}},4104:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["V","V","V","V"],["0","0","0","0"],["V","V","V","V"],["0","0","0","0"],["V","V","V","V"]],particleFrames:[[["V","V"]]],angles:[160,180,200,340,0,20],particleFrameIndexes:[0,0,0,0,0,0],speed:12,acceleration:1.05,explosionCenterDelay:0,speeds:[],useSpeed:!0}}},2867:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["E","A","A","E"],["E","E","E","E"],["E","A","A","E"]],particleFrames:[[["E","A"]],[["E","E"]],[["A","E"]]],angles:[160,180,200,340,0,20],particleFrameIndexes:[0,1,0,2,1,2],speed:17,acceleration:1.05,explosionCenterDelay:50,speeds:[],useSpeed:!0}}},1941:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["V","V","0","V","V"],["V","V","0","V","V"]],particleFrames:[[["V","V"]]],angles:[160,150,20,30],particleFrameIndexes:[0,0,0,0],speed:25,acceleration:1,explosionCenterDelay:10,speeds:[],useSpeed:!0}}},358:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return{explosionCenterFrame:[["V","0","0","0","V"],["V","0","0","0","V"]],particleFrames:[[["V"]]],angles:[160,150,20,30],particleFrameIndexes:[0,0,0,0],speed:25,acceleration:1,explosionCenterDelay:10,speeds:[],useSpeed:!0}}},2137:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(152));t.default=function(e){const t=[[["0","V","V","0"],["V","0","0","V"],["V","0","0","V"],["V","0","0","V"],["0","V","V","0"]],[["0","0","V","0"],["0","V","V","0"],["0","0","V","0"],["0","0","V","0"],["V","V","V","V"]],[["0","V","V","0"],["V","0","0","V"],["0","0","V","0"],["0","V","0","0"],["V","V","V","V"]],[["0","V","V","0"],["V","0","0","V"],["0","0","V","0"],["V","0","0","V"],["0","V","V","0"]],[["V","0","0","0"],["V","0","V","0"],["V","V","V","V"],["0","0","V","0"],["0","0","V","0"]],[["V","V","V","V"],["V","0","0","0"],["V","V","V","0"],["0","0","0","V"],["V","V","V","0"]],[["0","V","V","V"],["V","0","0","0"],["V","V","V","0"],["V","0","0","V"],["0","V","V","0"]],[["V","V","V","V"],["0","0","0","V"],["0","0","V","0"],["0","V","0","0"],["V","0","0","0"]],[["0","V","V","0"],["V","0","0","V"],["0","V","V","0"],["V","0","0","V"],["0","V","V","0"]],[["0","V","V","0"],["V","0","0","V"],["0","V","V","V"],["0","0","0","V"],["V","V","V","0"]]];return o.default.Frames.setColor(t,e),t}},8956:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(152));t.default=function(e){const t=[["V","V"]];return void 0!==e&&o.default.Frame.setColor(t,e),t}},8149:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(3819)),i=r(n(9519)),l=n(6997),u=n(1992),{pixelSize2x:s}=i.default();t.default=function(e,t,n){const{enemyLevelState:{bullets:r,enemies:i}}=l.appState(),c=[];if(0==t-r.length)return c;let d=function(e){const{playerState:t}=l.appState();if(!a.default.isPlayerAlive(t))return[];const{hitboxes:{bottom:n}}=t;return u.getShipsReadyToFire(e).filter((e=>e.hitbox.left+s>=n.left&&e.hitbox.right<=n.right+s))}(e);if(void 0!==n&&(d=d.filter((e=>void 0!==e.currentFrameIndex&&n.indexOf(e.currentFrameIndex)>-1))),0===d.length)return c;const f=d[0];if(void 0!==f){const e=void 0!==c.find((e=>e.enemy.enemyId===f.enemyId)),n=i.length<t||!r.some((e=>e.owner===f.enemyId));!e&&n&&c.push({enemy:f,angle:o.angles.down})}return c}},938:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fiveDownRandom=t.threeDownRandom=void 0;const r=n(224),o=n(6997),a=n(1813),i=n(1992);function l(e,t){const{enemyLevelState:{bullets:n}}=o.appState(),l=[];if(0==t-n.length)return l;const u=i.getShipsReadyToFire(e),s=a.getRandomArrayElement(u);if(void 0!==s){const e=void 0!==l.find((e=>e.enemy.enemyId===s.enemyId)),o=u.length<t||!n.some((e=>e.owner===s.enemyId));!e&&o&&l.push({enemy:s,angle:r.angles.down})}return l}t.threeDownRandom=function(e){return l(e,3)},t.fiveDownRandom=function(e){return l(e,5)}},7034:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(224),o=n(6997);t.default=function(){const{enemies:e}=o.appState().enemyLevelState,t=[],n=e[e.length-1];return void 0!==n&&1===Math.ceil(20*Math.random())&&t.push({enemy:n,angle:r.angles.down}),t}},1992:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getShipsReadyToFire=void 0;const r=n(6997);t.getShipsReadyToFire=function(e){const{enemyLevelState:{enemies:t}}=r.appState();return t.filter((t=>void 0===t.lastFiretick||t.lastFiretick+50<e))}},8953:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(224),a=r(n(3819)),i=n(6997),l=n(3855),u=n(1992);function s(e){const{playerState:t,enemyLevelState:{enemies:n}}=i.appState();if(!a.default.isPlayerAlive(t))return;const{hitboxes:r}=t;if(1===Math.ceil(Math.random()*n.length/1.5)){const{centerLocation:t}=e;if(void 0!==t&&t.left>=r.middle.left&&t.left<=r.middle.right)return o.angles.down}return e.offsetLeft<r.middle.left?o.angles.rightdown:o.angles.leftdown}t.default=function(e){const{enemyLevelState:{bullets:t,enemies:n}}=i.appState(),r=[],o=5-t.length;if(0===o)return r;const a=function(e){const{playerState:t}=i.appState(),n=[],r=u.getShipsReadyToFire(e);let o=0,a=0;for(const e of r){const r=e.centerLocation;if(r){const i=l.calculateAngle(r.left,r.top,t.left,t.top),u=s(e);if(r.top>t.top?a+=1:o+=1,void 0!==u&&void 0!==i){const t=l.calculateAngleDifference(u,i);n.push({enemy:e,angleDifference:t,angle:u})}}}const c=o>a?(e,t)=>e<t:(e,t)=>e>t;return n.sort(((e,t)=>c(e.angleDifference,t.angleDifference)?-1:1)),n}(e);if(0===a.length)return r;for(let e=0;e<o;e++){let o=e;a.length<=e&&(o=0);const i=a[o],{enemy:l,angle:u}=i,s=void 0!==r.find((e=>e.enemy.enemyId===l.enemyId)),c=!t.some((e=>e.owner===l.enemyId))||n.length<5;!s&&c&&r.push({enemy:l,angle:u})}return r}},8278:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SoundPlayer=void 0;const r=n(1766),o=n(6997),a=n(1813),i=n(6630),l=n(1244);!function(e){let t;function n(e,n){t&&t.stop();const{enemyLevelState:{totalNumberOfEnemies:r}}=o.appState(),a=r-n,i=e.length-a-1;if(i<0)return;const l=e[i];if(void 0===l)throw new Error("No sound");t=l}e.playerShoot=function(){c()||s.playerBullet.play()},e.enemyExplosion=function(){c()||a.getRandomArrayElement(s.enemyExplosions).play()},e.phaser=function(){c()||a.getRandomArrayElement(s.phasers).play()},e.playerExplosion=function(){c()||a.getRandomArrayElement(s.playerExplosions).play()},e.playerFormationFast=function(){c()||s.playerFormationFast.play()},e.playPlayerFormationSlow=function(){c()||s.playerFormationSlow.play()},e.playTravelingWarpGate=function(){c()||n([s.warpGateTraveling],0)},e.stopBackground=function(){c()||(t&&(t.stop(),t=void 0),s.music.stop())},e.stopFalling=function(){c()||s.falling.stop()},e.pauseWarpLevelTravellingSound=function(){c()||s.warpGateTraveling.pause()},e.playEnemyBackgroundSound=function(e,t){if(!c())switch(e){case"bird-fire":case"bird":case"spinner":case"diabolo":case"diabolo-hard":case"bat":n(s.tjirping,t);break;case"orb":case"orb-up-down":case"cloaking-orb":case"robot":case"robots-random":case"crab":case"piston":case"boat":n(s.whoping,t);break;case"balloon":n(s.wizzing,t);break;case"asteroid-down":case"asteroid-diagonal":case"spacemonster-down":case"spacemonster-diagonal":s.falling.playing()||s.falling.play();break;case"devil":case"fish":s.music.playing()||s.music.play();break;default:throw new Error("No sound available for enemy "+e)}},e.ensureBackground=function(e){c()||(e?null==t||t.pause():(null==t?void 0:t.playing())||null==t||t.play("play"))},e.ensureWarpLevelBackground=function(e){c()||(e?s.warpGateTraveling.pause():s.warpGateTraveling.playing()||s.warpGateTraveling.play())},e.warpLeveEnd=function(){c()||s.warpLevelEnd.play()}}(t.SoundPlayer||(t.SoundPlayer={}));const u=.1;var s;function c(){return!o.appState().settingsState.playSound}function d(e,t,n){const o=n[t];return new r.Howl({src:e,sprite:{play:[o[0],o[1]]},loop:!0,volume:u})}!function(e){e.enemyExplosions=i.Sounds.EnemyExplosions.map((e=>new r.Howl({src:e,volume:u}))),e.playerBullet=new r.Howl({src:i.Sounds.Player.Shoot,volume:u}),e.phasers=i.Sounds.Phasers.map((e=>new r.Howl({src:e,volume:u}))),e.playerExplosions=i.Sounds.PlayerExplosions.map((e=>new r.Howl({src:e,volume:u}))),e.playerFormationFast=new r.Howl({src:i.Sounds.Player.FormationFast,volume:u}),e.playerFormationSlow=new r.Howl({src:i.Sounds.Player.FormationSlow,volume:u}),e.warpGateTraveling=new r.Howl({src:i.Sounds.Player.WarpGate,loop:!0,volume:u}),e.warpLevelEnd=new r.Howl({src:[i.Sounds.Player.WarpLevelEnd],volume:u}),e.falling=new r.Howl({src:i.Sounds.Falling.Falling,loop:!0,volume:u}),e.tjirping=i.Sounds.Tjirping.map(((e,t)=>d(e,t,l.SoundSprites.Tjirping))),e.whoping=i.Sounds.Whoping.map(((e,t)=>d(e,t,l.SoundSprites.Whoping))),e.wizzing=i.Sounds.Wizzing.map(((e,t)=>d(e,t,l.SoundSprites.Wizzing))),e.music=new r.Howl({src:i.Sounds.Music.Music,volume:u})}(s||(s={}))},1244:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),t.SoundSprites=void 0,(n=t.SoundSprites||(t.SoundSprites={})).Tjirping=[[0,1010],[0,720],[0,650],[0,450],[0,549],[0,702],[0,1e3],[0,900],[0,922],[0,930],[0,976],[0,997],[0,1005],[3,895],[0,1402],[0,1e3],[0,1180],[0,1155],[0,1155],[0,1155]],n.Whoping=[[0,237],[0,222],[0,347],[0,389],[0,605],[0,640],[0,755],[0,924],[0,950],[0,1038],[0,1319],[0,1308],[200,1578],[0,1600],[0,1540],[0,1735],[0,1835],[0,1886],[0,2112],[0,2251],[0,2450],[0,2450]],n.Wizzing=[[0,7175],[0,9810],[0,2049],[0,5007],[0,3030],[0,2961],[0,5451],[0,2508],[0,2522],[0,2400],[0,2980],[0,1550],[0,1550],[0,1550],[0,1550],[0,1e3],[0,1065],[0,1045],[0,1070],[0,7962]]},6630:(e,t,n)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.Sounds=void 0,(r=t.Sounds||(t.Sounds={})).EnemyExplosions=[n(7102).Z,n(7551).Z,n(682).Z,n(9906).Z,n(665).Z,n(6250).Z,n(737).Z,n(7404).Z,n(4477).Z,n(1944).Z,n(7797).Z,n(2254).Z,n(5010).Z,n(6409).Z],r.Falling={Falling:n(2762).Z},r.Music={Music:n(6347).Z},r.Phasers=[n(6568).Z,n(4679).Z,n(8251).Z,n(1171).Z,n(5444).Z,n(2157).Z,n(9264).Z,n(7006).Z,n(5540).Z,n(8836).Z],r.Player={FormationFast:n(7618).Z,FormationSlow:n(3455).Z,Shoot:n(9214).Z,WarpGate:n(5375).Z,WarpLevelEnd:n(2658).Z},r.PlayerExplosions=[n(1550).Z,n(1215).Z],r.Tjirping=[n(4724).Z,n(6290).Z,n(4725).Z,n(1557).Z,n(8272).Z,n(2345).Z,n(402).Z,n(1505).Z,n(2312).Z,n(6707).Z,n(8409).Z,n(2948).Z,n(4129).Z,n(4419).Z,n(4704).Z,n(4895).Z,n(9217).Z,n(4827).Z,n(2947).Z,n(7194).Z],r.Whoping=[n(588).Z,n(9686).Z,n(6702).Z,n(4554).Z,n(8415).Z,n(4153).Z,n(4992).Z,n(4329).Z,n(5261).Z,n(4215).Z,n(4513).Z,n(8005).Z,n(9187).Z,n(6717).Z,n(8656).Z,n(4014).Z,n(2722).Z,n(5867).Z,n(9465).Z,n(1160).Z,n(8871).Z,n(4337).Z],r.Wizzing=[n(3764).Z,n(7278).Z,n(549).Z,n(4991).Z,n(7040).Z,n(4231).Z,n(8096).Z,n(3026).Z,n(289).Z,n(9093).Z,n(8928).Z,n(4316).Z,n(2059).Z,n(858).Z,n(4925).Z,n(8918).Z,n(4979).Z,n(2208).Z,n(3442).Z,n(2953).Z]},6393:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),{gameField:a,pixelSize:i}=o.default();t.default=function(e){const t=[];let n=a.left+18*i;const r=12*i;for(let o=0;o<11;o++){const o={left:n,top:e};n+=r,t.push(o)}return t}},2676:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),a=n(3279),{gameField:i,pixelSize:l}=o.default();t.default=function(e,t,n){const r=[],o=i.left,u=i.right-3*l;for(let i=0;i<e;i++){const e=a.getRandomLocation(u,o,n,t);r.push(e)}return r}},226:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(9519)),{pixelSize:a,gameField:i}=o.default(),l=9*a,u=8*a;t.default=function(){const e=[];let t=l;for(let n=0;n<7;n++)e.push({left:30*a+16*n*a,top:i.top+t});t+=u;for(let n=0;n<6;n++)e.push({left:40*a+16*n*a,top:i.top+t});t+=u;for(let n=0;n<7;n++)e.push({left:30*a+16*n*a,top:i.top+t});return e}},4183:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.startGame=void 0;const o=r(n(7913)),a=n(5172),i=r(n(4975));t.startGame=function(e){a.Canvas.setCanvasDimensions(),i.default.setSettings(),o.default.init(e)}},1742:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3892),o=n(993),a=n(6997);t.default=function(e,t,n,i){const l=o.StateProviders.explosionShrapnellProvider(e,t,n),u={left:e,top:t,startTick:i,coloredFrame:n.explosionCenterFrame,explosionCenterDelay:n.explosionCenterDelay};a.dispatch(r.addExplosionCenter(u,l))}},8916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4898),o=n(6997);t.default=function(){o.dispatch(r.addPhaser()),o.dispatch(r.nextLevel())}},6070:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=n(8278),a=n(4898),i=n(9096),l=n(6997),u=r(n(1742));t.default=function(e){const{gameState:{lives:t},playerState:{left:n,top:r,coloredExplosion:s},debuggingState:c,enemyLevelState:{enemies:d,totalNumberOfEnemies:f}}=l.appState();c.playerIsImmortal||0===d.length&&f>0||(o.SoundPlayer.playerExplosion(),u.default(n,r,s,e),0===t?l.dispatch(a.gameOver()):(l.dispatch(a.removeLife()),l.dispatch(i.setPlayerIsAlive(!1)),l.dispatch(i.setPlayerBulletState(void 0)),l.dispatch(a.setPhasers(1))))}},9830:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setDebuggingState=void 0;const o=r(n(8176));t.setDebuggingState=function(e){return{type:o.default.setDebuggingState,state:e}}},8176:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.setDebuggingState=0]="setDebuggingState"}(n||(n={})),t.default=n},464:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8176));t.default=function(e={},t){switch(t.type){case o.default.setDebuggingState:e=Object.assign({},t.state)}return e}},3892:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setEnemiesState=t.setEnemyLastFireTick=t.removeEnemy=t.setTotalEnemies=t.setBulletState=t.addBullet=t.setExplosionCenters=t.clearPhaserLocations=t.setPhaserLocations=t.setShrapnellState=t.addExplosionCenter=t.resetLevelState=void 0;const o=r(n(2238));t.resetLevelState=function(){return{type:o.default.resetLevelState}},t.addExplosionCenter=function(e,t){return{type:o.default.addExplosionCenter,explosionCenter:e,shrapnell:t}},t.setShrapnellState=function(e){return{type:o.default.setShrapnellState,shrapnell:e}},t.setPhaserLocations=function(e){return{type:o.default.setPhaserLocations,payload:e}},t.clearPhaserLocations=function(){return{type:o.default.clearPhaserLocations}},t.setExplosionCenters=function(e){return{type:o.default.setExplosionCenters,explosionCenters:e}},t.addBullet=function(e){return{type:o.default.addBullet,bullet:e}},t.setBulletState=function(e){return{type:o.default.setBulletState,bullets:e}},t.setTotalEnemies=function(e){return{type:o.default.setTotalEnemies,totalEnemies:e}},t.removeEnemy=function(e){return{type:o.default.removeEnemy,enemyId:e}},t.setEnemyLastFireTick=function(e,t){return{type:o.default.setEnemyLastFireTick,payload:{enemyId:e,tick:t}}},t.setEnemiesState=function(e){return{type:o.default.setEnemies,enemies:e}}},2238:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.resetLevelState=1e3]="resetLevelState",e[e.setShrapnellState=1001]="setShrapnellState",e[e.addExplosionCenter=1002]="addExplosionCenter",e[e.setPhaserLocations=1003]="setPhaserLocations",e[e.clearPhaserLocations=1004]="clearPhaserLocations",e[e.setFireInterval=1005]="setFireInterval",e[e.setExplosionCenters=1006]="setExplosionCenters",e[e.addBullet=1007]="addBullet",e[e.setBulletState=1008]="setBulletState",e[e.setTotalEnemies=1009]="setTotalEnemies",e[e.removeEnemy=1010]="removeEnemy",e[e.setEnemyLastFireTick=1011]="setEnemyLastFireTick",e[e.setEnemies=1012]="setEnemies"}(n||(n={})),t.default=n},8691:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8172)),a=r(n(2238));t.default=function(e={shrapnells:[],phaserLocations:[],explosionCenters:[],bullets:[],totalNumberOfEnemies:0,enemies:[]},t){const n=o.default(e,(n=>{switch(t.type){case a.default.addExplosionCenter:n.explosionCenters.push(t.explosionCenter),n.shrapnells.push(...t.shrapnell);break;case a.default.setShrapnellState:n.shrapnells=t.shrapnell;break;case a.default.setPhaserLocations:n.phaserLocations=t.payload;break;case a.default.clearPhaserLocations:n.phaserLocations=[];break;case a.default.setExplosionCenters:n.explosionCenters=t.explosionCenters;break;case a.default.addBullet:n.bullets.push(t.bullet);break;case a.default.setBulletState:n.bullets=t.bullets;break;case a.default.setTotalEnemies:n.totalNumberOfEnemies=t.totalEnemies;break;case a.default.removeEnemy:n.enemies=n.enemies.filter((e=>e.enemyId!==t.enemyId));break;case a.default.setEnemyLastFireTick:{const r=e.enemies.findIndex((e=>e.enemyId===t.payload.enemyId));r>-1&&(n.enemies[r].lastFiretick=t.payload.tick);break}case a.default.setEnemies:n.enemies=t.enemies}}));return t.type===a.default.resetLevelState?{shrapnells:[],phaserLocations:[],explosionCenters:[],bullets:[],totalNumberOfEnemies:0,enemies:[]}:n}},4898:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setGameInProgress=t.setScreenState=t.resetScore=t.setTimeLevelTimeLimit=t.bulletFired=t.phaserFired=t.enemeyHit=t.gameStart=t.gameOver=t.setWarpGamteComplexity=t.setPause=t.addLifeAndPhaser=t.nextLevel=t.setLevel=t.removePhaser=t.addPhaser=t.setPhasers=t.removeLife=t.setLives=t.increaseScore=void 0;const o=r(n(730));t.increaseScore=function(e){return{type:o.default.increaseScore,payload:e}},t.setLives=function(e){return{type:o.default.setLives,payload:e}},t.removeLife=function(){return{type:o.default.removeLife}},t.setPhasers=function(e){return{type:o.default.setPhasers,payload:e}},t.addPhaser=function(){return{type:o.default.addPhaser}},t.removePhaser=function(){return{type:o.default.removePhaser}},t.setLevel=function(e){return{type:o.default.setLevel,payload:e}},t.nextLevel=function(){return{type:o.default.nextLevel}},t.addLifeAndPhaser=function(){return{type:o.default.addLifeAndPhaser}},t.setPause=function(e){return{type:o.default.setPause,payload:e}},t.setWarpGamteComplexity=function(e){return{type:o.default.setWarpLevelComplexity,complexity:e}},t.gameOver=function(){return{type:o.default.gameOver}},t.gameStart=function(){return{type:o.default.resetGameState}},t.enemeyHit=function(){return{type:o.default.enemyHit}},t.phaserFired=function(){return{type:o.default.phasersFired}},t.bulletFired=function(){return{type:o.default.bulletFired}},t.setTimeLevelTimeLimit=function(e){return{type:o.default.setTimeLevelTimeLimit,limit:e}},t.resetScore=function(){return{type:o.default.resetScore}},t.setScreenState=function(e){return{type:o.default.setScreenState,screenState:e}},t.setGameInProgress=function(e){return{type:o.default.setGameInProgress,gameInProgress:e}}},730:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.setLives=2e3]="setLives",e[e.removeLife=2001]="removeLife",e[e.increaseScore=2002]="increaseScore",e[e.setLevel=2003]="setLevel",e[e.nextLevel=2004]="nextLevel",e[e.addLifeAndPhaser=2005]="addLifeAndPhaser",e[e.setPhasers=2006]="setPhasers",e[e.addPhaser=2007]="addPhaser",e[e.removePhaser=2008]="removePhaser",e[e.setPause=2009]="setPause",e[e.setWarpLevelComplexity=2010]="setWarpLevelComplexity",e[e.gameOver=2011]="gameOver",e[e.resetGameState=2012]="resetGameState",e[e.bulletFired=2013]="bulletFired",e[e.phasersFired=2014]="phasersFired",e[e.enemyHit=2015]="enemyHit",e[e.setTimeLevelTimeLimit=2016]="setTimeLevelTimeLimit",e[e.resetScore=2017]="resetScore",e[e.setScreenState=2018]="setScreenState",e[e.setGameInProgress=2019]="setGameInProgress"}(n||(n={})),t.default=n},3651:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8172)),a=r(n(730)),i=r(n(713));t.default=function(e=function(){return{level:1,lives:2,score:0,lastAwardScore:0,phasers:1,pause:!1,warpLevelSteps:i.default(0),gameOver:!1,gameInProgress:!1,bulletsFired:0,enemiesHit:0,timeLevelTimeLimit:2e4,hardMode:!1,screenState:"about"}}(),t){return o.default(e,(e=>{switch(t.type){case a.default.increaseScore:e.score+=t.payload;break;case a.default.setLives:e.lives=t.payload;break;case a.default.removeLife:e.lives-=1;break;case a.default.setPhasers:e.phasers=t.payload;break;case a.default.addPhaser:e.phasers+=1;break;case a.default.removePhaser:e.phasers--;break;case a.default.setLevel:e.level=t.payload;break;case a.default.nextLevel:42===e.level?(e.hardMode=!0,e.level=1):void 0!==e.level&&e.level++;break;case a.default.addLifeAndPhaser:e.lives++,e.phasers++,e.lastAwardScore=e.score;break;case a.default.setPause:e.pause=t.payload;break;case a.default.setWarpLevelComplexity:e.warpLevelSteps=i.default(t.complexity);break;case a.default.gameOver:e.gameOver=!0;break;case a.default.resetGameState:e.gameOver=!1,e.phasers=1,e.lives=2,e.level=1,e.bulletsFired=0,e.enemiesHit=0,e.lastAwardScore=0;break;case a.default.enemyHit:e.enemiesHit++;break;case a.default.bulletFired:e.bulletsFired++;break;case a.default.setTimeLevelTimeLimit:e.timeLevelTimeLimit=t.limit;break;case a.default.resetScore:e.score=0,e.lastAwardScore=0;break;case a.default.setScreenState:e.screenState=t.screenState;break;case a.default.setGameInProgress:e.gameInProgress=t.gameInProgress}}))}},713:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n={0:{stepsX:[0,2,2,4],stepsY:[4,4,6,8]},1:{stepsX:[0,2,2,4],stepsY:[4,4,6,6]},2:{stepsX:[0,2,2,4],stepsY:[4,4,4,6]},3:{stepsX:[2,2,4,4],stepsY:[2,4,4,6]},4:{stepsX:[2,2,2,4],stepsY:[2,2,4]},5:{stepsX:[2,2,2,4],stepsY:[2,2,4]},6:{stepsX:[2,2,4,4],stepsY:[2,4]},7:{stepsX:[2,2,4,4],stepsY:[2]},8:{stepsX:[2,2,4,4],stepsY:[2]}};t.default=function(e){return n[e]}},5695:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.resetKeyboardState=t.keyUp=t.keyDown=void 0;const o=r(n(2572));t.keyDown=function(e){return{type:o.default.keydown,payload:e}},t.keyUp=function(e){return{type:o.default.keyup,payload:e}},t.resetKeyboardState=function(){return{type:o.default.resetKeyboardState}}},2572:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.keyup="KeyUp",e.keydown="KeyDown",e.resetKeyboardState="resetKeyboardState"}(n||(n={})),t.default=n},9764:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8172)),a=n(8629),i=r(n(2572));t.default=function(e={up:!1,down:!1,left:!1,right:!1,fire:!1,phraser:!1,pause:!1,menu:!1},t){return o.default(e,(n=>{let r=!1;if(t.type===i.default.keydown?r=!0:t.type===i.default.keyup&&(r=!1),t.type===i.default.resetKeyboardState)n.left=!1,n.right=!1,n.up=!1,n.down=!1,n.fire=!1,n.phraser=!1;else{if(t.type!==i.default.keydown&&t.type!==i.default.keyup)return e;const o=a.KeybindingsMapping.getMapping().find((e=>e.binding===t.payload));switch(null==o?void 0:o.keycode){case void 0:break;case"upkey":n.up=r;break;case"downKey":n.down=r;break;case"leftKey":n.left=r;break;case"rightKey":n.right=r;break;case"fireKey":n.fire=r;break;case"phaserKey":n.phraser=r;break;case"pauseKey":n.pause=r;break;case"menu":n.menu=r}}}))}},9096:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setPlayerBulletState=t.setPlayerLocationData=t.setPlayerMovementLimit=t.setPlayerIsAlive=void 0;const o=r(n(6843));t.setPlayerIsAlive=function(e){return{type:o.default.setPlayerIsAlive,playerIsAlive:e}},t.setPlayerMovementLimit=function(e){return{type:o.default.setPlayerMovementLimit,payload:e}},t.setPlayerLocationData=function(e,t,n,r){return{type:o.default.setPlayerLocationData,payload:{left:e,top:t,hitboxes:n,nozzleLocation:r}}},t.setPlayerBulletState=function(e){return{type:o.default.setPlayerBulletState,particleState:e}}},6843:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.setPlayerIsAlive=3e3]="setPlayerIsAlive",e[e.setPlayerMovementLimit=3001]="setPlayerMovementLimit",e[e.setPlayerLocationData=3002]="setPlayerLocationData",e[e.setPlayerBulletState=3003]="setPlayerBulletState"}(n||(n={})),t.default=n},1716:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8172)),a=n(4395),i=r(n(8979)),l=n(6458),u=r(n(152)),s=r(n(6843));t.default=function(e=function(){const e=i.default();u.default.Frame.convertHexToCGA(e.explosionCenterFrame),e.particleFrames.forEach((e=>u.default.Frame.convertHexToCGA(e)));const t=a.Locations.Player.spawnLocation,n=l.getPlayerFrame();return{alive:!1,moveLimit:"none",left:t.left,top:t.top,hitboxes:void 0,nozzleLocation:{left:0,top:0},coloredExplosion:e,coloredFrame:n,bulletState:void 0}}(),t){return o.default(e,(e=>{switch(t.type){case s.default.setPlayerIsAlive:e.alive=t.playerIsAlive;break;case s.default.setPlayerMovementLimit:e.moveLimit=t.payload;break;case s.default.setPlayerLocationData:e.left=t.payload.left,e.top=t.payload.top,e.hitboxes=t.payload.hitboxes,e.nozzleLocation=t.payload.nozzleLocation;break;case s.default.setPlayerBulletState:e.bulletState=t.particleState}}))}},8629:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.KeybindingsMapping=void 0;const r=n(2536);let o=[],a=[];!function(e){function t(){return[...o]}e.update=function(e){o=[];for(const t of Object.keys(e)){const n=t;o.push({keycode:n,binding:r.getKeyValue(n,e)})}a=[],a=t().map((e=>e.binding))},e.getMapping=t,e.getAllGameKeys=function(){return a}}(t.KeybindingsMapping||(t.KeybindingsMapping={}))},6796:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setKeybindings=t.setSoundStateSetting=t.setGameSpeedSetting=void 0;const o=r(n(4530));t.setGameSpeedSetting=function(e){return{type:o.default.setGameSpeedSetting,speed:e}},t.setSoundStateSetting=function(e){return{type:o.default.setSoundStateSetting,value:e}},t.setKeybindings=function(e){return{type:o.default.setKeybindings,keybindings:e}}},4530:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.setGameSpeedSetting=4e3]="setGameSpeedSetting",e[e.setSoundStateSetting=4001]="setSoundStateSetting",e[e.setKeybindings=4002]="setKeybindings"}(n||(n={})),t.default=n},1723:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.settingsReducer=void 0;const o=r(n(8172)),a=r(n(4975)),i=n(8629),l=r(n(4530));t.settingsReducer=function(e=function(){return a.default.getSettings()}(),t){return o.default(e,(e=>{switch(t.type){case l.default.setGameSpeedSetting:e.gameSpeed=t.speed;break;case l.default.setKeybindings:e.keybindings=t.keybindings,i.KeybindingsMapping.update(e.keybindings);break;case l.default.setSoundStateSetting:e.playSound=t.value}}))}},1866:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={player:38,robot:11,orb:11,spinner:11,balloon:11,piston:11,diabolo:11,devil:11,crab:11,bat:11,cloakingOrb:11,bird:11,fish:11}},5902:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={bird:1.3,robot:1.3,orb:.1,spinner:1.3,balloon:1.3,crab:1.3,bat:1.3,Asteroid:{down:[2,4,6,8,10],diagonal:[5,7,10,10,10,12]},SpaceMonster:{down:[2,4,6,8,10],diagonal:[6,7,10,10,12,12]},diabolo:1.3,devil:1.3,Piston:{slow:1.3,fast:3},Boat:{slow:1.3,fast:3.5},Player:{aliveSpeed:{speedX:10,speedY:9},formingSpeed:4,warpUpSpeed:3.2}}},9918:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.setSpeed=void 0;const o=r(n(1967));t.setSpeed=function(e){return{type:o.default.setSpeed,speed:e}}},1967:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.setSpeed=4e3]="setSpeed"}(n||(n={})),t.default=n},2158:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1206)),a=r(n(1866)),i=r(n(5902)),l=r(n(1967));function u(e){return{movement:s(i.default,e),bullets:s(a.default,e),gameSpeed:e,minimumDistance:o.default(20,e),slowParticleFormationSpeed:o.default(10,e),fastParticleFormationSpeed:o.default(30,e)}}function s(e,t){const n={};for(const r of Object.keys(e)){const a=e[r];if("number"==typeof a)n[r]=o.default(a,t);else if(Array.isArray(a))n[r]=a.map((e=>o.default(e,t)));else{if("object"!=typeof a||null===a)throw new Error("Not a supported value");n[r]=s(a,t)}}return n}t.default=function(e=u(100),t){switch(t.type){case l.default.setSpeed:return u(t.speed);default:return e}}},993:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StateProviders=void 0;const o=n(8172),a=r(n(1206)),i=n(3640),l=n(3279),u=n(6997);!function(e){function t(e,t,n,r,o,a=1,l=0,u=0){return{acceletation:a,angle:r,coloredFrame:o,hitbox:i.getFrameHitbox(e,t,o,l,u),speed:n,left:e,top:t}}e.getParticleState=t,e.getBulletParticleState=function(e,n,r,o,a,i,l=0,u=0){const s=t(e,n,r,o,a,1,l,u);return s.owner=i,s},e.explosionShrapnellProvider=function(t,n,r){const o=[];for(let i=0;i<r.particleFrameIndexes.length;i++){const l=r.particleFrameIndexes[i],s=r.particleFrames[l],c=r.angles[i],d=a.default(r.useSpeed?r.speed:r.speeds[i],u.appState().speedState.gameSpeed),f=e.getParticleState(t,n,d,c,s,r.acceleration,0,0);o.push(f)}return o},e.getUpdatedParticleState=function(e){const t=[];for(const n of e){const e=o.produce(n,(e=>{const t=l.getLocation(n.left,n.top,n.angle,n.speed),r=i.getFrameHitbox(t.left,t.top,n.coloredFrame);l.fallsWithinGameField(r.left,r.right,t.top,r.bottom)&&(e.left=t.left,e.top=t.top,e.speed=n.speed*n.acceletation,e.hitbox=i.getFrameHitbox(t.left,t.top,n.coloredFrame))}));n!==e&&t.push(e)}return t}}(t.StateProviders||(t.StateProviders={}))},6997:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.dispatch=t.appStore=t.appState=t.createReduxStore=void 0;const o=n(4890),a=r(n(464)),i=r(n(8691)),l=r(n(3651)),u=r(n(9764)),s=r(n(1716)),c=n(1723),d=r(n(2158)),f=o.combineReducers({enemyLevelState:i.default,playerState:s.default,debuggingState:a.default,gameState:l.default,keyboardState:u.default,speedState:d.default,settingsState:c.settingsReducer}),p=m();function m(){return o.createStore(f)}t.createReduxStore=m,t.appState=function(){return p.getState()},t.appStore=function(){return p},t.dispatch=function(e){p.dispatch(e)}},2108:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=n(4898),i=n(6997),l=n(7722),u=n(6035);t.default=function(){return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:u.Styles.header},"About me"),o.default.createElement("div",{style:Object.assign(Object.assign(Object.assign({},u.Styles.defaultContainer),{flexDirection:"column"}),u.Styles.textStyle)},o.default.createElement("p",null,o.default.createElement("p",null,"My name is Antonio Invernizzi. I've worked as a professional programmer for 20 years. Round 42 is a big reason why."),o.default.createElement("p",null,"It was 1990 and my parents bought our first PC. A 4 Mhz 8088 XT. It shipped with 3 games:",o.default.createElement("ul",null,o.default.createElement("li",null,"Digger"),o.default.createElement("li",null,"A pinball machine"),o.default.createElement("li",null,"Round 42"))),o.default.createElement("p",null,"It is fair to say I was instantly addicted to Round 42 and spend many, many hours trying to beat the game often with my mother watching. ",o.default.createElement("br",null),o.default.createElement("br",null),"Good times :).  ",o.default.createElement("br",null)," ",o.default.createElement("br",null),"Course, spending hour uppon hour behind a PC made me curious what else I could do with it and... well... now I'm a programmer. Though, I am not a game developer by trade I realy enjoyed the challenge of writing one."),o.default.createElement("p",null,"I did NOT reverse engineer Round 42. Everything I put into this remake was gather from observation and experience.")),o.default.createElement("p",{style:u.Styles.header},"Technologies used"),o.default.createElement("p",null,o.default.createElement("ul",null,o.default.createElement("li",null,"TypeScript for coding"),o.default.createElement("li",null,"WebPack for packaging"),o.default.createElement("li",null,"Redux for state"),o.default.createElement("li",null,"Immer for QoL state management."),o.default.createElement("li",null,"React (menu only)"),o.default.createElement("li",null,"React Redux (menu only)"),o.default.createElement("li",null,"Howler for sound"))),o.default.createElement("div",{style:u.Styles.buttonContainer},o.default.createElement(l.HoverButton,{onClick:()=>i.dispatch(a.setScreenState("mainmenu")),text:"Back to main menu"}))))}},7722:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.HoverButton=void 0;const i=a(n(7294)),l=n(6035);t.HoverButton=function(e){const[t,n]=i.useState(!1);function r(){n(!t)}return i.default.createElement("button",{style:t?l.Styles.buttonHoverStyle:l.Styles.buttonStyle,onClick:function(){e.onClick&&e.onClick()},onMouseEnter:r,onMouseLeave:r},e.text)}},2041:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.GameOptions=void 0;const l=a(n(7294)),u=n(1512),s=n(5172),c=n(4898),d=n(6796),f=n(9918),p=n(6997),m=n(7722),h=i(n(4975)),g=n(6035);function v(e,t,n,r){return l.default.createElement("tr",null,l.default.createElement("td",{style:g.Styles.tableStyle},e),l.default.createElement("td",{style:g.Styles.tableStyle},t),l.default.createElement("td",{style:g.Styles.tableStyle},l.default.createElement(m.HoverButton,{onClick:()=>r(n),text:"Edit"})))}t.GameOptions=function(){const[e,t]=l.useState(!1),[n,r]=l.useState(void 0),o=u.useSelector((e=>e.settingsState)),a=u.useSelector((e=>e.gameState.gameInProgress)),{gameSpeed:i,keybindings:y,playSound:b}=o;function _(e){t(!0),r(e)}function w(r){if(!e)return;const o=Object.assign({},y);void 0!==n&&(o[n]=r.code,p.dispatch(d.setKeybindings(o)),h.default.storeSetting("keybindings",JSON.stringify(o))),t(!1)}return l.useEffect((()=>(document.addEventListener("keydown",w),()=>{document.removeEventListener("keydown",w)})),[e]),l.default.createElement("div",{style:g.Styles.defaultContainer},e?l.default.createElement("p",{style:g.Styles.header},"Press the key to bind"):l.default.createElement("div",{style:{flexDirection:"column"}},l.default.createElement("p",{style:g.Styles.header},"Options"),!a&&l.default.createElement("b",null,l.default.createElement("p",{style:g.Styles.textStyle},"Adjust game speed")),!a&&l.default.createElement("div",{style:Object.assign(Object.assign({},g.Styles.textStyle),{flexDirection:"column"})},l.default.createElement("input",{type:"range",min:"50",max:"200",step:1,value:i,onChange:function(e){e&&(p.dispatch(d.setGameSpeedSetting(e.target.valueAsNumber)),p.dispatch(f.setSpeed(e.target.valueAsNumber)))}}),i,"%"),l.default.createElement("div",null,l.default.createElement("div",{style:{flexDirection:"row"}},l.default.createElement("input",{type:"checkbox",checked:b,onChange:function(e){e&&p.dispatch(d.setSoundStateSetting(e.target.checked))}}),l.default.createElement("span",{style:g.Styles.textStyle},"Play sounds"))),l.default.createElement("br",null),l.default.createElement("b",null,l.default.createElement("span",{style:g.Styles.textStyle},"Keybindings")),l.default.createElement("table",{style:g.Styles.tableStyle},l.default.createElement("thead",null,l.default.createElement("tr",{style:g.Styles.tableStyle},l.default.createElement("th",{style:g.Styles.tableStyle},"Action"),l.default.createElement("th",{style:g.Styles.tableStyle},"Key"),l.default.createElement("th",{style:g.Styles.tableStyle},"Edit"))),l.default.createElement("tbody",null,v("Up",y.upkey,"upkey",_),v("Down",y.downKey,"downKey",_),v("Left",y.leftKey,"leftKey",_),v("Right",y.rightKey,"rightKey",_),v("Fire",y.fireKey,"fireKey",_),v("Phaser",y.phaserKey,"phaserKey",_),v("Pause",y.pauseKey,"pauseKey",_),v("In game menu",y.menu,"menu",_))),a?l.default.createElement(m.HoverButton,{onClick:function(){p.dispatch(c.setScreenState("playing")),p.dispatch(c.setPause(!1)),s.Canvas.setCanvasDimensions()},text:"Continue"}):l.default.createElement(m.HoverButton,{onClick:()=>p.dispatch(c.setScreenState("mainmenu")),text:"Main menu"})))}},9570:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=n(4898),i=n(6997),l=n(7722),u=n(6035);t.default=function(e){const{gameResult:t}=e;return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:u.Styles.header},"Game over"),o.default.createElement("br",null),o.default.createElement("div",{style:u.Styles.defaultContainer},o.default.createElement("table",{style:Object.assign(Object.assign({},u.Styles.textStyle),{width:"20%"})},o.default.createElement("tbody",null,o.default.createElement("tr",null,o.default.createElement("td",null,"Score"),o.default.createElement("td",null,null==t?void 0:t.score)),o.default.createElement("tr",null,o.default.createElement("td",null,"Bullets fired"),o.default.createElement("td",null,null==t?void 0:t.bulletsFired)),o.default.createElement("tr",null,o.default.createElement("td",null,"Enemies hit"),o.default.createElement("td",null,null==t?void 0:t.enemiesHit)),o.default.createElement("tr",null,o.default.createElement("td",null,"% Hit"),o.default.createElement("td",null,function(e,t){if(void 0===e)return"0%";if(void 0===t)return"0%";if(0===t)return"0%";const n=e/t*100;return`${Math.round(n)}%`}(null==t?void 0:t.enemiesHit,null==t?void 0:t.bulletsFired)))))),o.default.createElement("br",null),o.default.createElement("div",{style:u.Styles.buttonContainer},o.default.createElement(l.HoverButton,{onClick:()=>i.dispatch(a.setScreenState("mainmenu")),text:"Ok"})))}},7234:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const l=a(n(7294)),u=n(1512),s=i(n(2108)),c=n(2041),d=i(n(9570)),f=i(n(6544));t.default=function(){const e=u.useSelector((e=>e.gameState.screenState)),[t,n]=l.useState();return l.default.createElement("div",null,"mainmenu"===e&&l.default.createElement(f.default,{setGameResult:n})||"about"===e&&l.default.createElement(s.default,null)||"gameover"===e&&l.default.createElement(d.default,{gameResult:t})||"options"===e&&l.default.createElement(c.GameOptions,null))}},6544:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(7294)),a=r(n(2639)),i=n(4183),l=n(4898),u=n(6997),s=n(7722),c=n(6035);t.default=function(e){const{setGameResult:t}=e;return o.default.createElement(o.default.Fragment,null,o.default.createElement("p",{style:c.Styles.header},"Welcome to Round 42"),o.default.createElement("div",{style:c.Styles.defaultTextContainer},o.default.createElement("p",{style:c.Styles.textStyle},"Original game by Mike Pooler released in 1986.",o.default.createElement("br",null),"Remake by Antonio Invernizzi 2020."),o.default.createElement("br",null)),o.default.createElement("div",{style:c.Styles.defaultTextContainer},o.default.createElement("div",{style:{flexDirection:"column"}},o.default.createElement("p",null,"Instructions for default keybindings"),o.default.createElement("ul",null,o.default.createElement("li",null,"Use the arrow keys to move (default)."),o.default.createElement("li",null,"Press F1 to fire a bullet (default)."),o.default.createElement("li",null,"Press F2 to fire a Phaser (default)."),o.default.createElement("ul",null,o.default.createElement("li",null,"This is your super weapon. It kills a random enemy in one shot."),o.default.createElement("li",null,"You only have limited charges so use them wisely.")),o.default.createElement("li",null,"A life and phaser is awared every 7500 points."),o.default.createElement("li",null,"When you die you'll lose your phaser charges."),o.default.createElement("li",null,"When you die you can hold the 'Pause' key to stop your formation. While forming you cannot be hit."),o.default.createElement("li",null,"When there are enemies on the screen you can move left and right while your ship is forming.")),o.default.createElement("p",null,"You can setup your own keybinds in the 'Option and Keybinds' menu."))),o.default.createElement("br",null),o.default.createElement("div",{style:Object.assign(Object.assign({},c.Styles.buttonContainer),c.Styles.textStyle)},o.default.createElement(s.HoverButton,{onClick:()=>(function(){const e=document.getElementById("body");e&&a.default(e)}(),u.dispatch(l.setScreenState("playing")),void i.startGame((e=>{u.dispatch(l.setScreenState("gameover")),t(e),u.dispatch(l.setGameInProgress(!1))}))),text:"Play"}),o.default.createElement(s.HoverButton,{onClick:()=>u.dispatch(l.setScreenState("options")),text:"Options and Keybinds"}),o.default.createElement("p",null,"Round 42 is open source. Feel free to take a look."),o.default.createElement(s.HoverButton,{onClick:function(){const e=window.open("https://github.com/AltarnRain/r42ts","_blank");null!==e&&e.focus()},text:"Source code"}),o.default.createElement("p",null,"Learn more? Click about."),o.default.createElement(s.HoverButton,{onClick:()=>u.dispatch(l.setScreenState("about")),text:"About"})))}},4975:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SettingsManager=void 0;const o=n(6796),a=n(6997),i=r(n(3483));var l;!function(e){function t(){const e=window.localStorage.getItem(i.default.playSound),t=window.localStorage.getItem(i.default.gameSpeed),n=window.localStorage.getItem(i.default.keybindings);return{gameSpeed:null===t?100:parseInt(t,10),playSound:null===e||"true"===e,keybindings:null===n?{upkey:"ArrowUp",downKey:"ArrowDown",leftKey:"ArrowLeft",rightKey:"ArrowRight",fireKey:"F1",phaserKey:"F2",pauseKey:"Space",menu:"KeyQ"}:JSON.parse(n)}}e.getSettings=t,e.setSettings=function(){const e=t();a.dispatch(o.setGameSpeedSetting(e.gameSpeed)),a.dispatch(o.setKeybindings(e.keybindings)),a.dispatch(o.setSoundStateSetting(e.playSound))},e.getDefaultKeyBindings=function(){return{upkey:"ArrowUp",downKey:"ArrowDown",leftKey:"ArrowLeft",rightKey:"ArrowRight",fireKey:"F1",phaserKey:"F2",pauseKey:"Space",menu:"KeyQ"}},e.storeSetting=function(e,t){switch(e){case"gamespeed":window.localStorage.setItem(i.default.gameSpeed,t);break;case"playsound":window.localStorage.setItem(i.default.playSound,t);break;case"keybindings":window.localStorage.setItem(i.default.keybindings,t);break;default:throw new Error("Unknown setting")}}}(l=t.SettingsManager||(t.SettingsManager={})),t.default=l},3483:(e,t)=>{"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e.gameSpeed="_round42_gameSpeed",e.playSound="_round42_playSound",e.keybindings="_round42_keybinds"}(n||(n={})),t.default=n},6035:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Styles=void 0;const o=r(n(1501)),a=Object.assign(Object.assign({},{display:"flex"}),{justifyContent:"center",flexDirection:"row"}),i={fontFamily:"consolas"};var l;(l=t.Styles||(t.Styles={})).header=Object.assign(Object.assign(Object.assign({},a),i),{margin:"0px",color:o.default.yellow,fontSize:50}),l.defaultContainer=Object.assign({},a),l.textStyle=Object.assign(Object.assign({},i),{backgroundColor:"black",color:o.default.yellow}),l.defaultTextContainer=Object.assign(Object.assign({},l.defaultContainer),l.textStyle),l.buttonContainer=Object.assign(Object.assign(Object.assign({},a),i),{flexDirection:"column",flexGrow:0,alignItems:"center"}),l.tableStyle=Object.assign(Object.assign({},i),{borderColor:"yellow",borderStyle:"double",color:"white",width:"400px",textAlign:"center",justifyContent:"center"}),l.buttonStyle=Object.assign(Object.assign(Object.assign({},a),i),{backgroundColor:"black",color:"yellow",borderColor:"yellow",marginBottom:"10px",marginTop:"10px"}),l.buttonHoverStyle=Object.assign(Object.assign({},l.buttonStyle),{backgroundColor:"yellow",color:"black"})},1813:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomArrayElement=void 0,t.getRandomArrayElement=function(e){return 1===e.length?e[0]:e[Math.floor(Math.random()*e.length)]}},1206:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e*(60/(100/t*60))}},3640:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.copyFrames=t.copyFrame=t.getFrameHitbox=t.getFrameByIndex=t.getRandomFrameKeyIndex=t.getFrameCenter=t.getMaximumFrameDimensions=t.getFrameDimensions=void 0;const o=r(n(9519));function a(e){const t=o.default().pixelSize;return{width:e[0].length*t,height:e.length*t}}function i(e){const t=[];for(const n of e){const e=[...n];t.push(e)}return t}t.getFrameDimensions=a,t.getMaximumFrameDimensions=function(e){const t=e.map((e=>a(e))),n=t.map((e=>e.width)),r=t.map((e=>e.width));return{width:Math.max(...n),height:Math.max(...r)}},t.getFrameCenter=function(e,t,n){const r=a(n);return{left:e+r.width/2,top:t+r.height/2}},t.getRandomFrameKeyIndex=function(e){const t=Object.keys(e).length-1;return Math.round(Math.random()*t)},t.getFrameByIndex=function(e,t){const n=e[t];if(!n)throw new Error("No frame found");return n},t.getFrameHitbox=function(e,t,n,r=0,o=0){const{width:i,height:l}=a(n);return{top:t+r,left:e,right:e+i,bottom:t+l+o}},t.copyFrame=i,t.copyFrames=function(e){const t=[];for(const n of e){const e=i(n);t.push(e)}return t}},152:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(535));var a;!function(e){let t,n;!function(e){e.setColor=function(e,...t){for(const r of e)n.setColor(r,...t)},e.convertHexToCGA=function(e){for(const t of e)n.convertHexToCGA(t)}}(t=e.Frames||(e.Frames={})),function(e){e.convertHexToCGA=function(e){e.forEach(((t,n)=>{t.forEach(((t,r)=>{"0"!==t&&(e[n][r]=o.default(t))}))}))},e.setColor=function(e,...t){if(0===t.length)throw new Error("No colors");e.forEach(((n,r)=>{n.forEach(((n,o)=>{if("0"!==n){let a="";if(-1!==n.indexOf("V")){const e=n.replace("V","");a=""===e?t[0]:t[parseInt(e,10)]}else a=t[0];if(void 0===a||""===a)throw Error("Color shoud not be undefined");e[r][o]=a}}))}))}}(n=e.Frame||(e.Frame={}))}(a||(a={})),t.default=a},3855:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getUpOrDownFromAngle=t.getLeftOrRightFromAngle=t.calculateAngleDifference=t.calculateAngle=t.reverseDegreeAngle=t.overlaps=t.getAngle=t.getNextY=t.getNextX=void 0;const r=n(224);t.getNextX=function(e,t,n){return Math.cos(e*Math.PI/180)*t+n},t.getNextY=function(e,t,n){return Math.sin(e*(Math.PI/180))*t+n},t.getAngle=function(e){let t=-1;return e.up&&e.left?t=r.angles.leftup:e.up&&e.right?t=r.angles.rightup:e.down&&e.left?t=r.angles.leftdown:e.down&&e.right?t=r.angles.rightdown:e.left?t=r.angles.left:e.right?t=r.angles.right:e.up?t=r.angles.up:e.down&&(t=r.angles.down),t},t.overlaps=function(e,t){return!(void 0===e||void 0===t||e.right<t.left||e.left>t.right||e.bottom<t.top||e.top>t.bottom)},t.reverseDegreeAngle=function(e){let t=e+=180;return t>360&&(t-=360),t},t.calculateAngle=function(e,t,n,r){const o=n-e,a=r-t;if(0!==o||0!==a)return 180*Math.atan2(a,o)/Math.PI},t.calculateAngleDifference=function(e,t){const n=(Math.abs(e-t)+180)%360-180;return Math.abs(n)},t.getLeftOrRightFromAngle=function(e){if(void 0!==e)return e>270&&e<=360||e>=0&&e<90?"right":e>90&&e<270?"left":void 0},t.getUpOrDownFromAngle=function(e){if(void 0!==e&&0!==e&&360!==e&&180!==e)return e>180&&e<360?"up":e>0&&e<180?"down":void 0}},535:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(1501));t.default=function(e){switch(e){case"0":return o.default.black;case"1":return o.default.blue;case"2":return o.default.green;case"3":return o.default.cyan;case"4":return o.default.red;case"5":return o.default.magenta;case"6":return o.default.brown;case"7":return o.default.lightGray;case"8":return o.default.darkGray;case"9":return o.default.lightBlue;case"A":return o.default.lightGreen;case"B":return o.default.lightCyan;case"C":return o.default.lightRed;case"D":return o.default.lightMagenta;case"E":return o.default.yellow;case"F":return o.default.white;default:return""}}},159:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.unregisterListeners=t.registerListeners=void 0;const o=r(n(3819)),a=n(5172),i=n(4898),l=n(5695),u=n(6997);function s(e){const{playerState:t,gameState:n}=u.appState();o.default.isValidGameKey(e.code)&&(e.stopPropagation(),e.preventDefault(),e.code===u.appState().settingsState.keybindings.pauseKey&&t.alive?n.pause?u.dispatch(i.setPause(!1)):u.dispatch(i.setPause(!0)):e.code===u.appState().settingsState.keybindings.menu?(u.dispatch(i.setPause(!0)),u.dispatch(i.setScreenState("options")),a.Canvas.minimizeCanvas()):u.dispatch(l.keyDown(e.code)))}function c(e){o.default.isValidGameKey(e.code)&&(e.stopPropagation(),e.preventDefault(),u.dispatch(l.keyUp(e.code)))}t.registerListeners=function(){window.addEventListener("keyup",c),window.addEventListener("keydown",s),window.addEventListener("resize",a.Canvas.setCanvasDimensions)},t.unregisterListeners=function(){window.removeEventListener("keyup",c),window.removeEventListener("keydown",s),window.removeEventListener("resize",a.Canvas.setCanvasDimensions)}},2536:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getKeyValue=t.coinFlip=t.getURLQueryKVPs=t.calculateTimeSpeedIncrease=t.randomNumberInRange=void 0,t.randomNumberInRange=function(e,t){return Math.floor(Math.random()*(e-t)+t)},t.calculateTimeSpeedIncrease=function(e,t){return 1*e/t},t.getURLQueryKVPs=function(e){return e.split("?").map((e=>{const t=e.split("=");return{key:t[0],value:t[1]}}))},t.coinFlip=function(){return 1===Math.floor(2*Math.random())},t.getKeyValue=function(e,t){return t[e]}},3279:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getRandomLocation=t.getNextLocationAndAngle=t.getNextLocationWithinBoundaries=t.getOffsetLocation=t.getLocation=t.fallsWithinGameField=t.fallsWithin=t.calculateDistance=void 0;const o=r(n(9519)),a=n(3855),i=n(2536),{gameField:l,pixelSize:u}=o.default();function s(e,t,n,r,o,a,i,l){return t>=o&&e<=a&&r>=i&&n<=l}function c(e,t,n,r){return void 0===n?{left:e,top:t}:{left:a.getNextX(n,r,e),top:a.getNextY(n,r,t)}}t.calculateDistance=function(e,t,n,r){const o=e-n,a=t-r;return Math.sqrt(Math.pow(o,2)+Math.pow(a,2))},t.fallsWithin=s,t.fallsWithinGameField=function(e,t,n,r){return s(e,t,n,r,l.left,l.right,l.top,l.bottom-u)},t.getLocation=c,t.getOffsetLocation=function(e,t,n,r){return{left:e+n,top:t+r}},t.getNextLocationWithinBoundaries=function(e,t,n,r,o,i,u){let{left:s,top:d}=c(e,t,r,o);const f=a.getLeftOrRightFromAngle(r);return"right"===f?s-n>l.right&&(s=l.left-n):"left"===f&&s+n<l.left&&(s=l.right+n),d>u&&(d=i),{left:s,top:d}},t.getNextLocationAndAngle=function(e,t,n,r,o,a,i,u){const s=c(e,t,n,r);return(s.left<=l.left||s.left+o>=l.right)&&(n=180-n),(s.top<=i||s.top>=u-a)&&(n*=-1),{location:c(s.left,s.top,n,r),angle:n}},t.getRandomLocation=function(e,t,n,r){return{left:i.randomNumberInRange(t,e),top:i.randomNumberInRange(r,n)}}},3559:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.padLeft=void 0,t.padLeft=function(e,t,n){if(e.length>=t)return e;{const r=t-e.length;let o="";for(let e=0;e<r;e++)o+=n;return o+e}}},5801:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){const n=t.toUpperCase();return"SPACE"===n?e[t.length-1]:e[n.charCodeAt(0)-65]}},2629:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),n(7294);const o=r(n(7294)),a=r(n(3935)),i=n(1512),l=r(n(5217)),u=n(6997),s=r(n(7234));window.location.search.indexOf("?playground")>-1||window.location.search.indexOf("?canvas")>-1||window.location.search.indexOf("?sound")>-1?l.default():a.default.render(o.default.createElement(i.Provider,{store:u.appStore()},o.default.createElement(s.default,null)),document.getElementById("root"))}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=e=>((e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n(2629)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,